; Williams Defender arcade game disassembly, created by Aaron Bottegal.
; This disassembly is a work in progress.


;PCB Registers

PALETTE_ENTRY_0x0                        = 0xC000
PALETTE_ENTRY_0x1                        = 0xC001
PALETTE_ENTRY_0x2                        = 0xC002
PALETTE_ENTRY_0x3                        = 0xC003
PALETTE_ENTRY_0x4                        = 0xC004
PALETTE_ENTRY_0x5                        = 0xC005
PALETTE_ENTRY_0x6                        = 0xC006
PALETTE_ENTRY_0x7                        = 0xC007
PALETTE_ENTRY_0x8                        = 0xC008
PALETTE_ENTRY_0x9                        = 0xC009
PALETTE_ENTRY_0xA                        = 0xC00A
PALETTE_ENTRY_0xB                        = 0xC00B
PALETTE_ENTRY_0xC                        = 0xC00C
PALETTE_ENTRY_0xD                        = 0xC00D
PALETTE_ENTRY_0xE                        = 0xC00E
PALETTE_ENTRY_0xF                        = 0xC00F
SCREEN_CONTROL                           = 0xC010
WATCHDOG                                 = 0xC3FC ;to 0xC3FF
VIDEO_COUNTER_BITS                       = 0xC800 ;to 0xCBFF
PIA_ROM_DATA_A                           = 0xCC00
PIA_ROM_CTRL_A                           = 0xCC01
PIA_ROM_DATA_B                           = 0xCC02
PIA_ROM_CTRL_B                           = 0xCC03
PIA_WGT_DATA_A                           = 0xCC04
PIA_WGT_CTRL_A                           = 0xCC05
PIA_WGT_DATA_B                           = 0xCC06
PIA_WGT_CTRL_B                           = 0xCC07
BANKSWITCH                               = 0xD000


;RAM Variables

	.org $0000
R_0000:                                  .rs 0x01 ;0x0000


	.org $01ED
R_01ED:                                  .rs 0x01 ;0x01ED


	.org $0ADE
R_0ADE:                                  .rs 0x01 ;0x0ADE


	.org $29F3
R_29F3:                                  .rs 0x01 ;0x29F3


	.org $3997
R_3997:                                  .rs 0x01 ;0x3997


	.org $467E
R_467E:                                  .rs 0x01 ;0x467E


	.org $6666
R_6666:                                  .rs 0x01 ;0x6666


	.org $7BEB
R_7BEB:                                  .rs 0x01 ;0x7BEB


	.org $8888
R_8888:                                  .rs 0x01 ;0x8888


	.org $967E
R_967E:                                  .rs 0x01 ;0x967E


	.org $9730
R_9730:                                  .rs 0x01 ;0x9730


	.org $9C00
R_9C00:                                  .rs 0x01 ;0x9C00


	.org $9C40
R_9C40:                                  .rs 0x01 ;0x9C40


	.org $A002
R_A002:                                  .rs 0x01 ;0xA002


	.org $A009
BANK_7_DATA_PTR?:                        .rs 0x01 ;0xA009


	.org $A00B
A00B_PTR_UNK:                            .rs 0x01 ;0xA00B


	.org $A00D
SHITED_DATA_A00D:                        .rs 0x01 ;0xA00D

A00B_DATA_SHIFTED:                       .rs 0x01 ;0xA00E

COUNTDOWN_A00F:                          .rs 0x01 ;0xA00F

A010_UNK:                                .rs 0x01 ;0xA010

A011_TIED_WITH_A00D:                     .rs 0x01 ;0xA011

A012_UNK:                                .rs 0x01 ;0xA012

STACK_SAVE_LOC:                          .rs 0x01 ;0xA013


	.org $A015
A015_X_MATCH:                            .rs 0x01 ;0xA015


	.org $A017
A017_COMPARED_TO_A017:                   .rs 0x01 ;0xA017


	.org $A036
CURRENT_BANK:                            .rs 0x01 ;0xA036

VAL_FROM_SRAM_C495-C496:                 .rs 0x01 ;0xA037


	.org $A03D
TEXT_PTR_TO_CODE_JSR:                    .rs 0x02 ;0xA03D to A03E
TEXT_PTR_TO_CODE_JMP:                    .rs 0x02 ;0xA03F to A040

	.org $A047
UNK_$47:                                 .rs 0x01 ;0xA047

UNK_$48:                                 .rs 0x01 ;0xA048

UNK_$49_SYS_MENU_FLAG?:                  .rs 0x01 ;0xA049


	.org $A04C
TEXT_DATA_SPACING_XXYY?:                 .rs 0x02 ;0xA04C to A04D
SENTENCE_CURR_SCR_LOC_CR_XXYY?:          .rs 0x02 ;0xA04E to A04F
SENTENCE_CURR_SCR_LOC_XXYY:              .rs 0x02 ;0xA050 to A051
SENTENCE_PTR_WORD_ON:                    .rs 0x02 ;0xA052 to A053
SENTENCE_PTR_TO_WORD:                    .rs 0x01 ;0xA054


	.org $A056
SENTENCE_END_PTR:                        .rs 0x01 ;0xA056


	.org $A058
SENTENCE_FLAG_58:                        .rs 0x01 ;0xA058

TEXT_PTR_UNK:                            .rs 0x02 ;0xA059 to A05A

	.org $A061
LIST_OBJ[6]=0:                           .rs 0x01 ;0xA061


	.org $A063
R_A063_PTR_TO_OTHER_LIST:                .rs 0x01 ;0xA063
 - Default is A05F

	.org $A065
LIST_$65_UNK:                            .rs 0x01 ;0xA065


	.org $A067
LIST_$67_UNUSED_OBJS?:                   .rs 0x01 ;0xA067


	.org $A069
LIST_OBJ[6]!=0:                          .rs 0x01 ;0xA069


	.org $A06B
LIST_$6B_UNK:                            .rs 0x01 ;0xA06B


	.org $A06D
LIST_$6D_UNK:                            .rs 0x01 ;0xA06D


	.org $A073
A073_LOOP_CNT_HUMANOID/MISC?:            .rs 0x01 ;0xA073


	.org $A077
R_A077_S_TEMP?:                          .rs 0x01 ;0xA077


	.org $A079
PIA_ROM_DATA_A_RAM_COPY:                 .rs 0x01 ;0xA079

PIA_ROM_DATA_A_RAM_COPY_OLD:             .rs 0x01 ;0xA07A

WGT_DATA_A_RAM_COPY:                     .rs 0x01 ;0xA07B

WGT_DATA_A_RAM_COPY_OLD:                 .rs 0x01 ;0xA07C

WGT_DATA_B_RAM_COPY:                     .rs 0x01 ;0xA07D

7E_TIMER_SLAM?:                          .rs 0x01 ;0xA07E

7F_TIMER_UNK:                            .rs 0x01 ;0xA07F

80_TIMER_UNK:                            .rs 0x01 ;0xA080

81_TIMER_UNK:                            .rs 0x01 ;0xA081


	.org $A08B
A08B_CURRENT_PLAYER:                     .rs 0x01 ;0xA08B

A08C_CURRENT_PLAYER:                     .rs 0x01 ;0xA08C

A08D_CURRENT_PLAYER_PTR?:                .rs 0x02 ;0xA08D to A08E
IRQ_CMD_LOC:                             .rs 0x03 ;0xA08F to A091

	.org $A097
R_A097:                                  .rs 0x01 ;0xA097


	.org $A0A2
INVERTED_VIDEO_BITS?:                    .rs 0x01 ;0xA0A2


	.org $A0AB
R_A0AB:                                  .rs 0x01 ;0xA0AB


	.org $A0C5
PLAYER.VPOS:                             .rs 0x01 ;0xA0C5


	.org $A0CA
PLAYER_V_MOMENTUM:                       .rs 0x01 ;0xA0CA


	.org $A0DF
A0DF_RAND_BYTE:                          .rs 0x01 ;0xA0DF

A0E0_RAND_WORD:                          .rs 0x02 ;0xA0E0 to A0E1

	.org $A0ED
R_A0ED:                                  .rs 0x01 ;0xA0ED


	.org $A0EF
R_A0EF:                                  .rs 0x01 ;0xA0EF


	.org $A0FA
A0FA_HUMANOID_COUNT?:                    .rs 0x01 ;0xA0FA

R_A0FB_ENEMY_IDK_COUNT:                  .rs 0x01 ;0xA0FB


	.org $A0FE
R_A0FE_ENEMY_IDK_COUNT:                  .rs 0x01 ;0xA0FE


	.org $A100
R_A100:                                  .rs 0x01 ;0xA100

R_A101:                                  .rs 0x01 ;0xA101

R_A102:                                  .rs 0x01 ;0xA102

R_A103:                                  .rs 0x01 ;0xA103


	.org $A105
R_A105:                                  .rs 0x01 ;0xA105

R_A106:                                  .rs 0x01 ;0xA106

R_A107:                                  .rs 0x01 ;0xA107

R_A108:                                  .rs 0x01 ;0xA108


	.org $A10A
R_A10A:                                  .rs 0x01 ;0xA10A

R_A10B:                                  .rs 0x01 ;0xA10B

R_A10C:                                  .rs 0x01 ;0xA10C

R_A10D:                                  .rs 0x01 ;0xA10D

R_A10E:                                  .rs 0x01 ;0xA10E

R_A10F:                                  .rs 0x01 ;0xA10F

R_A110:                                  .rs 0x01 ;0xA110

R_A111:                                  .rs 0x01 ;0xA111

R_A112_ENEMY_IDK_COUNT:                  .rs 0x01 ;0xA112

R_A113_ENEMY_IDK_COUNT:                  .rs 0x01 ;0xA113

R_A114_ENEMY_IDK_COUNT:                  .rs 0x01 ;0xA114

R_A115_ENEMY_IDK_COUNT:                  .rs 0x01 ;0xA115

R_A116_ENEMY_IDK_COUNT:                  .rs 0x01 ;0xA116

R_A117:                                  .rs 0x01 ;0xA117

R_A118:                                  .rs 0x01 ;0xA118

R_A119:                                  .rs 0x01 ;0xA119


	.org $A162
R_A162:                                  .rs 0x01 ;0xA162

R_A163:                                  .rs 0x01 ;0xA163

R_A164:                                  .rs 0x01 ;0xA164

R_A165:                                  .rs 0x01 ;0xA165

R_A166:                                  .rs 0x01 ;0xA166

R_A167:                                  .rs 0x01 ;0xA167

R_A168:                                  .rs 0x01 ;0xA168


	.org $A16A
R_A16A:                                  .rs 0x01 ;0xA16A

R_A16B:                                  .rs 0x01 ;0xA16B


	.org $A16D
R_A16D:                                  .rs 0x01 ;0xA16D


	.org $A16F
R_A16F:                                  .rs 0x01 ;0xA16F


	.org $A171
R_A171:                                  .rs 0x01 ;0xA171


	.org $A173
R_A173:                                  .rs 0x01 ;0xA173


	.org $A175
R_A175:                                  .rs 0x01 ;0xA175

R_A176:                                  .rs 0x01 ;0xA176

R_A177:                                  .rs 0x01 ;0xA177

R_A178:                                  .rs 0x01 ;0xA178

R_A179:                                  .rs 0x01 ;0xA179

R_A17A:                                  .rs 0x01 ;0xA17A

R_A17B:                                  .rs 0x01 ;0xA17B


	.org $A17D
R_A17D:                                  .rs 0x01 ;0xA17D

R_A17E:                                  .rs 0x01 ;0xA17E

R_A17F:                                  .rs 0x01 ;0xA17F


	.org $A181
R_A181:                                  .rs 0x01 ;0xA181


	.org $A183
R_A183:                                  .rs 0x01 ;0xA183

R_A184:                                  .rs 0x01 ;0xA184

R_A185:                                  .rs 0x01 ;0xA185

R_A186:                                  .rs 0x01 ;0xA186

R_A187:                                  .rs 0x01 ;0xA187


	.org $A189
R_A189:                                  .rs 0x01 ;0xA189


	.org $A18B
R_A18B:                                  .rs 0x01 ;0xA18B


	.org $A18D
R_A18D:                                  .rs 0x01 ;0xA18D


	.org $A18F
R_A18F:                                  .rs 0x01 ;0xA18F

R_A190:                                  .rs 0x01 ;0xA190


	.org $A192
R_A192:                                  .rs 0x01 ;0xA192


	.org $A194
R_A194:                                  .rs 0x01 ;0xA194


	.org $A196
R_A196:                                  .rs 0x01 ;0xA196


	.org $A198
R_A198:                                  .rs 0x01 ;0xA198


	.org $A1C6
R_A1C6:                                  .rs 0x01 ;0xA1C6


	.org $A1C8
R_A1C8:                                  .rs 0x01 ;0xA1C8

R_A1C9_P1_SHIPS:                         .rs 0x01 ;0xA1C9


	.org $A1CB
R_A1CB_P1_SMARTBOMBS:                    .rs 0x01 ;0xA1CB


	.org $A206
R_A206_P2_SHIPS:                         .rs 0x01 ;0xA206


	.org $A208
R_A208_P2_SMARTBOMBS:                    .rs 0x01 ;0xA208


	.org $BDD0
R_BDD0:                                  .rs 0x01 ;0xBDD0



;Program ROM code

;Laid out as:
;	0xD000-0xFFFF
;	0xC000 Bank 1
;	0xC000 Bank 2
;	0xC000 Bank 3
;	0xC000 Bank 7

	.org $D000

    DECA
SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT: ; 0x000001, $D001
    LDU   R_A063_PTR_TO_OTHER_LIST ; Load U from
    STA   4,U ; OBJ[4], Countdown to handler.
    STX   2,U ; OBJ[2], Handler
    JMP   U=U.NEXT,HANDLE_COUNTER?
OBJ_X@A063_REMOVED_FROM_A05F+HANDLED: ; 0x00000A, $D00A
    LDX   R_A063_PTR_TO_OTHER_LIST ; X from here.
    BSR   LIST_SEARCH_OBJ@X_IN_$A05F_TO_OTHER_LIST ; Remove from $A05F
    LEAU  X ; Obj X is A05F->next.next
    JMP   U=U.NEXT,HANDLE_COUNTER? ; Goto U handle.
LIST_SEARCH_FOR_X_IN_OBJ[6]_AND_REMOVE_FROM_$A05F: ; 0x000013, $D013
    LDX   6,X ; X from OBJ[6]
LIST_SEARCH_OBJ@X_IN_$A05F_TO_OTHER_LIST: ; 0x000015, $D015
    PSHS  U,B,A ; Save what we clobber.
    LDU   #$A05F ; Load list start. Alive things?
OBJ@X_IN_LIST@U_TO_OTHER_LIST_LOOP: ; 0x00001A, $D01A
    CMPX  U ; If X _ U.Next
    BNE   U_TO_NEXT ; !=, goto. Order: U -> X -> U->next.next/X.next
    LDD   X ; D = X.next
    STD   U ; Move to U.next. X now removed from order
    LDA   6,X ; Get data in X.
    BEQ   OBJ_TO_OTHER_LIST ; If OBJ[6] = 0, put here.
    LDD   LIST_OBJ[6]!=0 ; D = List obj
    STX   LIST_OBJ[6]!=0 ; Replace OBJ with X
    BRA   X.NEXT_FROM_REPLACED ; goto
OBJ_TO_OTHER_LIST: ; 0x00002C, $D02C
    LDD   LIST_OBJ[6]=0 ; Load list obj
    STX   LIST_OBJ[6]=0 ; Replace OBJ with X
X.NEXT_FROM_REPLACED: ; 0x000030, $D030
    STD   X ; Replaced obj is new head's .next
    LEAX  U ; X is original U->next.next, continuing passed list.
    PULS  A,B,U,PC ; RTS
U_TO_NEXT: ; 0x000036, $D036
    LDU   U ; U=U.next, next list item.
    BNE   OBJ@X_IN_LIST@U_TO_OTHER_LIST_LOOP ; if U != NULL, test again.
SYSTEM_PANIC: ; 0x00003A, $D03A
    NOP ; If it never finds X to remove, runs this. Idk why nop.
    JMP   DEFENDER_GAME_TITLE? ; Assume crash?
LIST_REMOVE_AND_INIT+IDK: ; 0x00003E, $D03E
    PSHS  U,Y,A ; Save
    LDU   LIST_OBJ[6]!=0 ; Get head obj.
    BNE   U_!NULL ; If list has obj. Unintentional jump into inst?
    .db $BD ; JSR NOP+JMP
U_!NULL: ; 0x000045, $D045
    SUBB  $A03A ; SUBB $DP3A
    LDY   U ; Get Y from U.next
    STY   LIST_OBJ[6]!=0 ; New head, U is detatched from list.
    LDA   #$01
    STA   6,U ; OBJ[6] val
    LDA   S ; Get A from stack.
    BRA   OBJ@U_SETUP+ADD_TO_LIST_A063_POINTS_TO ; Goto
FROM_LIST_A061_TO_A063_POINTS_TO+SETUP: ; 0x000055, $D055
    PSHS  U,Y,A ; Save
    LDU   LIST_OBJ[6]=0 ; Load PTR
    BNE   PTR_NOT_NULL ; If valid, go here. Should have done BEQ PANIC instead.
    JSR   SYSTEM_PANIC ; Reboot.
PTR_NOT_NULL: ; 0x00005E, $D05E
    LDY   U ; Y = U.next
    STY   LIST_OBJ[6]=0 ; Store. U is now removed from this list.
    CLR   6,U ; Clear OBJ[6]
OBJ@U_SETUP+ADD_TO_LIST_A063_POINTS_TO: ; 0x000066, $D066
    STX   2,U ; X passed to OBJ[2], handler.
    STA   5,U ; A passed to OBJ[5], type?
    LDA   #$01
    STA   4,U ; To OBJ[4], how often to run. BELOW IS A CIRCULAR LIST INSERT.
    LDX   [R_A063_PTR_TO_OTHER_LIST] ; X = $A063->ROOT.next
    STU   [R_A063_PTR_TO_OTHER_LIST] ; Attach new $A063->LIST
    STX   U ; Link original list entry to new.
    LEAX  U ; X is now our new obj.
    PULS  A,Y,U,PC ; RTS
SORT_LIST_A05F_INTO_OTHER_LISTS_IF_OBJ[5]!=2: ; 0x00007C, $D07C
    PSHS  X,A ; Save
    LDX   #$A05F ; List start.
X_TO_X.NEXT: ; 0x000081, $D081
    LDX   X ; Get .next
    BEQ   RTS ; If NULL, leave.
    CMPX  R_A063_PTR_TO_OTHER_LIST ; CMP X to this ptr.
    BEQ   X_TO_X.NEXT ; If match, don't want to sort.
    LDA   5,X ; Load OBJ[5]
    CMPA  #$02 ; If OBJ[5] _ #$02
    BEQ   X_TO_X.NEXT ; ==, keep going.
    BSR   LIST_SEARCH_OBJ@X_IN_$A05F_TO_OTHER_LIST ; Idk why yet.
    BRA   X_TO_X.NEXT ; Always traverse again.
RTS: ; 0x000093, $D093
    PULS  A,X,PC ; RTS
FILL_OUT_NEW_OBJ_IN_X_WITH_DATA[6]_PAST_JSR: ; 0x000095, $D095
    BSR   LIST_REMOVE_$67_TO_X,X.next_FROM_$65 ; Get obj X
    PSHS  U,Y,B,A ; Save to sys
    STU   6,X ; U to OBJ[6]
    LDU   6,S ; Load X from passed S[0]
    PULU  A,B,Y ; Pull from loaded ptr
    STD   2,X ; to OBJ[2]
    STY   8,X ; To OBJ[8]
    PULU  A,B ; Pull from U
    STD   18,X ; Put to OBJ[18]
    STU   6,S ; Store next instruction.
    PULS  A,B,Y,U,PC ; RTS, restore. FMT:[2.W,8.W,18.W]
LIST_REMOVE_$67_TO_X,X.next_FROM_$65: ; 0x0000AD, $D0AD
    PSHS  U,B,A ; Save
    LDX   LIST_$67_UNUSED_OBJS? ; Get obj
    BNE   VALID_OBJ ; If valid, goto.
    JSR   SYSTEM_PANIC ; Reboot.
VALID_OBJ: ; 0x0000B6, $D0B6
    LDD   X ; Get X.next
    STD   LIST_$67_UNUSED_OBJS? ; Store to list. X now not in list.
    LDD   LIST_$65_UNK ; Get other list obj
    STD   X ; Store LIST_$65 to X.next
    CLRA ; CLRD
    CLRB
    STD   4,X ; OBJ[4] cleared
    STA   20,X ; OBJ[20] cleared
    PULS  A,B,U,PC ; RTS
REMOVE_X_FROM_LIST_A065|A06B: ; 0x0000C7, $D0C7
    PSHS  U,Y,X ; Save
    LDU   #$A065 ; Ptr
CMP_NEXT_LOOP_A065|A06B: ; 0x0000CC, $D0CC
    CMPX  U ; CMP X to U.next
    BNE   X_NOT_NEXT ; X not next
REMOVE_U.NEXT: ; 0x0000D0, $D0D0
    LDY   [U] ; Get Obj->Obj.next
    STY   U ; Store to U.next, removing X.
    LDY   LIST_$67_UNUSED_OBJS? ; Remember
    STX   LIST_$67_UNUSED_OBJS? ; store removed to loc
    STY   X ; Store remembered to new.
    PULS  X,Y,U,PC ; RTS
X_NOT_NEXT: ; 0x0000E0, $D0E0
    LDU   U ; U = U.next
    BNE   CMP_NEXT_LOOP_A065|A06B ; If valid, try.
    LDU   #$A06B ; Try other list.
CMP_NEXT_LOOP_GENERIC: ; 0x0000E7, $D0E7
    CMPX  U ; Is X _ U.next
    BEQ   REMOVE_U.NEXT ; If =, remove.
    LDU   U ; U = U.next
    BNE   CMP_NEXT_LOOP_GENERIC ; loop
    JSR   SYSTEM_PANIC ; Do this
REMOVE_X_FROM_LIST_A06D: ; 0x0000F2, $D0F2
    PSHS  U,Y,X ; Save
    LDU   #$A06D ; List ptr
    BRA   CMP_NEXT_LOOP_GENERIC ; Goto
    PSHS  X,DP ; Save...
    STS   R_A077_S_TEMP? ; Store stack
    BHS   DONT_Y+=2 ; Don't add 2 to Y
    LEAY  2,Y ; Y+=2
DONT_Y+=2: ; 0x000102, $D102
    LDS   2,Y ; Get S from Y+2
    ADDB  #$08 ; Add height
    TFR   D>U ; D is location?
    BRA   GFX_MOVE_4X8
    PSHS  X,DP ; Save
    ADDB  #$08 ; Height
    TFR   D>U ; Pos to U
    LDD   #$0000 ; Clear
    LDX   #$0000 ; Clear
    LEAY  X ; Clear Y
    TFR   A>DP ; Clear
    ANDCC #$00 ; Clear
    BRA   GFX_SET_4X8 ; Set to clear
    PSHS  X,DP ; Save
    ADDB  #$08 ; Add height
    TFR   D>U ; Pos to U
    LDD   #$0000 ; Clear
    LDX   #$0000 ; Clear
    LEAY  X ; Clear
    TFR   A>DP ; Clear
    ANDCC #$00 ; Clear
    PSHU  Y,X,DP,B,A,CC ; Clear, 10X8?
    LEAU  264,U ; POSX++
    BRA   GFX_SET_8X8 ; Do rest
    PSHS  X,DP ; Save
    STS   R_A077_S_TEMP? ; Save
    BHS   SKIP_Y+=2
    LEAY  2,Y ; Y+=2
SKIP_Y+=2: ; 0x000142, $D142
    LDS   2,Y ; Stack from Y+2
    ADDB  #$08 ; Height
    TFR   D>U ; Pos to U
GFX_MOVE_8X8: ; 0x000149, $D149
    PULS  CC,A,B,DP,X,Y
    PSHU  Y,X,DP,B,A,CC
    LEAU  264,U ; POSX++
    PULS  CC,A,B,DP,X,Y
    PSHU  Y,X,DP,B,A,CC
    LEAU  264,U ; POSX++
GFX_MOVE_4X8: ; 0x000159, $D159
    PULS  CC,A,B,DP,X,Y ; Pull 8 bytes. Stack goes up
    PSHU  Y,X,DP,B,A,CC ; Push 8 bytes. 8 vertical, 2 wide. Goes down, hence add >256.
    LEAU  264,U ; Next column, same pos.
    PULS  CC,A,B,DP,X,Y ; Pull 8 bytes.
    PSHU  Y,X,DP,B,A,CC ; Push 8 bytes.
    LDS   R_A077_S_TEMP? ; Get S
    PULS  DP,X,PC ; RTS
    PSHS  X,DP ; Save
    ADDB  #$08 ; Voff for stack move.
    TFR   D>U ; Screen pos to U
    LDD   #$0000 ; Clear pixels.
    LDX   #$0000
    LEAY  X ; Move X to Y
    TFR   A>DP ; Clear
    ANDCC #$00 ; Clear
GFX_SET_8X8: ; 0x00017D, $D17D
    PSHU  Y,X,DP,B,A,CC ; Push 8x2
    LEAU  264,U ; X++
    PSHU  Y,X,DP,B,A,CC ; Push 8X4
    LEAU  264,U ; X++
GFX_SET_4X8: ; 0x000189, $D189
    PSHU  Y,X,DP,B,A,CC
    LEAU  264,U ; X++
    PSHU  Y,X,DP,B,A,CC
    PULS  DP,X,PC ; RTS
    PSHS  X,DP ; Save
    STS   R_A077_S_TEMP? ; Save
    BHS   SKIP_Y+=2
    LEAY  2,Y ; Y+=2
SKIP_Y+=2: ; 0x00019C, $D19C
    LDS   2,Y ; Get stack from Y+2
    ADDB  #$08 ; Adjust Y pos.
    TFR   D>U ; Pos to U
    PULS  CC,A,B,DP,X,Y ; Pull 8 bytes.
    PSHU  Y,X,DP,B,A,CC ; Push to screen.
    LEAU  264,U ; POSX++
    BRA   GFX_MOVE_8X8 ; We're basically 9x8 lol.
    BHS   SKIP_Y+=2 ; This seems to be the space ship in the scanner?
    LEAY  2,Y ; Y+=2
SKIP_Y+=2: ; 0x0001B1, $D1B1
    LDY   2,Y ; Add 2...
    TFR   D>U ; Screen pos to U?
    LDD   Y ; D from Y
    STD   U ; D to SCR
    LDD   2,Y ; D to SCRY+2
    STD   2,U
    LDD   4,Y ; D to SCY+4
    STD   256,U ; SCRX+1
    LDD   6,Y
    STD   258,U ; SCRX+1,SCRY+2
    LDD   8,Y
    STD   512,U ; SCRX+2
    LDD   10,Y
    STD   514,U ; SCRX+2,SCRY+2
    RTS ; RTS
    TFR   D>U ; POS to U
    LDD   #$0000 ; Clear
    STD   U ; SCR
    STD   2,U ; SRCY+2
    STD   256,U ; SCRX+1
    STD   258,U ; SCRX+1,SCRY+2
    STD   512,U ; SCRX+2
    STD   514,U ; SCRX+2,SCRY+2
    RTS ; RTS
    BHS   SKIP_Y+=2 ; Other scanner things?
    LEAY  2,Y ; Y+=2
SKIP_Y+=2: ; 0x0001F5, $D1F5
    LDY   2,Y ; Y+=2
    TFR   D>U ; Screen pos?
    LDD   Y ; Get graphics
    STD   U ; Store to screen
    LDD   2,Y
    STA   2,U ; SCRY+2
    STB   256,U ; SCRX+1
    LDD   4,Y
    STD   257,U ; SCRX+1,Y+2
    RTS ; Leave
    TFR   D>U ; Screen pos?
    LDD   #$0000 ; Clear
    STD   U ; Store SCR
    STA   2,U ; SCRY+2
    STD   256,U ; SCRX+1
    STA   258,U ; SCRX+1,SCRY+2.
    RTS ; RTS
    PSHS  U,X,B,A ; Save
    STS   R_A077_S_TEMP? ; Save
    BHS   SKIP_Y+=2 ; Do
    LEAY  2,Y ; Y+=2
SKIP_Y+=2: ; 0x000228, $D228
    LDS   2,Y ; S=Y+2
    ADDB  #$04 ; Correct height.
    TFR   D>U ; Screen pos.
    PULS  A,B,X ; Get graphics.
    PSHU  X,B,A ; Push
    LEAU  260,U ; X++
    PULS  A,B,X ; Get graphics.
    PSHU  X,B,A ; Push
    LEAU  260,U ; X++
    PULS  A,B,X ; Get
    PSHU  X,B,A ; Push
    LEAU  260,U ; X++
    PULS  A,B,X ; Get
    PSHU  X,B,A ; Push
    LEAU  260,U ; X++
    PULS  A,B,X ; Get
    PSHU  X,B,A ; Push
    LEAU  260,U ; X++
    PULS  A,B,X ; Get
    PSHU  X,B,A ; Push
    LDS   R_A077_S_TEMP? ; Load stack
    PULS  A,B,X,U,PC ; RTS
    PSHS  U,X,B,A ; Save
    ADDB  #$04 ; Correct pos.
    TFR   D>U ; Pos
    LDD   #$0000 ; Clear
    LDX   #$0000 ; Clear
    PSHU  X,B,A ; 4 bytes.
    LEAU  260,U ; X++
    PSHU  X,B,A ; 4 bytes.
    LEAU  260,U ; X++
    PSHU  X,B,A ; 4 bytes
    LEAU  260,U ; X++
    PSHU  X,B,A ; 4 bytes
    LEAU  260,U ; X++
    PSHU  X,B,A ; 4 bytes
    LEAU  260,U ; X++
    PSHU  X,B,A ; 4 bytes.
    PULS  A,B,X,U,PC ; RTS
GFX_16X6_MOVE+ADJUST: ; 0x00028E, $D28E
    PSHS  X ; Save
    STS   R_A077_S_TEMP? ; Save
    BHS   SKIP_Y+=2
    LEAY  2,Y ; Y+=2
SKIP_Y+=2: ; 0x000297, $D297
    LDS   2,Y ; Get S from Y+2
    ADDB  #$06 ; Height
    TFR   D>U ; To SCR
    PULS  A,B,X,Y ; Get
    PSHU  Y,X,B,A ; Put 8
    LEAU  262,U ; X+1
    PULS  A,B,X,Y ; Get
    PSHU  Y,X,B,A ; Put
    LEAU  262,U ; X+1
GFX_12X6_MOVE: ; 0x0002AE, $D2AE
    PULS  A,B,X,Y ; Get 6w
    PSHU  Y,X,B,A ; Put 6
    LEAU  262,U ; X+1
GFX_10X6_MOVE: ; 0x0002B6, $D2B6
    PULS  A,B,X,Y ; Get
    PSHU  Y,X,B,A ; Put 5
    LEAU  262,U ; X+1
    PULS  A,B,X,Y ; Get
    PSHU  Y,X,B,A ; Put
    LEAU  262,U ; X+1
    PULS  A,B,X,Y ; Get
    PSHU  Y,X,B,A ; Put
    LEAU  262,U ; X+1
    PULS  A,B,X,Y ; Get
    PSHU  Y,X,B,A ; Put
    LEAU  262,U ; X+1
    PULS  A,B,X,Y ; Get
    PSHU  Y,X,B,A ; Put
    LDS   R_A077_S_TEMP? ; Restore
    PULS  X,PC ; RTS
GFX_CLEAR_16X6: ; 0x0002DF, $D2DF
    PSHS  X ; Save
    ADDB  #$06 ; Height
    TFR   D>U ; Pos
    LDD   #$0000 ; Clear
    LDX   #$0000 ; Clear
    LEAY  X ; Clear
    PSHU  Y,X,B,A ; Clear 8w
    LEAU  262,U ; X+1
    PSHU  Y,X,B,A ; Clear
    LEAU  262,U ; X+1
GFX_CLR_12X6: ; 0x0002F9, $D2F9
    PSHU  Y,X,B,A ; Clear
    LEAU  262,U ; X+1
GFX_CLR_10X6: ; 0x0002FF, $D2FF
    PSHU  Y,X,B,A ; Clear
    LEAU  262,U ; X+1
    PSHU  Y,X,B,A
    LEAU  262,U
    PSHU  Y,X,B,A
    LEAU  262,U
    PSHU  Y,X,B,A
    LEAU  262,U
    PSHU  Y,X,B,A
    PULS  X,PC ; RTS
    PSHS  X ; Save
    STS   R_A077_S_TEMP? ; Save
    BHS   SKIP Y+=2
    LEAY  2,Y ; Y+=2
SKIP Y+=2: ; 0x000324, $D324
    LDS   2,Y ; S+=2
    ADDB  #$06 ; Add height
    TFR   D>U ; Pos
    BRA   GFX_10X6_MOVE ; Move
    PSHS  X ; Save
    ADDB  #$06 ; Height
    TFR   D>U ; Pos
    LDD   #$0000 ; Clear
    LDX   #$0000
    LEAY  X ; Clear
    BRA   GFX_CLR_10X6 ; Do
    PSHS  X ; Save
    STS   R_A077_S_TEMP? ; Save
    BHS   SKIP_Y+=2 ; Skip
    LEAY  2,Y ; Y+=2
SKIP_Y+=2: ; 0x000346, $D346
    LDS   2,Y ; S = Y+2
    ADDB  #$06 ; Height
    TFR   D>U ; POS
    JMP   GFX_12X6_MOVE ; Move
GFX_CLEAR_12X6: ; 0x000350, $D350
    PSHS  X ; Save
    ADDB  #$06 ; Adj height
    TFR   D>U ; To POS
    LDD   #$0000 ; Clear
    LDX   #$0000 ; Clear
    LEAY  X ; Clear
    BRA   GFX_CLR_12X6 ; Do.
SCORE_ADD_AB: ; 0x000360, $D360
    PSHS  U,Y,X,B,A ; Save
    ORCC  #$01 ; Set CC.c
    ROL   $A08A ; Bring in 1.
    LSRA ; If 1 if shifted off, multiplies value passed by 10
    PSHS  A ; Save
    LDA   #$00 ; Clear if next not taken.
    BHS   SKIP_B(F0)_TO_A(0F) ; If A was odd, take.
    ASLB ; High B...
    ROLA ; to A
    ASLB
    ROLA
    ASLB
    ROLA
    ASLB
    ROLA ; 4x
SKIP_B(F0)_TO_A(0F): ; 0x000375, $D375
    JSR   GET_PLAYER_PTR_IN_X_FROM_A08B ; Player 1 or 2?
    STD   A073_LOOP_CNT_HUMANOID/MISC? ; Store D to loc.
    LDB   #$03 ; Load B
    SUBB  S+ ; Sub B from on stack, clean up stack too?
    LDA   B,X ; Get A from X+B
    ADDA  $A074 ; Add with B stored above.
    DAA ; Dec adjust.
    STA   B,X ; Store back.
    DECB ; B-=1
    BMI   B_NOW_NEGATIVE ; If negative.
LOOP_STILL_POSITIVE: ; 0x000388, $D388
    LDA   B,X ; Get data.
    ADCA  A073_LOOP_CNT_HUMANOID/MISC? ; Add with carry now.
    DAA ; Adjust
    STA   B,X ; Store back.
    LDA   #$00
    STA   A073_LOOP_CNT_HUMANOID/MISC? ; Clear
    DECB ; Minus another
    BPL   LOOP_STILL_POSITIVE ; If still not negative, loop.
B_NOW_NEGATIVE: ; 0x000396, $D396
    LDD   R_A0AB ; Get D
    BEQ   D_IS_ZERO ; D is 0.
    LEAX  1,X ; X+1
    LEAY  3,X ; Y = X+3
    BSR   IF_X[0].W!=Y[0].W_CMP_X+2_Y+2
    BLO   D_IS_ZERO ; If OBJX state is lower than OBJY?
    LDA   1,Y ; Get val
    ADDA  $A0AC ; Add with val
    DAA ; Adjust
    STA   1,Y ; Store back
    LDA   Y ; Get val
    ADCA  R_A0AB ; Add with carry
    DAA ; Adjust
    STA   Y ; Store back
    INC   6,X ; Inc ships.
    INC   8,X ; Inc smartbombs.
    JSR   DISP_SHIPS_ALL_PLAYERS
    JSR   SMARTBOMBS_TO_SCREEN
    LDD   #$D4B0 ; Idk why
    JSR   SET_A0B0-A0B3_WHEN_@D>A0B2
    LDB   #$05 ; Score keep entry.
    JSR   GOTO_B3-C00F_BOOKKEEP_UPDATE_+1 ; Track
D_IS_ZERO: ; 0x0003C5, $D3C5
    BSR   SCORE_TO_SCREEN
    PULS  A,B,X,Y,U ; Why not also pull PC???
    RTS ; Ugh
IF_X[0].W!=Y[0].W_CMP_X+2_Y+2: ; 0x0003CA, $D3CA
    PSHS  B,A ; Save
    LDD   X ; Load D from X
    CMPD  Y ; Compare to Y
    BNE   RTS ; RTS, figured.
    LDA   2,X ; Compare score digits 2 instead.
    CMPA  2,Y ; Compare
RTS: ; 0x0003D7, $D3D7
    PULS  A,B,PC ; RTS, Code handles next branch.
SCORE_TO_SCREEN: ; 0x0003D9, $D3D9
    LDA   A08B_CURRENT_PLAYER ; Load val
PLAYER_SCORE_TO_SCREEN: ; 0x0003DB, $D3DB
    PSHS  A ; Use passed value.
    DECA ; Dec val
    BNE   PLAYER_TWO_HANDLER ; Do player 2.
    LDX   #$0F1C ; Pos
    LDU   #$A1C3 ; Data ptr
    BRA   USE_REGS ; Use these.
PLAYER_TWO_HANDLER: ; 0x0003E8, $D3E8
    LDX   #$711C ; Pos
    LDU   #$A200 ; Data ptr
USE_REGS: ; 0x0003EE, $D3EE
    CLR   A073_LOOP_CNT_HUMANOID/MISC? ; Clear displayed flag.
    LDB   #$06 ; Digit count?
    LDA   CURRENT_BANK ; Save bank.
    PSHS  A ; To stack
    LDA   #$02 ; Switch to bank.
    STA   CURRENT_BANK ; Commit
    STA   BANKSWITCH
LOOP_MORE_DIGITS: ; 0x0003FD, $D3FD
    LDA   U+ ; Get A from U.
    LDY   PALETTE_ENTRY_0x0 ; Get Y val from here, 0xC5something
    BITB  #$01 ; Test if we're high/low nibble.
    BNE   USING_LOW_NIBBLE ; Odd doesn't need shifted, skip code below.
    LEAU  -1,U ; Reset
    LSRA ; Shift high nibble low.
    LSRA
    LSRA
    LSRA
USING_LOW_NIBBLE: ; 0x00040D, $D40D
    ANDA  #$0F ; Isolate. This code basically enables zeros after a valid digit.
    BNE   CHR_TO_SCREEN ; If != 0
    CMPB  #$02 ; If B _ 2
    BLS   CHR_TO_SCREEN ; <=, go. Always show 2 chars.
    TST   A073_LOOP_CNT_HUMANOID/MISC? ; Test if went before.
    BNE   CHR_TO_SCREEN ; If did, go again.
    EXG   X-D ; Location to D?
    JSR   GFX_BANK2_CHR_CLEAR ; Clear char.
    BRA   SCORE_CHR_POST ; Done, post put rtn.
CHR_TO_SCREEN: ; 0x000420, $D420
    INC   A073_LOOP_CNT_HUMANOID/MISC? ; Since taken, always do.
    ASLA ; *2
    ASLA ; *4, because target fmt is [B,B,W]
    LEAY  A,Y ; Add A to Y
    EXG   X-D ; Loc to D.
    JSR   GFX_BANK2_CHR_TO_SCREEN ; Score digit.
SCORE_CHR_POST: ; 0x00042B, $D42B
    EXG   X-D ; Put loc back to X. Should have ADDA #$04 here instead.
    LEAX  1024,X ; X+=4
    DECB ; Dec digits left.
    BNE   LOOP_MORE_DIGITS ; Do more.
    PULS  A ; Pull bank.
    STA   CURRENT_BANK ; Restore.
    STA   BANKSWITCH
    PULS  A,PC ; RTS
    LDA   $A0BA ; Load
    BPL   REMOVE_X_FROM_LIST ; If positive, goto.
    JSR   BANKSWITCH_TO_3 ; Switch to bank 3..
    JSR   JMP_TO_HIGHSCORES_TO_RAM ; High scores to RAM.
    INC   R_A162 ; Inc
    BRA   REMOVE_X_FROM_LIST ; goto.
    LDA   $A0BA ; Load
    BPL   REMOVE_X_FROM_LIST ; If positive, goto.
    ORCC  #$90 ; Set entire, mask IRQ.
    CLR   BANKSWITCH ; IO bank.
    LDA   #$04 ; REG:IO
    STA   PIA_ROM_CTRL_B ; Store to CTRL.
    LDA   PIA_ROM_DATA_B ; Get. Idk why
    JSR   BANKSWITCH_TO_3 ; Goto bank 3, menu routines.
    LDA   PIA_ROM_DATA_A_RAM_COPY ; Get
    LSRA ; Shift.
    BLO   GOTO_SETTINGS_MENU? ; If shifted off 1,do this instead.
    JMP   JMP_FAILED_W/_AUTO_NOT_PRESSED ; Goto.
GOTO_SETTINGS_MENU?: ; 0x000468, $D468
    JMP   JMP_SETTINGS_MENU? ; Goto.
REMOVE_X_FROM_LIST: ; 0x00046B, $D46B
    JMP   OBJ_X@A063_REMOVED_FROM_A05F+HANDLED ; Still need to figure out list stuff.
    LDX   #$A07F ; Ptr
    LDB   #$12 ; Val
    BRA   USE_XB_PROVIDED
    LDX   #$A080 ; PTR
    LDB   #$15 ; Val
    BRA   USE_XB_PROVIDED
    LDX   #$A081 ; Ptr
    LDB   #$18 ; Val
USE_XB_PROVIDED: ; 0x000481, $D481
    LDA   7E_TIMER_SLAM? ; Get val
    BNE   REMOVE_X_FROM_LIST ; If != 0, goto.
    LDA   X ; Get val from ptr.
    BNE   REMOVE_X_FROM_LIST ; If != 0, goto.
    LDA   #$16 ; Idk val.
    STA   X ; Store to ptr.
    LDA   #$C0 ; Val
    STD   9,U ; Store to OBJ[9], ptr.
    LDA   #$0A ; Val
    LDX   #$D499 ; Ptr to unk handler.
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT ; Mod obj and unk
    LDA   7E_TIMER_SLAM? ; Load val.
    BNE   REMOVE_X_FROM_LIST ; If != 0, goto.
    LDD   #$D4AB ; PTR to data table below.
    JSR   SET_A0B0-A0B3_WHEN_@D>A0B2 ; Works with data table and other vars.
    JSR   BANKSWITCH_TO_3 ; Switch to.
    JSR   [9,U] ; JSR to handler pointer.
    BRA   REMOVE_X_FROM_LIST ; Loop.
A0B2_DATA?: ; 0x0004AB, $D4AB
    .db $FF
    .db $01
    .db $18
    .db $19
    .db $00
    .db $FF
    .db $01
    .db $20
    .db $1E
    .db $00
    .db $F0
    .db $02
    .db $08
    .db $11
    .db $01
    .db $20
    .db $17
    .db $00
    .db $F0
    .db $01
    .db $40
    .db $0A
    .db $00
    .db $F0
    .db $01
    .db $10
    .db $0B
    .db $00
    .db $E8
    .db $01
    .db $04
    .db $14
    .db $02
    .db $06
    .db $11
    .db $02
    .db $0A
    .db $17
    .db $00
    .db $E8
    .db $06
    .db $04
    .db $11
    .db $01
    .db $10
    .db $17
    .db $00
    .db $E0
    .db $03
    .db $0A
    .db $08
    .db $00
    .db $E0
    .db $01
    .db $18
    .db $1F
    .db $00
    .db $E0
    .db $01
    .db $18
    .db $11
    .db $00
    .db $D8
    .db $01
    .db $10
    .db $1A
    .db $00
    .db $D0
    .db $01
    .db $30
    .db $15
    .db $00
    .db $D0
    .db $01
    .db $10
    .db $05
    .db $00
    .db $D0
    .db $01
    .db $08
    .db $17
    .db $00
    .db $D0
    .db $01
    .db $08
    .db $07
    .db $00
    .db $D0
    .db $01
    .db $0A
    .db $01
    .db $00
    .db $D0
    .db $01
    .db $0A
    .db $06
    .db $00
    .db $D0
    .db $01
    .db $10
    .db $0B
    .db $00
    .db $C8
    .db $0A
    .db $01
    .db $0E
    .db $00
    .db $C0
    .db $01
    .db $08
    .db $07
    .db $00
    .db $C0
    .db $01
    .db $30
    .db $14
    .db $00
    .db $C0
    .db $01
    .db $20
    .db $18
    .db $00
    .db $C0
    .db $01
    .db $08
    .db $03
    .db $00
    .db $C0
    .db $01
    .db $30
    .db $09
    .db $00
    .db $C0
    .db $01
    .db $08
    .db $03
    .db $00
    .db $C0
    .db $01
    .db $18
    .db $0C
    .db $00
WRITE_ROM_PIA_DATA_REGS_W/_#$3F_AND_B: ; 0x000539, $D539
    PSHS  B,A,CC ; Save. This rtn does sounds maybe?
    ORCC  #$FF ; Mask IRQ's
    CLR   BANKSWITCH ; IO bank.
    LDA   #$3F ; Write val
    STA   PIA_ROM_DATA_B ; Store to...
    COMB ; Invert B
    ANDB  #$3F ; LED's to 0's, other doesn't care
    STB   PIA_ROM_DATA_B ; Store to data reg.
    PULS  CC,A,B,PC ; RTS
SET_A0B0-A0B3_WHEN_@D>A0B2: ; 0x00054D, $D54D
    PSHS  X,B,A,CC ; Save
    CLR   $A0AD ; Clear loc.
    TFR   D>X ; X=D
    LDA   X ; Get A from X
    CMPA  $A0B2 ; If A _ $A0B2
    BLO   RTS ; <, RTS'S
    STA   $A0B2 ; If higher, store.
    LEAX  -2,X ; Sub 2 from D
    ORCC  #$10 ; Mask IRQ
    STX   $A0B0 ; Store X to.
    LDD   #$0101
    STD   $A0B3 ; Set these?
RTS: ; 0x000566, $D566
    PULS  CC,A,B,X,PC ; RTS
IDK+THRUST+MORE: ; 0x000568, $D568
    LDA   $A0B3 ; Load timer
    BEQ   SOMETHING_TO_DO_WITH_THRUST ; if 0 skip
    DEC   $A0B3 ; Dec if not 0
    BNE   TEST_IRQ_PIA_ROM_A2 ; Goto if not done.
    LDX   $A0B0 ; Load 
    DEC   $A0B4 ; Dec
    BNE   D_FROM_X+1 ; If not 0, do this. Sets timer it seems.
    LEAX  3,X ; X+=3
    STX   $A0B0 ; Store X back
    LDA   X ; Load A from X ptr
    BNE   STORE_A_TO_$B4 ; If != 0, goto.
    STA   $A0B2 ; Store to otherwise.
SOMETHING_TO_DO_WITH_THRUST: ; 0x000580, $D580
    LDA   WGT_DATA_A_RAM_COPY ; Get inputs on wigit A
    BITA  #$02 ; Test thrust pressed
    BNE   THRUST_NOT_PRESSED ; Thrust not pressed, goto.
    LDA   $A0AD ; Load
    BEQ   TEST_IRQ_PIA_ROM_A2 ; If 0, goto.
    CLR   $A0AD ; Clear otherwise.
    LDB   #$0F ; Load B
    BRA   WRITE_ROM_PIA_WITH_B_RTN ; Always goto.
THRUST_NOT_PRESSED: ; 0x000590, $D590
    LDA   $A0AD ; Load val
    BNE   TEST_IRQ_PIA_ROM_A2 ; If != 0, goto
    LDA   $A0BA ; Load val
    BITA  #$98 ; Test IDK
    BNE   TEST_IRQ_PIA_ROM_A2 ; If none set, goto
    LDB   #$16 ; Load B
    STB   $A0AD ; Store to
    BRA   WRITE_ROM_PIA_WITH_B_RTN ; Goto
STORE_A_TO_$B4: ; 0x0005A0, $D5A0
    STA   $A0B4 ; Store A
D_FROM_X+1: ; 0x0005A2, $D5A2
    LDD   1,X ; Get data from X+1
    STA   $A0B3 ; Store A loaded here
WRITE_ROM_PIA_WITH_B_RTN: ; 0x0005A6, $D5A6
    BSR   WRITE_ROM_PIA_DATA_REGS_W/_#$3F_AND_B ; Write it
TEST_IRQ_PIA_ROM_A2: ; 0x0005A8, $D5A8
    LDA   PIA_ROM_CTRL_A ; Get CTRL
    BITA  #$40 ; Test C2, SLAM switch
    BEQ   C2_CLEAR ; If not set, don't seed.
    LDA   #$3C ; Not clear, seed.
    STA   7E_TIMER_SLAM? ; Store
C2_CLEAR: ; 0x0005B3, $D5B3
    LDA   7E_TIMER_SLAM? ; Get value
    BEQ   7E_ZERO ; If 0, goto
    DEC   7E_TIMER_SLAM? ; Dec otherwise
7E_ZERO: ; 0x0005B9, $D5B9
    LDA   7F_TIMER_UNK ; Load
    BEQ   7F_ZERO ; If 0, goto
    DEC   7F_TIMER_UNK ; Dec otherwise.
7F_ZERO: ; 0x0005BF, $D5BF
    LDA   81_TIMER_UNK ; Load
    BEQ   81_ZERO ; If 0, goto
    DEC   81_TIMER_UNK ; Dec otherwise
81_ZERO: ; 0x0005C5, $D5C5
    LDA   80_TIMER_UNK ; Load
    BEQ   80_ZERO ; If 0, goto
    DEC   80_TIMER_UNK ; Dec otherwise
80_ZERO: ; 0x0005CB, $D5CB
    LDA   WGT_DATA_A_RAM_COPY ; Get copy
    ORA   WGT_DATA_A_RAM_COPY_OLD ; OR with old.
    COMA ; Invert.
    LDB   WGT_DATA_A_RAM_COPY ; Move
    STB   WGT_DATA_A_RAM_COPY_OLD ; to old
    LDB   PIA_WGT_DATA_A ; Move
    STB   WGT_DATA_A_RAM_COPY
    LDB   PIA_WGT_DATA_B ; Move
    STB   WGT_DATA_B_RAM_COPY
    ANDA  WGT_DATA_A_RAM_COPY ; AND with new, gets newly pressed.
    BEQ   CHECK_COINDOOR_INPUT ; No new
    LDU   #$F882 ; Change U...
FILL_IN_$82-$88: ; 0x0005E5, $D5E5
    CLRB ; Clear
LOOP_ADD_4: ; 0x0005E6, $D5E6
    ADDB  #$04 ; Add B
    LSRA ; Shift to carry
    BHS   LOOP_ADD_4 ; If C = 0, loop.
    LEAU  B,U ; U += B
    PULU  A,B,X ; Fill in A,B,X from U
    LDU   $A082 ; Load U from addr
    BNE   U_IS_VALID ; If U != 0
    STD   $A082 ; Ret this on null.
    STX   $A084
    RTS ; Rts
U_IS_VALID: ; 0x0005F8, $D5F8
    STD   $A086 ; Ret this otherwise.
    STX   $A088
    RTS ; Rts
CHECK_COINDOOR_INPUT: ; 0x0005FD, $D5FD
    LDA   PIA_ROM_DATA_A_RAM_COPY ; Load A with all pressed last 2 reads.
    ORA   PIA_ROM_DATA_A_RAM_COPY_OLD
    COMA ; Invert, 1's are newly pressed now.
    LDB   PIA_ROM_DATA_A_RAM_COPY ; Move last to old
    STB   PIA_ROM_DATA_A_RAM_COPY_OLD
    LDB   PIA_ROM_DATA_A ; Get current buttons.
    ANDB  #$3F ; Get only the buttons.
    STB   PIA_ROM_DATA_A_RAM_COPY ; Update this
    BITA  PIA_ROM_DATA_A_RAM_COPY ; Test if any are newly pressed that we need to catch.
    BEQ   RTS ; If no matches on newly pressed.
    LDX   #$0078 ; Time to wait.
WAIT_FOR_X_TO_0: ; 0x000614, $D614
    LEAX  -1,X ; X--
    BNE   WAIT_FOR_X_TO_0 ; Loop
    LDB   PIA_ROM_DATA_A ; Get buttons again.
    ANDB  PIA_ROM_DATA_A_RAM_COPY ; Get bits pressed both times.
    STB   PIA_ROM_DATA_A_RAM_COPY ; Replace
    ANDA  PIA_ROM_DATA_A_RAM_COPY ; See if any buttons newly pressed.
    BEQ   RTS ; No, RTS
    LDU   #$F8A2 ; PTR to data
    BSR   FILL_IN_$82-$88
RTS: ; 0x000628, $D628
    RTS
DISP_SHIPS_ALL_PLAYERS: ; 0x000629, $D629
    PSHS  U,Y,X,B,A ; Save
    LDX   #$0F14 ; Scr pos, X:30,Y14
    LDA   R_A1C9_P1_SHIPS ; Load ship count?
    BSR   DISPLAY_SHIPS ; Disp
    LDA   A08C_CURRENT_PLAYER
    DECA ; See if 1
    BEQ   RTS_SHIPS ; Was 1, leave.
    LDX   #$7114
    LDA   R_A206_P2_SHIPS
    BSR   DISPLAY_SHIPS ; Disp
RTS_SHIPS: ; 0x000640, $D640
    PULS  A,B,X,Y,U,PC ; RTS
DISPLAY_SHIPS: ; 0x000642, $D642
    CMPA  #$05 ; If A _ 5
    BLS   DONT_CAP_COUNT ; <= 5, taken.
    LDA   #$05 ; Cap at 5 ships
DONT_CAP_COUNT: ; 0x000648, $D648
    PSHS  A ; Save val
    LDD   #$2006 ; WWHH, Clear rectangle.
    JSR   CLEAR_SCREEN_FLEX_SETUP ; Clear it.
    LDA   S ; Get count.
    BEQ   RTS ; Leave if no ships to put on.
    LDY   #$F9D5 ; PTR to CHR
    TFR   X>D ; Position to proper reg.
LOOP_DISPLAY_SHIPS: ; 0x00065A, $D65A
    JSR   GFX_BANK2_CHR_TO_SCREEN
    ADDA  #$06 ; Add X off.
    DEC   S ; One less.
    BNE   LOOP_DISPLAY_SHIPS ; Display loop.
RTS: ; 0x000663, $D663
    PULS  A,PC ; RTS
DISPLAY_SETUP_INGAME: ; 0x000665, $D665
    PSHS  U,Y,X,B,A
    LDD   #$4020 ; POS
    LDX   #$3008 ; XXYY
    JSR   CLEAR_SCREEN_FLEX_SETUP ; Clear area.
    BSR   SCANNER_TO_SCREEN ; Put scanner to screen.
    BSR   DISP_SHIPS_ALL_PLAYERS ; Ships.
    BSR   SMARTBOMBS_TO_SCREEN ; Smartbombs.
    LDA   A08C_CURRENT_PLAYER ; Load which player?
SCORE_LOOP: ; 0x000678, $D678
    JSR   PLAYER_SCORE_TO_SCREEN ; Put that player to screen.
    DECA
    BNE   SCORE_LOOP ; Loop again.
    PULS  A,B,X,Y,U,PC ; RTS
SMARTBOMBS_TO_SCREEN: ; 0x000680, $D680
    PSHS  U,Y,X,B,A
    LDX   #$291B ; Pos P1
    LDA   R_A1CB_P1_SMARTBOMBS ; Get count.
    BSR   DISPLAY_SMARTBOMBS_SUB
    LDA   A08C_CURRENT_PLAYER ; Player count
    DECA ; DEC
    BEQ   RTS_SMARTBOMBS ; Is only 1 player, leave.
    LDX   #$8B1B ; Pos P2
    LDA   R_A208_P2_SMARTBOMBS ; Count
    BSR   DISPLAY_SMARTBOMBS_SUB
RTS_SMARTBOMBS: ; 0x000697, $D697
    PULS  A,B,X,Y,U,PC
DISPLAY_SMARTBOMBS_SUB: ; 0x000699, $D699
    CMPA  #$03 ; If A _ 3
    BLS   DONT_CAP_SMARTBOMBS ; <=, skip cap.
    LDA   #$03 ; Cap
DONT_CAP_SMARTBOMBS: ; 0x00069F, $D69F
    PSHS  A ; Save count.
    LDD   #$030B ; Clear WWHH
    JSR   CLEAR_SCREEN_FLEX_SETUP ; Clear
    LDA   S ; Load count
    BEQ   ALL_SMARTBOMBS_DISPLAYED
    LDY   #$F9D9 ; PTR to BMP for Smartbombs.
    TFR   X>D ; Pos X to correct reg for sub.
LOOP_MORE_SMARTBOMBS: ; 0x0006B1, $D6B1
    JSR   GFX_BANK2_CHR_TO_SCREEN ; Display
    ADDB  #$04 ; Add Y pos.
    DEC   S ; Dec count.
    BNE   LOOP_MORE_SMARTBOMBS
ALL_SMARTBOMBS_DISPLAYED: ; 0x0006BA, $D6BA
    PULS  A,PC
SCANNER_TO_SCREEN: ; 0x0006BC, $D6BC
    LDD   #$5555 ; Load color
    LDX   #$0028 ; XXYY pos.
LOOP_SCANNER_ENTIRE_SCREEN_H: ; 0x0006C2, $D6C2
    STD   X ; Store 2x2
    LEAX  256,X ; X++
    CMPX  #$9C00 ; Compare to end of screen.
    BLO   LOOP_SCANNER_ENTIRE_SCREEN_H
    LDX   #$2F08 ; XXYY
LOOP_V_SECTION: ; 0x0006D0, $D6D0
    STD   16640,X ; POSX+130
    STD   X++ ; POS
    CMPX  #$2F28 ; End V
    BNE   LOOP_V_SECTION
    LDX   #$2F07 ; Pos small H.
H_PART_SMALL: ; 0x0006DE, $D6DE
    STA   X ; Put byte.
    LEAX  256,X ; X+1
    CMPX  #$7107 ; End pos
    BNE   H_PART_SMALL ; Not done loop.
    LDX   #$4C07 ; XXYY pos.
    LDD   #$9999 ; White?
LOOP_WHITE_PART: ; 0x0006EF, $D6EF
    STD   X ; Store top
    STD   33,X ; Bottom
    LEAX  256,X ; X+1
    CMPX  #$5407 ; End X
    BNE   LOOP_WHITE_PART ; Not done, loop.
    RTS
GET_PLAYER_PTR_IN_X_FROM_A08B: ; 0x0006FE, $D6FE
    PSHS  A ; Save A
    LDA   A08B_CURRENT_PLAYER ; Get A
DECIDE_X_A1C2|A1FF_SUB: ; 0x000702, $D702
    LDX   #$A1C2 ; Load X
    DECA ; Dec A
    BEQ   RTS_PULA
    LDX   #$A1FF ; Change X if not 0.
RTS_PULA: ; 0x00070B, $D70B
    PULS  A,PC ; RTS
DECIDE_PLAYER_PTR_FROM_A: ; 0x00070D, $D70D
    PSHS  A
    BRA   DECIDE_X_A1C2|A1FF_SUB
RANDOM_VALUE_FWD+IN_A: ; 0x000711, $D711
    PSHS  B ; Save B
    LDB   A0DF_RAND_BYTE ; Get val.
    LDA   #$03 ; Load A
    MUL ; Multiple B*3
    ADDB  #$11 ; Add with #$11
    LDA   A0E0_RAND_WORD+1 ; Load val
    LSRA ; >>1
    LSRA ; >>2
    LSRA ; >>3
    EORA  A0E0_RAND_WORD+1 ; EOR with original...
    LSRA ; >>1
    ROR   A0E0_RAND_WORD ; Rotate loc...
    ROR   A0E0_RAND_WORD+1 ; Rotate loc...
    ADDB  A0E0_RAND_WORD+1 ; Add B with 
    ADCB  A0E0_RAND_WORD ; Add B with carry.
    STB   A0DF_RAND_BYTE ; Store to.
    LDA   A0DF_RAND_BYTE ; Get A from...
    PULS  B,PC ; Recover B, RTS.
ROM_PIA_DDR_A: ; 0x000730, $D730
    .db $C0 ; 1=Out, 0=Inp
WGT_PIA_DDR_B: ; 0x000731, $D731
    .db $FF
WGT_PIA_DDR_A: ; 0x000732, $D732
    .db $00
WGT_PIA_DDR_B: ; 0x000733, $D733
    .db $00
ROM_PIA_CTRL_A: ; 0x000734, $D734
    .db $14 ; C2 L2H, OUTPUT REG, C1 H2L
ROM_PIA_CTRL_B: ; 0x000735, $D735
    .db $05 ; C2 H2L, OUTPUT REG, C1 H2L+INT
WGT_PIA_CTRL_A: ; 0x000736, $D736
    .db $34 ; C2 OUT+LOW, OUTPUT REG
WGT_PIA_CTRL_B: ; 0x000737, $D737
    .db $3E ; C2 OUT+HIGH, OUTPUT REG, C1 L2H
DEFENDER_GAME_TITLE?: ; 0x000738, $D738
    ORCC  #$FF ; Mask interrupts.
    LDS   #$BFFF ; Set S to top of RAM.
    LDA   #$A0
    TFR   A>DP ; DP=$A0
    CLR   BANKSWITCH ; Bank 0.
    LDB   #$04 ; 3 loops
    LDU   #$CC00 ; IO PIAs
    LDX   #$D730 ; PIA_DATA_D730
PIA_SET_LOOP: ; 0x00074D, $D74D
    CLR   1,U ; Clear CTRL
    LDA   X+ ; Get data from X
    STA   U++ ; Store at DATA
    LDA   3,X ; Get other setup
    STA   -1,U ; Store to PIA CTRL
    DECB ; Loop counter
    BNE   PIA_SET_LOOP
    JSR   CLEAR_ALL_SCREEN ; Clear screen.
    LDX   #$9C00 ; Set to start of non-screen RAM.
CLEAR_X_TO_$C000: ; 0x000760, $D760
    CLR   X+
    LDB   #$38 ; Always set watchdog.
    STB   WATCHDOG
    CMPX  #$C000 ; Go to $C000
    BNE   CLEAR_X_TO_$C000 ; Loop
    CLR   PIA_ROM_DATA_A ; Write outputs to 0's.
    CLR   PIA_ROM_DATA_B
    LDX   #$C47D ; SRAM pointer
    JSR   GET_DATA_FROM_SRAM[X]_IN_B
    TFR   B>A ; Put to A
    CMPA  #$20 ; Blank? Space?
    BHI   CLEAR_B ; If above, write cleared.
    ANDA  #$0F ; Get bottom bits.
    CMPA  #$09 ; If _ 9
    BLS   COMMIT_B_AS_IS ; <=, commit same value.
CLEAR_B: ; 0x000784, $D784
    CLRB ; Init to clear.
COMMIT_B_AS_IS: ; 0x000785, $D785
    STB   VAL_FROM_SRAM_C495-C496 ; Set var from B
    LDD   #$A55A ; Not sure of val, ptr?
    STD   A0E0_RAND_WORD ; Store to...
    LDD   #$FF70 ; PTR to 0's?
    STD   $A0A1 ; Store to...
    CLR   $A0A3 ; NULL?
    LDB   #$FF ; D=A0FF
    STD   PIA_ROM_DATA_A_RAM_COPY ; Store...
    JSR   SAVE_BANK+SET_WATCHDOG_NONFLIPPED ; Set screen+other
    JSR   BANKSWITCH_TO_3 ; Goto bank
    JSR   JMP_TO_HIGHSCORES_TO_RAM ; Move initial to RAM.
    BSR   LIST_INIT_A05F,A061,A063,A069 ; Inits some lists.
    BSR   GAME_OBJECTS_INIT ; Does tons with pools of memory.
    JSR   SETUP_TEXT+UNK ; Sets up idk, also bankswitches?
    LDX   #$D825 ; OBJ+2, BANK 1 - C000
    LDA   #$01 ; OBJ+5
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP ; Sets up something.
    COM   $A0BA
    ANDCC #$00 ; Unmask IRQ's
    JMP   INIT_$A063_WITH_#$A05F+MORE ; Jumps to...
GAME_OBJECTS_INIT: ; 0x0007B6, $D7B6
    BSR   SETUP_$A026_TO_$A036
    JSR   RANDOMNESS_32_OF_0,1,10,11_AT_A142-A161
    JSR   INIT_STARS
    BSR   CHAIN_LIST_$67,NULL_$65_$6B_$6D
    JSR   SETUP_A1A2-A1B1_WITH_99/9A/A9/AA
    JMP   SETUP_POOL_4162
LIST_INIT_A05F,A061,A063,A069: ; 0x0007C6, $D7C6
    PSHS  X,B,A ; Save
    CLRA
    CLRB
    LDX   #$AAC5 ; PTR to list start?
    STX   LIST_OBJ[6]=0 ; Store ptr
LOOP_CREATE_LIST_15: ; 0x0007CF, $D7CF
    LEAX  15,X ; Add 15 to X
    STX   -15,X ; Store current X to last. AKA creating a list.
    CMPX  #$AF1B ; End of list, 0x4A entries.
    BNE   LOOP_CREATE_LIST_15
    STD   X ; NULL OBJ.next
    STD   $A05F ; Null whatever list this is.
    LDX   #$AF2A ; PTR to list
    STX   LIST_OBJ[6]!=0 ; Point to this list.
LOOP_CREATE_LIST_23: ; 0x0007E1, $D7E1
    LEAX  23,X ; Add 23 bytes.
    STX   -23,X ; Store this to PREV.next
    CMPX  #$AF86 ; End of list, 4 entries. Pods?
    BNE   LOOP_CREATE_LIST_23
    STD   X ; Null OBJ.next
    LDX   #$A05F ; Initial location.
    STX   R_A063_PTR_TO_OTHER_LIST ; For list. Players enemies?
    PULS  A,B,X,PC ; RTS
SETUP_$A026_TO_$A036: ; 0x0007F5, $D7F5
    LDX   #$F8BE ; PTR to data.
    LDU   #$A026 ; PTR to stuff.
    LDB   #$10 ; 0x0F bytes to move.
LOOP_MOVE_DATA: ; 0x0007FD, $D7FD
    LDA   X+ ; Get data from X.
    STA   U+ ; Store to ptr.
    DECB ; Loop counter.
    BNE   LOOP_MOVE_DATA
    RTS ; Leave
CHAIN_LIST_$67,NULL_$65_$6B_$6D: ; 0x000805, $D805
    PSHS  X,B,A,CC ; Save
    ORCC  #$FF ; Mask interrupts?
    LDX   #$A23C ; Initial
    STX   LIST_$67_UNUSED_OBJS? ; Store to...
LIST_23B_LOOP: ; 0x00080E, $D80E
    LEAX  23,X ; Space
    STX   -23,X ; Store PREV.next
    CMPX  #$AAAE ; End of pool. 5E items.
    BNE   LIST_23B_LOOP ; Loop
    CLRA ; Clear D
    CLRB
    STD   X ; NULL OBJ.next
    STD   LIST_$6B_UNK ; Null
    STD   LIST_$65_UNK ; Null
    STD   LIST_$6D_UNK ; Null
    PULS  CC,A,B,X,PC ; RTS
GOTO_B1_C000: ; 0x000825, $D825
    JSR   BANKSWITCH_TO_1
    JMP   $C000
SRAM_C495_LOAD: ; 0x00082B, $D82B
    LDX   #$C495 ; Ptr
    JSR   GET_DATA_FROM_SRAM[X]_IN_A ; Get data
    DECA ; Sub 1
    BNE   RTS ; Use val if not 0.
    LDA   #$02 ; Default
    STA   VAL_FROM_SRAM_C495-C496 ; Store
RTS: ; 0x000838, $D838
    RTS
    LDA   $A0BA ; Load
    BPL   LIST_RTN_INSTEAD ; If positive, do list rtn.
    BSR   SRAM_C495_LOAD ; Put to RAM
    LDA   VAL_FROM_SRAM_C495-C496 ; Load
    BEQ   LIST_RTN_INSTEAD ; If 0, do instead.
    LDD   #$D4BD ; Ptr to data table idk yet.
JSR_UNK_BSR_IDK: ; 0x000846, $D846
    JSR   SET_A0B0-A0B3_WHEN_@D>A0B2 ; Mod stuff.
    BSR   L_000861
LIST_RTN_INSTEAD: ; 0x00084B, $D84B
    JMP   OBJ_X@A063_REMOVED_FROM_A05F+HANDLED ; Lots goes here.
    LDA   $A0BA ; Load val
    BPL   LIST_RTN_INSTEAD ; If positive, AKA not pointing to ROM?
    BSR   SRAM_C495_LOAD ; Put to RAM
    LDA   VAL_FROM_SRAM_C495-C496 ; Load A
    CMPA  #$02 ; If _ #$02
    BLO   LIST_RTN_INSTEAD ; <, goto
    BSR   L_000861
    LDD   #$D4C2 ; Idk why val.
    BRA   JSR_UNK_BSR_IDK ; Mod and list.
L_000861: ; 0x000861, $D861
    CLR   $A038 ; Clear
    NOP
    LDA   $A0B7 ; Load
    BEQ   RTS ; RTS if 0.
    LDA   $A0BA
    BPL   UI_UPDATE_STUFF ; If is positive, goto.
    JSR   SORT_LIST_A05F_INTO_OTHER_LISTS_IF_OBJ[5]!=2 ; Find something.
    JSR   CLEAR_ALL_SCREEN ; Clear the entire screen.
    LDA   #$7F
    STA   $A0BA ; Store
    LDA   #$01
    STA   A08B_CURRENT_PLAYER ; Store
    STA   $A025
    CLR   A08C_CURRENT_PLAYER ; Is 0.
    LDX   #$A1C2 ; Load ptr to player data?
CLEAR_DATA_LOOP: ; 0x000881, $D881
    CLR   X+ ; Clear
    CMPX  #$A23C ; End of player data?
    BNE   CLEAR_DATA_LOOP ; Loop
    LDX   #$C485 ; SRAM PTR, initial ships.
    JSR   GET_DATA_FROM_SRAM[X]_IN_A ; Get data
    ANDA  #$0F ; Get bottom bits just to make sure corruption isn't too rewarding.
    STA   R_A1C9_P1_SHIPS ; Store to P1 ships.
    LDB   #$0A ; Idk val.
    STD   R_A1CB_P1_SMARTBOMBS ; Ships and smartbomb count always same, B is IDK.
    CLR   $A039 ; Clear
    NOP ; NOP
    LDX   #$A1C2 ; Ptr to P1 data?
    JSR   PLAYER_COMMIT_IDK_UNK
    LDX   #$C481 ; Get SRAM
    JSR   GET_DATA_FROM_SRAM[X]_IN_AB ; Get data in.
    STD   R_A0AB ; Store to, word.
    STD   R_A1C6 ; Store to, word.
    CLR   R_A1C8 ; Clear BYTE.
    LDX   #$A1C2 ; PTR to P1 data
LOOP_COPY_P1_DATA_TO_P2: ; 0x0008B2, $D8B2
    LDA   X+ ; Get data in player.
    STA   60,X ; Store to player 2. Off by 1 because of X+ above.
    CMPX  #$A1FF ; Compare to end P1 data.
    BNE   LOOP_COPY_P1_DATA_TO_P2
    LDX   #$D919 ; Ptr to bookkeep 7 below.
    LDA   #$00 ; Idk val
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP ; Do this.
UI_UPDATE_STUFF: ; 0x0008C4, $D8C4
    INC   A08C_CURRENT_PLAYER ; Inc players in game.
    LDA   VAL_FROM_SRAM_C495-C496 ; Load A
    ADDA  #$99 ; Add 99...
    DAA ; Adjust...
    STA   VAL_FROM_SRAM_C495-C496 ; Store back.
    LDX   #$C47D ; Ptr
    JSR   STORE_A_TO_SRAM[X]_BANKED ; Put A here???
    LDA   A08C_CURRENT_PLAYER ; Load players?
    DECA ; Dec
    BEQ   RTS ; If was 0 originally, RTS.
    JSR   DISPLAY_SETUP_INGAME ; Update display if not.
RTS: ; 0x0008DB, $D8DB
    RTS
SAVE_BANK+SET_WATCHDOG_NONFLIPPED: ; 0x0008DC, $D8DC
    PSHS  X,A ; Save
    LDA   CURRENT_BANK ; Get bank.
    PSHS  A ; Save
SET_WATCHDOG_NONFLIPPED: ; 0x0008E2, $D8E2
    LDX   #$DF17 ; IRQ handler.
    LDD   #$383C ; A=Watchdog, B=Ctrl (C2 SET HIGH, OUTPUT REG)
    BRA   SETUP_IRQ_RTN+WATCHDOG+WIDGET_B_CTRL+BANK@S
SET_WATCHDOG_GAMEPLAY?: ; 0x0008EA, $D8EA
    PSHS  X,A ; Save
    LDA   CURRENT_BANK ; Get bank.
    PSHS  A ; Save too.
    CLRA ; Zero
    JSR   BANKSWITCH_TO_A ; Switch to A
    LDA   PIA_WGT_DATA_B ; Get widget data.
    BPL   SET_WATCHDOG_NONFLIPPED ; If WGT_DATA_B7 not set, load P1 data.
    LDX   #$DFC3 ; IRQ handler.
    LDD   #$3934 ; A=Watchdog (Flipped screen) and CTRL (C2 SET LOW, OUTPUT REG)
SETUP_IRQ_RTN+WATCHDOG+WIDGET_B_CTRL+BANK@S: ; 0x0008FF, $D8FF
    STX   IRQ_CMD_LOC+1 ; Set up IRQ RTN.
    CLR   CURRENT_BANK ; Switch to bank 0
    CLR   BANKSWITCH ; Actually.
    STB   PIA_WGT_CTRL_B ; Store to widget ctrl.
    STA   WATCHDOG ; Store to watchdog.
    LDA   #$7E ; JMP command.
    STA   IRQ_CMD_LOC ; Store JMP.
    PULS  A ; Pull saved bank.
    STA   CURRENT_BANK ; Restore.
    STA   BANKSWITCH
    PULS  A,X,PC ; Restore regs+RTS
UPDATE_BOOKKEEP_7+GAME_START?: ; 0x000919, $D919
    LDB   #$07 ; Bookkeep to increase.
    JSR   GOTO_B3-C00F_BOOKKEEP_UPDATE_+1 ; ++ it
WAVE_INIT?: ; 0x00091E, $D91E
    JSR   GAME_OBJECTS_INIT ; Init wave?
    JSR   SORT_LIST_A05F_INTO_OTHER_LISTS_IF_OBJ[5]!=2 ; Sort them into two others.
    LDA   #$7F ; Store to
    STA   $A0BA ; Status of some type?
    LDX   R_A063_PTR_TO_OTHER_LIST ; Get list ptr from here.
    CMPX  $A05F ; If X _ $A05F
    BNE   SKIP_X_MOVE ; !=, goto
    LDX   X ; Move to next obj.
    BEQ   DONT_SETUP_U ; If NULL, goto
SKIP_X_MOVE: ; 0x000932, $D932
    LDA   #$0F ; Countdown
    LDX   #$D93A ; Handler
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT ; Leaves
    LDA   7F_TIMER_UNK ; Load val
    ORA   80_TIMER_UNK ; Combine
    ORA   7F_TIMER_UNK ; No function if ran from 93A?
    BNE   SKIP_X_MOVE ; If any set, goto. Always taken possibly?
DONT_SETUP_U: ; 0x000942, $D942
    JSR   LIST_INIT_A05F,A061,A063,A069 ; List init stuff.
    LDX   #$D950 ; Handler
    LDA   #$00 ; Countdown
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP ; Add to player?
    JMP   INIT_$A063_WITH_#$A05F+MORE
HANDLER_UNK: ; 0x000950, $D950
    CLRA
    JSR   BANKSWITCH_TO_A ; IO bank.
    LDA   PIA_WGT_DATA_B ; Get widget input
    BPL   BIT_7_NOT_SET ; If UP not pressed, go here?
    JSR   CLEAR_ALL_SCREEN ; Clear all screen otherwise? rofl.
    LDA   A08B_CURRENT_PLAYER ; Load val
    DECA ; --
    BNE   VAL_NOT_0 ; !=0, goto.
    JSR   SAVE_BANK+SET_WATCHDOG_NONFLIPPED
    BRA   SKIP_WATCHDOG_OTHER
VAL_NOT_0: ; 0x000966, $D966
    BSR   SET_WATCHDOG_GAMEPLAY?
SKIP_WATCHDOG_OTHER: ; 0x000968, $D968
    LDA   #$FF ; Set all buttons to on.
    STA   WGT_DATA_A_RAM_COPY
    STA   WGT_DATA_A_RAM_COPY_OLD
BIT_7_NOT_SET: ; 0x00096E, $D96E
    CLRA ; Clear D
    CLRB
    STD   $A020 ; Clear
    STD   $A022 ; Clear
    JSR   BANKSWITCH_TO_7 ; Bank 7
    JSR   JMP_TO_C350_FILLS_B300-B7FF ; Prep for...?
    JSR   JMP_TO_DOES_LOTS_IDFK ; Unsure.
    JSR   CLEAR_GAME_SCREEN ; Clear the screen.
    LDD   #$0300 ; Idk why val
    STD   $A0BD ; To
    STD   $A0BB ; To
    CLR   $A0AD ; Clear
    CLR   $A0B5
    CLR   $A08A
    CLR   $A0AF
    CLR   $A09A
    CLR   $A099 ; These
    LDX   #$A11A ; Idk why val
    STX   $A09B
    JSR   GET_PLAYER_PTR_IN_X_FROM_A08B
    STX   A08D_CURRENT_PLAYER_PTR?
    LDA   8,X ; Get PLAYER[8]
    ANDA  #$07 ; Get bits
    LDU   #$DB53 ; PTR
    LDA   A,U ; Load from ptr
    STA   $A02B ; Store to.
    DEC   7,X ; Dec PLAYER[7]
    JSR   DISPLAY_SETUP_INGAME ; Show display.
    LDD   #$2080 ; Unsure val
    STD   $A0C1
    STD   $A0BF
    LDD   #$2000 ; Unsure val
    STD   $A0C3
    LDD   #$0800 ; Unsure val.
    ADDD  $A020 ; Add?
    STD   $A0CC ; Store to
    LDD   #$8000 ; VPOS?
    STD   PLAYER.VPOS ; Store to
    CLRA ; Clear with A/B/D now.
    CLRB
    STD   $A0C7
    STA   $A0C9
    STD   PLAYER_V_MOMENTUM
    LDX   #$E9E3 ; Callback
    LDA   #$00 ; Timer
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LDX   #$E782
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LDX   #$F493
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LDX   #$E9BF
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LDX   #$F464
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LDX   #$F43D
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LDA   $A025
    BEQ   CLEAR_GAME_SCREEN+MORE ; If == 0, goto.
    LDB   A08C_CURRENT_PLAYER ; Load count.
    DECB
    BEQ   CLEAR_GAME_SCREEN+MORE ; If 1, goto.
    LDU   #$C0EF ; SENTENCE PTR PLAYER ONE
    LDA   A08B_CURRENT_PLAYER ; Load val
    DECA ; Dec
    BEQ   DONT_MOVE_U ; If was 1, don't move.
    LDU   #$C0F1 ; SENTENCE PTR PLAYER ONE
DONT_MOVE_U: ; 0x000A11, $DA11
    LDX   #$3C80 ; Pos?
    JSR   PSH_ALL_GOTO_B2-C002 ; Print
    LDA   #$80 ; Countdown
    LDX   #$DA1F ; Callback
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT ; Setup task it seems. Needs more digging.
CLEAR_GAME_SCREEN+MORE: ; 0x000A1F, $DA1F
    JSR   CLEAR_GAME_SCREEN ; Clear the game screen.
    LDB   #$05 ; Not sure val
    LDX   A08D_CURRENT_PLAYER_PTR? ; Get player data pointer
    LDA   10,X ; Load PLAYER[10]
    BSR   OR_B_WITH_2_IF_NOT_ZERO ; Manip B possibly.
    LDA   #$60 ; Timer?
    LDX   #$DA32 ; Callback?
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT ; I need to figure this out more apparently
CALLBACK_MAIN?: ; 0x000A32, $DA32
    JSR   L_000C1E
    BSR   A_FROM_A0FA,B_CLEARED_OR_2
    CLR   $A025 ; Clear
    JMP   IDK_BUT_CAN_END_WAVE
A_FROM_A0FA,B_CLEARED_OR_2: ; 0x000A3C, $DA3C
    CLRB
A_FROM_A0FA,B_OR'D_CONDITIONALLY: ; 0x000A3D, $DA3D
    LDA   A0FA_HUMANOID_COUNT?
OR_B_WITH_2_IF_NOT_ZERO: ; 0x000A3F, $DA3F
    BNE   SKIP_OR_B
    ORB   #$02 ; Set bit.
SKIP_OR_B: ; 0x000A43, $DA43
    STB   $A0BA ; Store B
    RTS
L_000A46: ; 0x000A46, $DA46
    LDB   #$58
    BSR   A_FROM_A0FA,B_OR'D_CONDITIONALLY
    LDD   $A020
    STD   $A022
    LDX   $A0BF
    LDD   #$0806
    JSR   CLEAR_SCREEN_FLEX_SETUP
    JSR   SAVE_STATE_TO_PLAYER
    LDD   #$D4B5
    JSR   SET_A0B0-A0B3_WHEN_@D>A0B2
    LDY   #$F9C1
    LDA   $A0BB
    BPL   L_000A6B
    LDY   #$F9CB
L_000A6B: ; 0x000A6B, $DA6B
    LDX   #$DB4B
    STX   7,U
    LDU   #$AFDD
    JSR   L_000B5C
    TFR   U>X
    LDU   R_A063_PTR_TO_OTHER_LIST
    STX   11,U
    LDD   $A0C1
    LDY   11,U
    JSR   GFX_BANK2_CHR_CLEAR
    LDA   #$02
    LDX   #$DA8C
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
    LDD   $A0C1
    LDY   11,U
    JSR   GFX_BANK2_CHR_TO_SCREEN
    LDX   7,U
    LDA   X+
    BEQ   L_000AA8
    STA   $A031
    CLR   $A026
    STX   7,U
    LDA   #$02
    LDX   #$DA7C
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
L_000AA8: ; 0x000AA8, $DAA8
    LDA   #$7F
    STA   $A0BA
    LDA   #$FF
    STA   $A026
    LDA   #$02
    LDX   #$DAB8
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
    CLR   $A026
    JSR   SORT_LIST_A05F_INTO_OTHER_LISTS_IF_OBJ[5]!=2
    LDX   $A0C1
    LEAX  1027,X
    JSR   BANKSWITCH_TO_7
    JSR   PALETTE_ENTRY_0xE
    JSR   SCORE_TO_SCREEN
    CLR   $A0B3
    LDB   #$13
    JSR   WRITE_ROM_PIA_DATA_REGS_W/_#$3F_AND_B
    JSR   ENEMY_COUNTS_RETURN?
    BNE   L_000ADE
    JSR   END_OF_WAVE
    JSR   CLEAR_GAME_SCREEN
L_000ADE: ; 0x000ADE, $DADE
    LDA   A08B_CURRENT_PLAYER
    LDX   A08D_CURRENT_PLAYER_PTR?
    LDB   7,X
    BNE   L_000B15
    LDB   A08C_CURRENT_PLAYER
    DECB
    BEQ   L_000B2C
    EORA  #$03
    JSR   DECIDE_PLAYER_PTR_FROM_A
    LDB   7,X
    BEQ   L_000B2C
    LDU   #$C0EF
    CMPA  #$02
    BEQ   L_000AFE
    LDU   #$C0F1
L_000AFE: ; 0x000AFE, $DAFE
    LDX   #$3C78
    JSR   PSH_ALL_GOTO_B2-C002
    LDU   #$C075
    LDX   #$3E88
    JSR   PSH_ALL_GOTO_B2-C002
    LDA   #$60
    LDX   #$DB15
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
L_000B15: ; 0x000B15, $DB15
    LDA   A08B_CURRENT_PLAYER
L_000B17: ; 0x000B17, $DB17
    INCA
    CMPA  A08C_CURRENT_PLAYER
    BLS   L_000B1E
    LDA   #$01
L_000B1E: ; 0x000B1E, $DB1E
    JSR   DECIDE_PLAYER_PTR_FROM_A
    LDB   7,X
    BEQ   L_000B17
    STA   A08B_CURRENT_PLAYER
    INC   $A025
    JMP   UPDATE_BOOKKEEP_7+GAME_START?
L_000B2C: ; 0x000B2C, $DB2C
    LDU   #$C075
    LDX   #$3E80
    LDA   #$FF
    STA   $A0BA
    JSR   PSH_ALL_GOTO_B2-C002
    CLR   $A0B3
    LDB   #$13
    JSR   WRITE_ROM_PIA_DATA_REGS_W/_#$3F_AND_B
    LDA   #$28
    LDX   #$DB48
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
    JMP   GOTO_B1_C000
    ASR   $A007
    ASR   COUNTDOWN_A00F
    SWI1
    CLR   BANKSWITCH
DATA_UNK: ; 0x000B53, $DB53
    .db $00 ; NEG [DP]
    .db $81 ; CMPA [IMM]
    .db $28 ; BVC
    .db $07 ; ASR [DP]
    .db $16 ; LBRA
    .db $2F ; BLE
    .db $84 ; AND [IMM]
    .db $15 ; ILL
    .db $00 ; NEG [DP]
L_000B5C: ; 0x000B5C, $DB5C
    PSHS  U,X,B,A
L_000B5E: ; 0x000B5E, $DB5E
    JSR   BANKSWITCH_TO_2
    LDD   Y
    STD   U
    MUL
    LEAX  10,U
    STX   2,U
    LEAX  D,X
    STX   4,U
    PSHS  X
    LEAX  D,X
    PSHS  X
    LDD   6,Y
    STD   6,U
    LDD   8,Y
    STD   8,U
    LDX   2,Y
    LEAU  10,U
    BSR   L_000B90
    LDX   4,Y
    LDU   2,S
    LDD   S
    STD   2,S
    BSR   L_000B90
    LEAS  4,S
    PULS  A,B,X,U,PC
L_000B90: ; 0x000B90, $DB90
    LDD   X++
    BITA  #$F0
    BEQ   L_000B98
    ORA   #$F0
L_000B98: ; 0x000B98, $DB98
    BITA  #$0F
    BEQ   L_000B9E
    ORA   #$0F
L_000B9E: ; 0x000B9E, $DB9E
    BITB  #$F0
    BEQ   L_000BA4
    ORB   #$F0
L_000BA4: ; 0x000BA4, $DBA4
    BITB  #$0F
    BEQ   L_000BAA
    ORB   #$0F
L_000BAA: ; 0x000BAA, $DBAA
    ANDA  #$BB
    ANDB  #$BB
    STD   U++
    CMPU  4,S
    BLO   L_000B90
    RTS
SAVE_STATE_TO_PLAYER: ; 0x000BB6, $DBB6
    PSHS  U,X,B,A ; Save
    LDU   A08D_CURRENT_PLAYER_PTR? ; Get player ptr
    LEAU  10,U ; +=10
    LDA   #$33 ; Load val
LOOP_CLEAR_51_BYTES: ; 0x000BBE, $DBBE
    CLR   U+
    DECA ; Clear player ptr +
    BNE   LOOP_CLEAR_51_BYTES
    LDU   A08D_CURRENT_PLAYER_PTR? ; Get player ptr again
    LDA   A0FA_HUMANOID_COUNT? ; Load val
    STA   10,U ; Store to PLAYER[10]
    LEAU  11,U ; +=11
    LDX   #$A0FB ; Ptr
LOOP_MOVE_RAM_TO_PLAYER: ; 0x000BCE, $DBCE
    LDA   X+ ; Load data from
    CMPX  #$A100 ; Compare to
    BHI   DONT_ADD_WITH_22_IN
    ADDA  22,X ; Add with value 22 in, 5 bytes do this.
DONT_ADD_WITH_22_IN: ; 0x000BD8, $DBD8
    STA   U+ ; Store to player ptr.
    CMPX  #$A112 ; A111 is end
    BNE   LOOP_MOVE_RAM_TO_PLAYER
    PULS  A,B,X,U,PC ; RTS
FILL_OUT_HUMANOID?: ; 0x000BE1, $DBE1
    PSHS  B,A ; Save
    STA   $A074 ; Store to...
LOOP_FILL_OUT: ; 0x000BE5, $DBE5
    JSR   FILL_OUT_NEW_OBJ_IN_X_WITH_DATA[6]_PAST_JSR ; Fill out obj with data.
    .db $F9
    .db $01
    .db $ED
    .db $70
    .db $66
    .db $66
    JSR   RANDOM_VALUE_FWD+IN_A ; Get random? Not used?
    LDD   A0E0_RAND_WORD ; Load random word.
    ANDA  #$1F ; Get bits.
    ADDA  1,S ; Add with +1 on stack.
    STD   10,X ; Store to OBJ[10]
    LSRB ; Shift B
    BHS   SHIFTED_OFF_ZERO ; If shifted off 0, goto.
    LDD   #$F915 ; Humanoid bitmap.
    STD   2,X ; Store to obj.
SHIFTED_OFF_ZERO: ; 0x000C01, $DC01
    LDA   #$E0 ; Move to OBJ[12]
    STA   12,X
    LDA   #$10 ; Move to OBJ[20]
    STA   20,X
    CLRA ; Clear D
    CLRB
    STD   16,X ; Clear OBJ[16],OBJ[17]
    STD   14,X ; OBJ[14],OBJ[15]
    STD   6,X ; OBJ[6],OBJ[7]
    STX   LIST_$65_UNK ; Store to list?
    STX   Y++ ; Store to Y? Idk what Y is.
    DEC   $A074 ; Dec val.
    BNE   LOOP_FILL_OUT
    PULS  A,B,PC ; RTS
    INC   A08D_CURRENT_PLAYER_PTR?+1
    LDD   -31232,U
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LDU   #$A11A ; Idk why val
    LEAY  U ; To Y
    STU   7,X ; Store to OBJ[7]
LOOP_CLEAR_A11A-A141: ; 0x000C2D, $DC2D
    CLR   U+
    CMPU  #$A142
    BNE   LOOP_CLEAR_A11A-A141
    LDU   A08D_CURRENT_PLAYER_PTR?
    LDA   10,U ; PLAYER[10] is humanoid count.
    STA   A0FA_HUMANOID_COUNT? ; Store to.
    BEQ   NO_HUMANOIDS ; If 0, no humanoids.
    CMPA  #$07 ; If _ 7
    BLS   HUMANOIDS_COUNT_<=7? ; <=, goto.
    LSRA ; Shift val twice.
    LSRA
    CLRB ; Clear
NOT_ZERO_HUMANOID: ; 0x000C44, $DC44
    BSR   FILL_OUT_HUMANOID?
    ADDB  #$40 ; 4 loops.
    BNE   NOT_ZERO_HUMANOID
    ASLA ; Shift left
    ASLA ;  2x
    NEGA ; Invert
    ADDA  10,U ; Add count?
    BEQ   NO_HUMANOIDS ; If 0, goto.
HUMANOIDS_COUNT_<=7?: ; 0x000C51, $DC51
    STA   A073_LOOP_CNT_HUMANOID/MISC? ; Store count <= 7 here?
LOOP_MORE_HUMANOIDS: ; 0x000C53, $DC53
    LDB   A0E0_RAND_WORD ; Load B. TODO: Used for STD 10,X below?
    LDA   #$01 ; Idk val
    BSR   FILL_OUT_HUMANOID?
    DEC   A073_LOOP_CNT_HUMANOID/MISC? ; Dec counter
    BNE   LOOP_MORE_HUMANOIDS
NO_HUMANOIDS: ; 0x000C5D, $DC5D
    LDU   A08D_CURRENT_PLAYER_PTR? ; Load player ptr
    LEAU  11,U ; PLAYER[11]
    LDX   #$A0FB ; Ptr to game RAM.
LOOP_PLAYER_TO_GAME_STATE: ; 0x000C64, $DC64
    LDA   U+ ; Load from player
    STA   X+ ; Store to game state.
    CMPX  #$A112 ; End
    BNE   LOOP_PLAYER_TO_GAME_STATE
    LDX   #$A112 ; Useless if ran from above. TODO: Only ran from there?
CLEAR_A112-A11A: ; 0x000C70, $DC70
    CLR   X+
    CMPX  #$A11A
    BNE   CLEAR_A112-A11A
LOOP_$67_TO_$65: ; 0x000C77, $DC77
    JSR   LIST_REMOVE_$67_TO_X,X.next_FROM_$65 ; Get obj
    LDA   A0DF_RAND_BYTE ; Get random.
    LSRA ; Shift
    ADDA  #$2A ; Add
    STA   12,X ; Store to OBJ[12]
    JSR   RANDOM_VALUE_FWD+IN_A ; Get random.
    ANDA  #$3F ; Get bits.
    ADDA  #$80 ; Set top.
    ADDD  $A020 ; Add with this.
    STD   10,X ; Store to OBJ[10]
    LDA   $A0FF ; Load val
    BEQ   UN_RTN_IDK ; If 0, goto.
    CMPA  #$06 ; IF A _ 6
    BLS   DONT_CAP_TO_6 ; <=, goto.
    LDA   #$06 ; Cap at 6
DONT_CAP_TO_6: ; 0x000C96, $DC96
    LEAY  X ; X to Y
    JSR   UNK_MAKE_OBJ_DETAILS_FROM_OBJ@Y? ; Make other obj?
    LDX   LIST_$67_UNUSED_OBJS? ; Get list ptr
    STX   Y ; Store to Y.next
    STY   LIST_$67_UNUSED_OBJS? ; Makes Y new head?
    NEGA ; Invert original A
    ADDA  $A0FF ; Add with val
    STA   $A0FF ; Store back
    BNE   LOOP_$67_TO_$65 ; If not 0, continue.
UN_RTN_IDK: ; 0x000CA9, $DCA9
    LDA   R_A0FE_ENEMY_IDK_COUNT ; Load val
    BEQ   NO_ENEMIES_1 ; If 0, skip.
    JSR   L_001F15
    CLR   R_A0FE_ENEMY_IDK_COUNT
NO_ENEMIES_1: ; 0x000CB2, $DCB2
    LDA   $A0FD
    STA   R_A114_ENEMY_IDK_COUNT
    BEQ   NO_ENEMIES_2
    CLR   $A0FD
    JSR   L_001B36
NO_ENEMIES_2: ; 0x000CBE, $DCBE
    LDA   $A0FC
    STA   R_A113_ENEMY_IDK_COUNT
    BEQ   RTS ; If 0, RTS
L_000CC5: ; 0x000CC5, $DCC5
    CMPA  #$03
    BLS   CAP_AT_3
    LDA   #$03
CAP_AT_3: ; 0x000CCB, $DCCB
    PSHS  A
    JSR   L_00229D
    LDA   $A0FC
    SUBA  S+
    STA   $A0FC
    BNE   L_000CC5
RTS: ; 0x000CD8, $DCD8
    RTS
IDK_BUT_CAN_END_WAVE: ; 0x000CD9, $DCD9
    LDU   R_A063_PTR_TO_OTHER_LIST ; Load list here.
    LDA   #$28 ; Load val
    STA   7,U ; OBJ[7]
    LDA   R_A10F ; Move
    STA   R_A118
    LDA   #$01 ; Val?
    STA   R_A117 ; Set
    LDA   $A0BA ; Load
    BITA  #$08 ; Test bit.
    BNE   L_000D6C ; If set, goto.
    JSR   ENEMY_COUNTS_RETURN?
    BNE   WAVE_CONTINUE? ; If A not 0, goto. Enemies number?
    LDA   #$77 ; Move
    STA   $A0BA
    JSR   SORT_LIST_A05F_INTO_OTHER_LISTS_IF_OBJ[5]!=2
    JSR   SAVE_STATE_TO_PLAYER
    JSR   END_OF_WAVE
    LDX   A08D_CURRENT_PLAYER_PTR?
    INC   7,X ; PLAYER[7], wave?
    JMP   WAVE_INIT? ; Next wave.
WAVE_CONTINUE?: ; 0x000D09, $DD09
    CMPA  #$08
    BHI   L_000D1F
    LDB   R_A10F
    LSRB
    CMPA  #$03
    BHI   L_000D16
    LSRB
L_000D16: ; 0x000D16, $DD16
    INCB
    CMPB  R_A118
    BHS   L_000D1F
    STB   R_A118
L_000D1F: ; 0x000D1F, $DD1F
    DEC   R_A118
    BNE   L_000D40
    CMPA  #$04
    LDA   R_A10F
    BHS   L_000D30
    LSRA
    LSRA
    JSR   GET_NEW_A_THAT_IS_<=_CURRENT
L_000D30: ; 0x000D30, $DD30
    STA   R_A118
    LDA   R_A119
    CMPA  #$0C
    BHS   L_000D40
    JSR   L_001A80
    INC   R_A119
L_000D40: ; 0x000D40, $DD40
    DEC   R_A117
    BEQ   L_000D4A
    LDA   R_A112_ENEMY_IDK_COUNT
    BNE   L_000D6C
L_000D4A: ; 0x000D4A, $DD4A
    LDA   R_A100
    STA   R_A117
    LDA   R_A0FB_ENEMY_IDK_COUNT
    BEQ   L_000D6C
    LDA   R_A112_ENEMY_IDK_COUNT
    CMPA  #$08
    BHS   L_000D6C
    LDA   R_A101
    CMPA  R_A0FB_ENEMY_IDK_COUNT
    BLS   L_000D64
    LDA   R_A0FB_ENEMY_IDK_COUNT
L_000D64: ; 0x000D64, $DD64
    JSR   L_001F9C
    NEGA
    ADDA  R_A0FB_ENEMY_IDK_COUNT
    STA   R_A0FB_ENEMY_IDK_COUNT
L_000D6C: ; 0x000D6C, $DD6C
    LDA   $A0AE
    CMPA  #$10
    BHS   L_000D74
    INC   $A0AE
L_000D74: ; 0x000D74, $DD74
    LDA   $A024
    INCA
    CMPA  #$F0
    BLS   L_000D81
    LDB   #$06
    JSR   GOTO_B3-C00F_BOOKKEEP_UPDATE_+1
    CLRA
L_000D81: ; 0x000D81, $DD81
    STA   $A024
    LDU   R_A063_PTR_TO_OTHER_LIST
    DEC   7,U
    BNE   L_000D96
    LDB   #$02
    LDY   #$A0FB
    JSR   PLAYER_DATA_MANIP_IDK
    LDA   #$28
    STA   7,U
L_000D96: ; 0x000D96, $DD96
    LDA   #$0F
    LDX   #$DCEA
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
GET_NEW_A_THAT_IS_<=_CURRENT: ; 0x000D9E, $DD9E
    PSHS  A ; Save A
    JSR   RANDOM_VALUE_FWD+IN_A ; Random value
LOOP_UNTIL_NEW_IS_LOWER: ; 0x000DA3, $DDA3
    CMPA  S ; Compare with pushed
    BLS   NEW_IS_<=_STACK
    LSRA ; Shift
    BRA   LOOP_UNTIL_NEW_IS_LOWER
NEW_IS_<=_STACK: ; 0x000DAA, $DDAA
    INCA ; ++ when done.
    LEAS  1,S ; Clean up stack, no pull.
    RTS ; Leave
ENEMY_COUNTS_RETURN?: ; 0x000DAE, $DDAE
    LDA   R_A112_ENEMY_IDK_COUNT
    ADDA  R_A0FB_ENEMY_IDK_COUNT
    ADDA  R_A113_ENEMY_IDK_COUNT
    ADDA  R_A114_ENEMY_IDK_COUNT
    ADDA  R_A116_ENEMY_IDK_COUNT
    ADDA  R_A115_ENEMY_IDK_COUNT
    ADDA  R_A0FE_ENEMY_IDK_COUNT
    RTS ; RTS
A_ADJUST_PER_#$10: ; 0x000DC2, $DDC2
    PSHS  B ; Save B
    CLRB ; Clear
LOOP_A_SUB: ; 0x000DC5, $DDC5
    CMPA  #$10 ; If A _ #$10
    BLO   A_<_#$10 ; <, goto.
    ADDB  #$0A ; B+=#$0A for every A >= #$10
    SUBA  #$10 ; A -= #$10
    BRA   LOOP_A_SUB ; Loop again
A_<_#$10: ; 0x000DCF, $DDCF
    PSHS  B ; B to stack
    ADDA  S+ ; Add A to B, clean up B push.
    PULS  B,PC ; Restore, RTS.
BYTE_TO_DISP?: ; 0x000DD5, $DDD5
    PSHS  B ; Save B
    TFR   A>B ; A to B
    CLRA ; Clear
LOOP_HIGHER_THAN_0x09: ; 0x000DDA, $DDDA
    CMPB  #$0A
    BLO   NO_FIXING_NEEDED
    ADDA  #$10 ; Add high digit to A
    DAA ; Adjust
    SUBB  #$0A ; Subtract value added decimally.
    BRA   LOOP_HIGHER_THAN_0x09
NO_FIXING_NEEDED: ; 0x000DE5, $DDE5
    PSHS  B ; Push to stack
    ADDA  S+ ; Add low digit to A
    DAA ; Adjust again. TODO: Find 99->00 factor.
    PULS  B,PC
END_OF_WAVE: ; 0x000DEC, $DDEC
    CLR   $A026 ; Clear
    LDU   R_A063_PTR_TO_OTHER_LIST ; Load ptr to list.
    PULS  X ; X from stack.
    STX   13,U ; Store to [A063]+13
    JSR   CLEAR_GAME_SCREEN ; Clear game screen.
    LDU   #$C0F9 ; Attack wave
    LDX   #$3850 ; POS
    JSR   PSH_ALL_GOTO_B2-C002 ; To screen.
    LDX   A08D_CURRENT_PLAYER_PTR? ; Get player pointer
    LDA   8,X ; Get wave
    BSR   BYTE_TO_DISP?
    TFR   A>B ; To B
    CLRA ; Clear A
    LDX   SENTENCE_CURR_SCR_LOC_XXYY ; Get location.
    JSR   JMP_TO_VAL_IN_AB_TO_SCREEN
    LDX   #$3D60 ; Pos
    LDU   #$C0FB ; PTR TO SENTENCE COMPLETED
    JSR   PSH_ALL_GOTO_B2-C002
    LDU   #$C0F3 ; PTR TO SENTENCE BONUS X
    LDX   #$3C90 ; Pos
    JSR   PSH_ALL_GOTO_B2-C002 ; To screen.
    LDX   A08D_CURRENT_PLAYER_PTR? ; Get player ptr.
    CLRB ; Clear
    LDA   8,X ; Get wave
    CMPA  #$05 ; Compare to 5
    BLS   CAP_BONUS_AT_500 ; If <= 5, use.
    LDA   #$05 ; Cap at 5.
CAP_BONUS_AT_500: ; 0x000E2B, $DE2B
    LDX   SENTENCE_CURR_SCR_LOC_XXYY ; Get pos.
    JSR   JMP_TO_VAL_IN_AB_TO_SCREEN ; Put to screen.
    LDU   R_A063_PTR_TO_OTHER_LIST ; Load ptr
    LDX   #$3CA0 ; Pos
    LDA   A0FA_HUMANOID_COUNT? ; Load val
    STA   9,U ; Store to list entry?
    BEQ   NO_MORE_HUMANOIDS_TO_DISPLAY ; If 0, goto.
HUMANOID_DISPLAY_LOOP: ; 0x000E3B, $DE3B
    TFR   X>D ; Pos to actual.
    LDY   #$F915 ; Ptr to bmp, humanoid.
    JSR   GFX_BANK2_CHR_TO_SCREEN ; Put to screen.
    LEAX  1024,X ; space 4 pixels.
    LDA   #$01 ; Score add flag, multiply.
    LDY   A08D_CURRENT_PLAYER_PTR? ; Load ptr to player
    LDB   8,Y ; Load wave
    CMPB  #$05
    BLO   DONT_CAP_WAVE_BONUS
    LDB   #$05
DONT_CAP_WAVE_BONUS: ; 0x000E55, $DE55
    ASLB ; Shift to upper nibble.
    ASLB
    ASLB
    ASLB
    JSR   SCORE_ADD_AB ; Add to score
    STX   7,U ; Screen pos to player data.
    LDA   #$04 ; Callback timer.
    LDX   #$DE66 ; Callback area.
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT ; Set task.
CALLBACK_WAVE_END_HUMANOIDS: ; 0x000E66, $DE66
    LDX   7,U ; Get screen pos.
    DEC   9,U ; Dec humanoid counter.
    BNE   HUMANOID_DISPLAY_LOOP
NO_MORE_HUMANOIDS_TO_DISPLAY: ; 0x000E6C, $DE6C
    LDX   A08D_CURRENT_PLAYER_PTR? ; Get ptr.
    JSR   PLAYER_COMMIT_IDK_UNK
    LDA   #$80 ; Timer for callback.
    LDX   #$DE79 ; Callback
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT ; Set task.
CALLBACK_WAVE_END_WAIT: ; 0x000E79, $DE79
    JMP   [13,U] ; Jumps to RTN in 13,U
PLAYER_COMMIT_IDK_UNK: ; 0x000E7C, $DE7C
    PSHS  U,X,B,A ; Save
    INC   8,X ; Inc PTR+X
    LDX   #$C49D
    JSR   GET_DATA_FROM_SRAM[X]_IN_A ; Get data from.
    STA   A073_LOOP_CNT_HUMANOID/MISC? ; Store to.
    LDX   2,S ; Restore X passed.
    TSTA ; Test SRAM loaded.
    BEQ   BANK_7_STUFF? ; If we loaded 0, go here.
    LDA   8,X ; Load val.
LOOP_SUB: ; 0x000E8F, $DE8F
    SUBA  A073_LOOP_CNT_HUMANOID/MISC? ; Sub with loaded value.
    BLO   BANK_7_STUFF? ; If we went negative with the subtract.
    BNE   LOOP_SUB ; If it's not 0, try again.
    LDA   #$0A ; Store
    STA   10,X
BANK_7_STUFF?: ; 0x000E99, $DE99
    JSR   BANKSWITCH_TO_7 ; Goto bank.
    LDA   8,X ; Load val.
    PSHS  A ; Save
    CMPA  #$04 ; Compare to 4
    BLS   DONT_CAP_AT_4
    LDA   #$04 ; Cap
DONT_CAP_AT_4: ; 0x000EA6, $DEA6
    LDU   DATA_USED_IN_$D000_CODE ; Load PTR from bank 7.
    ADDA  #$03 ; A+=3
    LEAX  11,X ; X+=11
LOOP_MOVE: ; 0x000EAD, $DEAD
    LDB   A,U ; Get B from U[A]
    STB   X+ ; Store to X
    LEAU  8,U ; U+=8
    CMPU  DATA_USED_IN_$D000_CODE_END ; See if at end.
    BNE   LOOP_MOVE ; Loop if not there.
    PULS  A ; Restore A.
    SUBA  #$04 ; A-=4
    BHS   STILL_POSITIVE
    CLRA ; Clear if went negative.
STILL_POSITIVE: ; 0x000EC0, $DEC0
    STA   A073_LOOP_CNT_HUMANOID/MISC? ; Store to.
    LDX   #$C497 ; SRAM PTR
    JSR   GET_DATA_FROM_SRAM[X]_IN_AB ; Get word
    JSR   A_ADJUST_PER_#$10 ; Add...
    ADDA  A073_LOOP_CNT_HUMANOID/MISC? ; Add A with this.
    STA   A073_LOOP_CNT_HUMANOID/MISC? ; Store to.
    BEQ   RTS ; If == 0, goto.
    TFR   B>A ; Put B to A.
    JSR   A_ADJUST_PER_#$10 ; Do rtn too.
    CMPA  A073_LOOP_CNT_HUMANOID/MISC? ; If A _ Other
    BHS   SKIP_COMMIT ; >=, skip.
    STA   A073_LOOP_CNT_HUMANOID/MISC? ; Commit higher.
SKIP_COMMIT: ; 0x000EDC, $DEDC
    LDA   A073_LOOP_CNT_HUMANOID/MISC? ; Load highest.
LOOP_MORE_A: ; 0x000EDE, $DEDE
    LDB   #$03 ; Idk val
    JSR   GET_PLAYER_PTR_IN_X_FROM_A08B ; Get player X ptr
    LEAY  11,X ; Y = ptr+11
    BSR   PLAYER_DATA_MANIP_IDK ; Player data manipulation, unk function.
    DECA ; A--
    BNE   LOOP_MORE_A ; Do more.
RTS: ; 0x000EEA, $DEEA
    PULS  A,B,X,U,PC
PLAYER_DATA_MANIP_IDK: ; 0x000EEC, $DEEC
    PSHS  Y,X,A ; Save
    JSR   BANKSWITCH_TO_7 ; Bank 7
    LDX   DATA_USED_IN_$D000_CODE ; Get data ptr.
LOOP_X_PTR: ; 0x000EF4, $DEF4
    LDA   B,X ; Get data at PTR+B
    BMI   DATA_NOT_MINUS ; If negative, goto.
    ADDA  Y ; Add player data.
    BLO   NEXT_ITTERATION ; If overflow, taken.
    CMPA  X ; Compare to data pointed to.
    BHI   NEXT_ITTERATION ; If A >, do.
    BRA   COMMIT_TO_PLAYER ; Always do this instead.
DATA_NOT_MINUS: ; 0x000F02, $DF02
    ADDA  Y ; Add player data.
    BHS   NEXT_ITTERATION ; If no overflow, goto.
    CMPA  1,X ; Compare to ptr+1
    BLO   NEXT_ITTERATION ; If ptr+1 is lower, taken.
COMMIT_TO_PLAYER: ; 0x000F0A, $DF0A
    STA   Y ; If it's higher, store to player data.
NEXT_ITTERATION: ; 0x000F0C, $DF0C
    LEAY  1,Y ; Player ptr++
    LEAX  8,X ; X+=8
    CMPX  DATA_USED_IN_$D000_CODE_END ; See if end.
    BNE   LOOP_X_PTR ; Loop if not end.
    PULS  A,X,Y,PC ; RTS, Restore.
P1_RELATED_CODE?_UNK_PTR'D_TO: ; 0x000F17, $DF17
    CLR   BANKSWITCH
    LDA   #$A0
    TFR   A>DP
    LDA   #$04
    STA   PIA_ROM_CTRL_B
    LDA   PIA_ROM_DATA_B
    LDA   VIDEO_COUNTER_BITS
    CMPA  #$80
    BLO   L_000F5D
    LDA   $A092
    BNE   LEAVE_IRQ_RTN
    INC   $A092
    JSR   IDK+THRUST+MORE
    JSR   MOVEMENT_STUFF_PLAYERS+IDK
    JSR   CLEAR_A_LOT
    LDA   VIDEO_COUNTER_BITS
    SUBA  #$08
    CMPA  #$A8
    BLS   L_000F47
    LDA   #$A8
L_000F47: ; 0x000F47, $DF47
    STA   INVERTED_VIDEO_BITS?
    LDA   #$02
    STA   BANKSWITCH
    LDD   INVERTED_VIDEO_BITS?
    JSR   L_00139F
    LDD   INVERTED_VIDEO_BITS?
    JSR   L_001213
    JSR   L_001453
    BRA   LEAVE_IRQ_RTN
L_000F5D: ; 0x000F5D, $DF5D
    LDB   $A092
    BEQ   LEAVE_IRQ_RTN
    CLR   $A092
    INC   $A05D
    LDB   #$38
    STB   WATCHDOG
    CMPA  #$08
    BHI   L_000F89
    LDU   #$C010
    LDD   $A030
    LDX   $A032
    LDY   $A034
    PSHU  Y,X,B,A
    LDD   $A02A
    LDX   $A02C
    LDY   $A02E
    PSHU  Y,X,B,A
    LDD   $A026
    LDX   $A028
    PSHU  X,B,A
L_000F89: ; 0x000F89, $DF89
    JSR   CHECK_COINDOOR_INPUT
    LDA   #$07
    STA   BANKSWITCH
    LDA   $A0BA
    BITA  #$02
    BNE   L_000F9A
    JSR   PALETTE_ENTRY_0x3
L_000F9A: ; 0x000F9A, $DF9A
    LDA   #$02
    STA   BANKSWITCH
    LDD   $A0A1
    JSR   L_001213
    LDD   $A0A1
    JSR   L_00139F
    JSR   L_001376
LEAVE_IRQ_RTN: ; 0x000FAC, $DFAC
    ORCC  #$FF ; Mask interrupts.
    CLR   BANKSWITCH ; Set to IO
    LDA   #$05 ; CTRL, C1 enable
    STA   PIA_ROM_CTRL_B ; COUNT_240_IRQ enable.
    LDA   CURRENT_BANK ; Load bank was.
    STA   BANKSWITCH ; Restore.
    LDA   S ; Get CC on stack.
    ANDA  #$6F ; Clear Entire+IRQ mask.
    STA   S ; Put that back.
    PULS  CC,A,B,DP,X,Y,U,PC ; RTI manually since we unset entire?
DYNAMIC_IRQ_RTN_MAIN: ; 0x000FC3, $DFC3
    CLR   BANKSWITCH ; Set to IO
    LDA   #$A0 ; DP
    TFR   A>DP
    LDA   #$04 ; Sets no interrupts from, DDR Output
    STA   PIA_ROM_CTRL_B ; Store, reading port data.
    LDA   PIA_ROM_DATA_B ; Clear IRQ from ROM PIA.
    LDA   VIDEO_COUNTER_BITS ; Get video counter.
    CMPA  #$58 ; If _ #$58
    BLO   VIDEO_COUNTER_BITS_UNDER_#$58 ; <, goto.
    LDB   $A092 ; Get val
    BNE   LEAVE_IRQ_RTN ; If != 0, goto.
    INC   $A092 ; Inc if 0
    COMA ; Invert video bits.
    NOP ; Nop
    STA   INVERTED_VIDEO_BITS? ; Store inverted here.
    JSR   CHECK_COINDOOR_INPUT ; Do coin door input
    LDA   #$07
    STA   BANKSWITCH ; Bankswitch to 7
    LDA   $A0BA ; Val
    BITA  #$02 ; If bit 2...
    BNE   SKIP_JSR ; Is set, goto...
    JSR   JMP_TO_IRQ_TASK_UNK ; Do this if set.
SKIP_JSR: ; 0x000FF4, $DFF4
    LDA   #$02 ; Bank 2
    STA   BANKSWITCH
    LDD   $A0A1 ; Load val
    JSR   L_001213
    LDD   $A0A1 ; Load val
    JSR   L_00139F
    BRA   LEAVE_IRQ_RTN ; Leaves
VIDEO_COUNTER_BITS_UNDER_#$58: ; 0x001005, $E005
    LDB   $A092
    BEQ   LEAVE_IRQ_RTN ; Leaves if 0
    CLR   $A092 ; Clear
    INC   $A05D ; Inc
    LDB   #$39 ; Always flipped?
    STB   WATCHDOG ; Store
    CMPA  #$04 ; Video counter bits.
    BHI   VIDEO_COUNTER_>_4 ; If > 4, goto.
    LDU   #$C010 ; Ptr
    LDD   $A030 ; Load
    LDX   $A032 ; Load
    LDY   $A034 ; Load
    PSHU  Y,X,B,A ; Push all loaded to stack
    LDD   $A02A ; Load
    LDX   $A02C ; Load
    LDY   $A02E ; Load
    PSHU  Y,X,B,A ; Push all to stack.
    LDD   $A026 ; Load
    LDX   $A028 ; Load
    PSHU  X,B,A ; Push to stack.
VIDEO_COUNTER_>_4: ; 0x001031, $E031
    JSR   IDK+THRUST+MORE
    JSR   MOVEMENT_STUFF_PLAYERS+IDK
    JSR   CLEAR_A_LOT
    LDA   #$02
    STA   BANKSWITCH
    LDD   INVERTED_VIDEO_BITS?
    JSR   L_001213
    LDD   INVERTED_VIDEO_BITS?
    JSR   L_00139F
    JSR   L_001453
    JSR   L_001376
    JMP   LEAVE_IRQ_RTN
INIT_STARS: ; 0x001052, $E052
    LDX   #$AF9D ; Ptr to stars data.
    LDB   #$10 ; Num stars?
    STB   $A0AE ; Idk why
    CLRB
LOOP_MORE_STARS: ; 0x00105A, $E05A
    JSR   RANDOM_VALUE_FWD+IN_A ; Get val.
    CMPA  #$9C ; If _ #$9C
    BHS   LOOP_MORE_STARS ; >=, get another number. This is to be anywhere on the screen col wise.
    STA   X ; <9C gets stored.
TRY_NEW_RANDOM_VAL: ; 0x001063, $E063
    JSR   RANDOM_VALUE_FWD+IN_A ; Get val.
    CMPA  #$A8 ; If _ #$A8
    BHI   TRY_NEW_RANDOM_VAL ; >, Get another.
    CMPA  #$2A ; If _ #$2A
    BLS   TRY_NEW_RANDOM_VAL ; <=, get another.
    STA   1,X ; Store to X[1]
    STB   2,X ; Store to X[2]Cleared
    ADDB  #$11 ; Add with value
    ANDB  #$77 ; Limit bits on each nibble.
    LEAX  4,X ; X+=4, next star.
    CMPX  #$AFDD ; End star data
    BNE   LOOP_MORE_STARS ; Do more.
RTS_STARS: ; 0x00107D, $E07D
    RTS ; RTS
CLEAR_A_LOT: ; 0x00107E, $E07E
    LDA   $A0BA ; Load
    BITA  #$20 ; Test bit
    BNE   RTS_STARS ; If not set, RTS
    LDX   #$AF9D ; Load
    LDD   $A020 ; Load val
    ANDB  #$80 ; Clear bottom 7
    STD   $A06F ; Store
    LDD   $A022 ; Load
    ANDB  #$80 ; Clear bottom 7
    SUBD  $A06F ; Sub with
    ASLB ; B << 1 into A
    ROLA
    STA   $A06F ; Store to
    LDB   #$F0 ; Load
    LDA   $A021 ; Load
    BITA  #$40 ; Test bit
    BNE   SKIP_INVERT_B 
    COMB ; B = #$0F
SKIP_INVERT_B : ; 0x0010A0, $E0A0
    STB   $A071 ; Store B
    CLRA ; Clear
    STA   [X] ; Write indir 16 times
    STA   [4,X]
    STA   [8,X]
    STA   [12,X]
    STA   [16,X]
    STA   [20,X]
    STA   [24,X]
    STA   [28,X]
    STA   [32,X]
    STA   [36,X]
    STA   [40,X]
    STA   [44,X]
    STA   [48,X]
    STA   [52,X]
    STA   [56,X]
    STA   [60,X]
    LDB   $A0AE ; Get B
L_0010D4: ; 0x0010D4, $E0D4
    LDA   X
    ADDA  $A06F
    CMPA  #$9C
    BLO   L_0010E6
    CMPA  #$C0
    BLS   L_0010E4
    LDA   #$9B
    BRA   L_0010E6
L_0010E4: ; 0x0010E4, $E0E4
    LDA   #$00
L_0010E6: ; 0x0010E6, $E0E6
    STA   X
    LDA   2,X
    ANDA  $A071
    STA   [0,X]
    LEAX  4,X
    DECB
    BNE   L_0010D4
    LDB   A0DF_RAND_BYTE
    ANDB  #$3C
    LDX   #$AF9D
    ABX
    LDA   2,X
    ADDA  #$11
    ANDA  #$77
    STA   2,X
    LDA   A0DF_RAND_BYTE
    BITA  #$01
    BNE   L_001148
    CMPA  #$98
    BLO   L_001132
    LDU   #$A102
    LEAU  -74,U
    LDU   U
    CMPU  #$6245
    BEQ   L_001130
    TST   $A0BA
    BMI   L_001130
    CMPA  #$A0
    BLO   L_001130
    CMPA  #$A1
    BHS   L_001130
    LDB   A0E0_RAND_WORD+1
    TFR   D>X
    LDB   A0E0_RAND_WORD
    STB   X
L_001130: ; 0x001130, $E130
    SUBA  #$84
L_001132: ; 0x001132, $E132
    CLR   [0,X]
    STA   X
    LDA   $A0BA
    BITA  #$02
    BEQ   L_001148
    LDA   A0E0_RAND_WORD+1
    ANDA  #$3F
    LDB   #$03
    MUL
    ADDB  #$2A
    STB   1,X
L_001148: ; 0x001148, $E148
    RTS
SETUP_POOL_4162: ; 0x001149, $E149
    LDX   #$A162 ; PTR
    STX   $A09F ; Store
LOOP_RANDOM: ; 0x00114E, $E14E
    JSR   RANDOM_VALUE_FWD+IN_A ; Get random.
    STA   32,X ; Store to X+32
    STA   X+ ; Store to X
    CMPX  #$A183 ; End?
    BNE   LOOP_RANDOM ; Loop
    RTS ; Leave
L_00115C: ; 0x00115C, $E15C
    LDX   $A09F ; X from
    LDU   $A0BF ; U from
    LEAU  -255,U
    LDD   X
    STD   U
    LDA   5,X
    LDB   9,X
    STD   2,U
    LDA   12,X
    STA   4,U
    LDA   WGT_DATA_A_RAM_COPY
    BITA  #$02 ; If adv pressed
    BEQ   L_00119A
    LDA   3,X
    LDB   6,X
    STD   -255,U
    LDA   10,X
    STA   -253,U
    LDA   4,X
    LDB   7,X
    STD   -511,U
    LDA   11,X
    STA   -509,U
    LDA   8,X
    STA   -766,U
L_00119A: ; 0x00119A, $E19A
    RTS
L_00119B: ; 0x00119B, $E19B
    LDU   $A09F
    LDX   $A0BF
    LEAX  2049,X
    PULU  A,B,Y
    STD   X
    STY   2,X
    PULU  A,B,Y
    STA   4,X
    LDA   WGT_DATA_A_RAM_COPY
    BITA  #$02
    BEQ   L_0011CC
    STB   257,X
    STY   258,X
    PULU  A,B,Y
    STY   513,X
    STA   515,X
    STB   770,X
L_0011CC: ; 0x0011CC, $E1CC
    RTS
L_0011CD: ; 0x0011CD, $E1CD
    LDU   $A0BF
    CLRB
    LDX   #$0000
    LEAY  X
    LEAU  2054,U
    PSHU  Y,X,B
    STX   257,U
    STB   259,U
    STX   513,U
    STB   515,U
    STB   770,U
    RTS
L_0011F0: ; 0x0011F0, $E1F0
    LDU   $A0BF
    CLRB
    LDX   #$0000
    LEAY  X
    LEAU  -250,U
    PSHU  Y,X,B
    STX   -255,U
    STB   -253,U
    STX   -511,U
    STB   -509,U
    STB   -766,U
    RTS
L_001213: ; 0x001213, $E213
    STA   R_A077_S_TEMP?
    LDA   $A0BA
    BITA  #$10
    BNE   L_001243
    LDA   R_A077_S_TEMP?
    CMPA  $A0C0
    BLS   L_001243
    CMPB  $A0C0
    BHI   L_001243
    LDA   $A0BD
    BMI   L_001231
    JSR   L_00125E
    JSR   L_0011F0
    BRA   L_001237
L_001231: ; 0x001231, $E231
    JSR   L_00125E
    JSR   L_0011CD
L_001237: ; 0x001237, $E237
    LDD   $A0BB
    STD   $A0BD
    BMI   L_001244
    JSR   L_00124A
    JSR   L_00115C
L_001243: ; 0x001243, $E243
    RTS
L_001244: ; 0x001244, $E244
    JSR   L_001258
    JMP   L_00119B
L_00124A: ; 0x00124A, $E24A
    LDY   #$F9C1
L_00124E: ; 0x00124E, $E24E
    LDA   $A0C4
    ASLA
    LDD   $A0C1
    STD   $A0BF
    JMP   GFX_16X6_MOVE+ADJUST
L_001258: ; 0x001258, $E258
    LDY   #$F9CB
    BRA   L_00124E
L_00125E: ; 0x00125E, $E25E
    LDD   $A0BF
    JMP   GFX_CLEAR_16X6
MOVEMENT_STUFF_PLAYERS+IDK: ; 0x001263, $E263
    LDA   $A0BA ; Load val
    BITA  #$40 ; Test bit
    LBNE  RTS ; RTS if set.
    CLR   $A06F ; Clear
    LDD   $A0C7 ; Load
    COMA ; Invert
    COMB
    ADDD  #$0001 ; +1
    BPL   SKIP_INVERT_A ; If positive
    COM   $A06F ; Invert again
SKIP_INVERT_A: ; 0x001278, $E278
    ASLB ; B << 2 into A
    ROLA
    ASLB
    ROLA
    ADDD  $A0C8 ; Add to
    STD   $A0C8 ; Store
    LDA   $A06F ; Load
    ADCA  $A0C7 ; Add with carry
    STA   $A0C7 ; Store
    LDD   $A0C7 ; Load into D
    LDA   WGT_DATA_A_RAM_COPY ; Get input
    BITA  #$02 ; Test if thrust
    BEQ   THRUST_NOT_PRESSED ; If 1, taken
    CLR   $A06F ; Clear
    LDD   $A0BD ; Load
    BPL   SKIP_INVERT_A ; If positive, goto
    COM   $A06F ; Invert
SKIP_INVERT_A: ; 0x001296, $E296
    ADDD  $A0C8 ; Add with
    STD   $A0C8 ; Store to
    LDA   $A06F ; Load
    ADCA  $A0C7 ; Add with carry
    STA   $A0C7 ; Store to
THRUST_NOT_PRESSED: ; 0x0012A0, $E2A0
    LDD   $A0C7 ; Get word
    ASRA ; A >> into B
    RORB
    ASRA ; A >> into B
    RORB
    CLRA ; A=0
    ASRB ; B >> 1
    RORA ; Bring B into A...
    STA   $A094 ; Store
    STB   $A093 ; Store
    LDA   $A0BD ; Load
    BMI   A_DIFF_VAL_SKIP_CLEARS_IF_NEGATIVE ; If negative, goto.
    LDA   #$20 ; Load with val
    TSTB ; Test B
    BMI   CLEAR_BEFORE_RTN ; If B negative.
    BRA   SKIP_CLEARS ; Always went to.
A_DIFF_VAL_SKIP_CLEARS_IF_NEGATIVE: ; 0x0012B8, $E2B8
    LDA   #$70 ; Load with val
    TSTB ; Test B
    BMI   SKIP_CLEARS ; If negative, goto. Skip clears.
CLEAR_BEFORE_RTN: ; 0x0012BD, $E2BD
    CLR   $A094 ; Clear
    CLR   $A093 ; Clear
SKIP_CLEARS: ; 0x0012C1, $E2C1
    LDB   $A094 ; Load
    ADDA  $A093 ; Add
    STA   $A093 ; Store
    SUBD  $A0C3 ; Sub value with loc
    BEQ   CLEAR_95 ; If 0, goto
    BLO   CMPD_TO_#$FF00 ; If value subbed was higher, goto.
    CMPD  #$0100 ; Subbed was lower.
    BLS   CLEAR_95 ; If <= val, goto.
    LDD   #$0040 ; Load with
    STD   $A095 ; Store to.
    LDD   #$0100 ; Load
    ADDD  $A0C3 ; Add with
    BRA   D_TO_C3 ; Goto
CMPD_TO_#$FF00: ; 0x0012DF, $E2DF
    CMPD  #$FF00 ; Comp to
    BGT   CLEAR_95 ; If >, goto
    LDD   #$FFC0 ; Load val
    STD   $A095 ; Store to
    LDD   #$FF00 ; Load val
    ADDD  $A0C3 ; Store to
    BRA   D_TO_C3
CLEAR_95: ; 0x0012F1, $E2F1
    CLRA
    CLRB
    STD   $A095 ; Clear
    LDD   $A093 ; Move
D_TO_C3: ; 0x0012F7, $E2F7
    STD   $A0C3 ; Store
    STA   $A0C1 ; Store to
    LDD   $A020 ; Load
    STD   $A022 ; Store
    LDD   $A0C7 ; Load
    CMPD  #$0100 ; If D _ val
    BLT   DONT_APPLY_MAX ; <, set
    LDD   #$0100 ; Max
DONT_APPLY_MAX: ; 0x00130A, $E30A
    CMPD  #$FF00 ; Compare to
    BGT   DONT_APPLY_MIN ; If >, don't apply min.
    LDD   #$FF00 ; Min
DONT_APPLY_MIN: ; 0x001313, $E313
    STD   $A0C7 ; Store
    ADDD  $A020 ; Add with
    SUBD  $A095 ; Sub from
    STD   $A020 ; Store to
    LDD   $A0C3 ; Load
    LSRA ; A >> 2, into B
    RORB
    LSRA
    RORB
    ANDB  #$E0 ; Only bits added in.
    ADDD  $A020 ; Add with
    STD   $A0CC ; Store to
    LDB   PLAYER.VPOS ; Load
    LDA   WGT_DATA_B_RAM_COPY
    LSRA ; Test UP bit
    BLO   UP_SET
    LDA   WGT_DATA_A_RAM_COPY
    BMI   DOWN_SET ; If down set
    LDD   #$0000
    BRA   COMMIT_D
UP_SET: ; 0x001337, $E337
    CMPB  #$2B ; Compare PLAYER.VPos to val
    BLS   RTS ; <=, RTS
    LDD   PLAYER_V_MOMENTUM ; Load momentum?
    BPL   SET_UNIT_UP ; If positive, aka going down, up unit.
    ADDD  #$FFF8 ; Add sub unit
    CMPD  #$FE00 ; If _ val
    BGE   COMMIT_D ; >, write.
    LDD   #$FE00 ; Cap
    BRA   COMMIT_D ; Commit
SET_UNIT_UP: ; 0x00134D, $E34D
    LDD   #$FF00 ; If going down, instantly change to 1 unit up.
    BRA   COMMIT_D ; Commit val
DOWN_SET: ; 0x001352, $E352
    CMPB  #$EE ; PLAYER.VPos
    BHS   RTS ; If >=, RTS
    LDD   PLAYER_V_MOMENTUM ; Get momentum?
    BLE   SET_UNIT_DOWN ; If <= 0, aka going up, set to 1 unit.
    ADDD  #$0008 ; Add with sub unit.
    CMPD  #$0200 ; Map
    BLS   COMMIT_D ; <=, save.
    LDD   #$0200 ; Cap
    BRA   COMMIT_D ; Alaways do.
SET_UNIT_DOWN: ; 0x001368, $E368
    LDD   #$0100 ; Instantly move 1 unit per.
    BRA   COMMIT_D ; This can be taken out rofl.
COMMIT_D: ; 0x00136D, $E36D
    STD   PLAYER_V_MOMENTUM ; Store momentum.
    ADDD  PLAYER.VPOS ; Add to player VPos
    STD   PLAYER.VPOS ; Store to VPos
    STA   $A0C2 ; Store here too, idk why.
RTS: ; 0x001375, $E375
    RTS ; Leave
L_001376: ; 0x001376, $E376
    LDA   $A0BA
    BITA  #$20
    BNE   L_00139E
    LDX   #$A065
    BRA   L_00139A
L_001381: ; 0x001381, $E381
    LDD   10,X
    ADDD  14,X
    STD   10,X
    LDD   12,X
    ADDD  16,X
    CMPA  #$2A
    BHS   L_001392
    LDA   #$F0
L_001392: ; 0x001392, $E392
    CMPA  #$F0
    BLS   L_001398
    LDA   #$2A
L_001398: ; 0x001398, $E398
    STD   12,X
L_00139A: ; 0x00139A, $E39A
    LDX   X
    BNE   L_001381
L_00139E: ; 0x00139E, $E39E
    RTS
L_00139F: ; 0x00139F, $E39F
    PSHS  B,A
    LDA   $A0BA
    BITA  #$20
    BNE   L_0013F1
    LDX   #$A065
    BRA   L_0013ED
L_0013AC: ; 0x0013AC, $E3AC
    LDD   4,X
    BEQ   L_0013C2
    CMPB  S
    BHI   L_0013ED
    CMPB  1,S
    BLS   L_0013ED
    LDY   2,X
    JSR   [8,Y]
    CLRA
    CLRB
    STD   4,X
L_0013C2: ; 0x0013C2, $E3C2
    LDB   12,X
    CMPB  S
    BHI   L_0013ED
    CMPB  1,S
    BLS   L_0013ED
    LDD   10,X
    SUBD  $A020
    CMPD  #$2580
    BHS   L_0013ED
    LDY   2,X
    ASLB
    ROLA
    ASLB
    ROLA
    ADDA  Y
    CMPA  #$9C
    BHI   L_0013ED
    SUBA  Y
    ASLB
    LDB   12,X
    STD   4,X
    JSR   [6,Y]
L_0013ED: ; 0x0013ED, $E3ED
    LDX   X
    BNE   L_0013AC
L_0013F1: ; 0x0013F1, $E3F1
    PULS  A,B,PC
L_0013F3: ; 0x0013F3, $E3F3
    PSHS  U,Y,B,A
    LDA   $A099
    CMPA  #$14
    BHS   L_00144A
    LDD   10,X
    SUBD  $A020
    CMPD  #$2580
    BHS   L_00144A
    ASLB
    ROLA
    ASLB
    ROLA
    LDB   12,X
    CMPB  #$2A
    BLS   L_00144A
    LDX   LIST_$67_UNUSED_OBJS?
    BEQ   L_00144A
    STD   4,X
    STD   10,X
    EXG   A-B
    STD   12,X
    STU   6,X
    CLRA
    CLRB
    STD   14,X
    STD   16,X
    LDU   6,S
    PULU  A,B,Y
    STD   18,X
    STY   2,X
    PULU  A,B
    STU   6,S
    STD   8,X
    LDA   #$14
    STA   21,X
    STA   22,X
    LDD   X
    STD   LIST_$67_UNUSED_OBJS?
    LDD   LIST_$6D_UNK
    STD   X
    INC   $A099
    STX   LIST_$6D_UNK
    PULS  A,B,Y,U,PC
L_00144A: ; 0x00144A, $E44A
    LDU   6,S
    LEAU  6,U
    STU   6,S
    CLRA
    PULS  A,B,Y,U,PC
L_001453: ; 0x001453, $E453
    LDA   $A0BA
    BITA  #$20
    BNE   L_001497
    LDD   $A020
    ANDB  #$E0
    STD   $A09D
    LDD   $A022
    ANDB  #$E0
    SUBD  $A09D
    ASLB
    ROLA
    ASLB
    ROLA
    STD   $A09D
    LDX   #$A06D
    BRA   L_001493
L_001470: ; 0x001470, $E470
    LDY   4,X
    LDD   16,X
    ADDD  12,X
    CMPA  #$2A
    BLS   L_0014C6
    STD   12,X
    LDD   14,X
    ADDD  $A09D
    ADDD  10,X
    CMPA  #$98
    BHS   L_0014C6
    STD   10,X
    LDB   12,X
    STD   4,X
    LDU   4,X
    JMP   [18,X]
L_001493: ; 0x001493, $E493
    LDX   X
    BNE   L_001470
L_001497: ; 0x001497, $E497
    RTS
    LDU   $A0A6
    LDB   11,X
    BPL   L_0014A0
    LEAU  6,U
L_0014A0: ; 0x0014A0, $E4A0
    LDD   #$0000
    STD   Y
    STA   2,Y
    STD   256,Y
    STA   258,Y
    LDY   4,X
    LDD   U
    STD   Y
    LDD   2,U
    STA   2,Y
    STB   256,Y
    LDD   4,U
    STD   257,Y
    BRA   L_001493
L_0014C6: ; 0x0014C6, $E4C6
    CLRA
    CLRB
    STA   22,X
    STD   Y
    STA   2,Y
    STD   256,Y
    STA   258,Y
    BRA   L_001493
    LDU   $A0A8
    LDB   11,X
    ASLB
    LDD   #$0000
    STD   Y
    STA   2,Y
    STD   256,Y
    STA   258,Y
    LDY   4,X
    BLO   L_001507
    LDD   U
    ANDA  #$0F
    STD   Y
    LDD   2,U
    ANDA  #$0F
    STA   2,Y
    ANDB  #$F0
    STB   257,Y
    JMP   L_001493
L_001507: ; 0x001507, $E507
    LDD   U
    ANDB  #$0F
    STB   1,Y
    ANDA  #$F0
    STA   258,Y
    LDD   2,U
    ANDA  #$F0
    STD   256,Y
    JMP   L_001493
    LDD   #$0025
    JSR   SCORE_ADD_AB
    DEC   $A099
    JSR   REMOVE_X_FROM_LIST_A06D
    JSR   L_0023FE
    LDD   10,X
    LSRA
    RORB
    LSRA
    RORB
    ADDD  $A020
    STD   10,X
    LDA   12,X
    SUBA  #$02
    STA   12,X
    LDD   #$F951
    STD   2,X
    JSR   L_002C63
    LDD   #$D4E4
    JMP   SET_A0B0-A0B3_WHEN_@D>A0B2
    .db $5E ; Data?
SETUP_A1A2-A1B1_WITH_99/9A/A9/AA: ; 0x00154B, $E54B
    LDX   #$A1A2 ; Ptr?
    STX   $A0A8
LOOP_NOT_DONE: ; 0x001550, $E550
    LDB   #$0A ; Initial
    JSR   RANDOM_VALUE_FWD+IN_A
    BMI   NOT_NEGATIVE ; If top bit set, don't modify.
    LDB   #$09 ; Changed
NOT_NEGATIVE: ; 0x001559, $E559
    LSRA ; Shift A
    BLO   SHIFTED_OFF_ONE
    ADDB  #$A0 ; Add to B
    BRA   COMMIT_B
SHIFTED_OFF_ONE: ; 0x001560, $E560
    ADDB  #$90 ; Add this is was 0 shifted off.
COMMIT_B: ; 0x001562, $E562
    STB   X+ ; Store
    CMPX  #$A1C2 ; End?
    BNE   LOOP_NOT_DONE ; Not yet.
    RTS ; Leave
L_00156A: ; 0x00156A, $E56A
    LDX   #$A06D
    BRA   L_00158A
L_00156F: ; 0x00156F, $E56F
    LDA   22,X
    BEQ   L_001579
    DEC   21,X
    BNE   L_00158A
L_001579: ; 0x001579, $E579
    LDU   X
    STU   Y
    LDU   LIST_$67_UNUSED_OBJS?
    STU   X
    STX   LIST_$67_UNUSED_OBJS?
    JSR   L_0023FE
    DEC   $A099
    LEAX  Y
L_00158A: ; 0x00158A, $E58A
    LEAY  X
    LDX   X
    BNE   L_00156F
    RTS
    LDA   $A0B5
    CMPA  #$04
    BHS   L_0015A8
    INC   $A0B5
    LDD   #$D51B
    JSR   SET_A0B0-A0B3_WHEN_@D>A0B2
    LDX   $A0C1
    LDA   $A0BB
    BPL   L_0015C1
    JMP   L_001630
L_0015A8: ; 0x0015A8, $E5A8
    JMP   OBJ_X@A063_REMOVED_FROM_A05F+HANDLED
L_0015AB: ; 0x0015AB, $E5AB
    PSHS  U,B,A
    LDA   #$02
    STA   CURRENT_BANK
    STA   BANKSWITCH
    PULS  A,B
    NOP ; Removed something?
    NOP
    NOP
    LDU   #$F96F
    JSR   L_0016BA
    PULS  U,PC
L_0015C1: ; 0x0015C1, $E5C1
    LEAX  1796,X
    STX   7,U
    STX   9,U
    STX   11,U
    LDA   $A0BA
    BITA  #$40
    BNE   L_001621
    LDA   #$04
    LDX   7,U
    LDB   #$11
    CMPX  #$9800
    BHS   L_001621
L_0015DC: ; 0x0015DC, $E5DC
    STB   X
    LEAX  256,X
    DECA
    BNE   L_0015DC
    LDB   #$99
    STB   X
    STX   7,U
    LDY   $A0A4
    CMPY  #$A15F
    BLO   L_0015F8
    LDY   #$A142
L_0015F8: ; 0x0015F8, $E5F8
    LDX   9,U
    LDA   #$03
L_0015FC: ; 0x0015FC, $E5FC
    LDB   Y+
    STB   X
    LEAX  256,X
    DECA
    BNE   L_0015FC
    STY   $A0A4
    STX   9,U
    CLR   [11,U]
    INC   11,U
    LDD   7,U
    SUBA  #$06
    BSR   L_0015AB
    BNE   L_001621
    LDA   #$01
    LDX   #$E5CB
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
L_001621: ; 0x001621, $E621
    LDX   11,U
    CLRA
L_001624: ; 0x001624, $E624
    STA   X
    LEAX  256,X
    CMPX  7,U
    BLS   L_001624
    BRA   L_00169A
L_001630: ; 0x001630, $E630
    LEAX  4,X
    STX   7,U
    STX   9,U
    STX   11,U
    LDA   $A0BA
    BITA  #$40
    BNE   L_00168D
    LDA   #$04
    LDX   7,U
    LDB   #$11
    CMPX  #$0500
    BLS   L_00168D
L_001649: ; 0x001649, $E649
    STB   X
    LEAX  -256,X
    DECA
    BNE   L_001649
    LDB   #$99
    STB   X
    STX   7,U
    LDY   $A0A4
    CMPY  #$A15F
    BLO   L_001665
    LDY   #$A142
L_001665: ; 0x001665, $E665
    LDX   9,U
    LDA   #$03
L_001669: ; 0x001669, $E669
    LDB   Y+
    STB   X
    LEAX  -256,X
    DECA
    BNE   L_001669
    STY   $A0A4
    STX   9,U
    CLR   [11,U]
    DEC   11,U
    LDD   7,U
    JSR   L_0015AB
    BNE   L_00168D
    LDA   #$01
    LDX   #$E638
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
L_00168D: ; 0x00168D, $E68D
    LDX   11,U
    CLRA
L_001690: ; 0x001690, $E690
    STA   X
    LEAX  -256,X
    CMPX  7,U
    BHS   L_001690
L_00169A: ; 0x00169A, $E69A
    DEC   $A0B5
    JMP   OBJ_X@A063_REMOVED_FROM_A05F+HANDLED
RANDOMNESS_32_OF_0,1,10,11_AT_A142-A161: ; 0x00169F, $E69F
    LDX   #$A142 ; PTR?
    STX   $A0A4 ; Put to.
LOOP_WRITE_X: ; 0x0016A4, $E6A4
    JSR   RANDOM_VALUE_FWD+IN_A ; Depends on randomness?
    CLRB ; Clear B
    LSRA ; Random to carry.
    BHS   SKIP_ADD_1 ; If CC.c=0, don't add.
    ADDB  #$01
SKIP_ADD_1: ; 0x0016AD, $E6AD
    LSRA ; Get random again
    BHS   SKIP_ADD_10 ; If CC.c=0, don't add.
    ADDB  #$10
SKIP_ADD_10: ; 0x0016B2, $E6B2
    STB   X+ ; Store B to X.
    CMPX  #$A162 ; Compare to end.
    BNE   LOOP_WRITE_X
    RTS
L_0016BA: ; 0x0016BA, $E6BA
    LDX   #$A065
L_0016BD: ; 0x0016BD, $E6BD
    STD   $A0D6
    ADDD  U
    STD   $A0D8
    BRA   L_0016DC
L_0016C5: ; 0x0016C5, $E6C5
    LDD   4,X
    BEQ   L_0016DC
    CMPA  $A0D8
    BHS   L_0016DC
    CMPB  $A0D9
    BHS   L_0016DC
    ADDD  [2,X]
    CMPA  $A0D6
    BLS   L_0016DC
    CMPB  $A0D7
    BHI   L_0016E1
L_0016DC: ; 0x0016DC, $E6DC
    LDX   X
    BNE   L_0016C5
    RTS
L_0016E1: ; 0x0016E1, $E6E1
    STU   $A0DC
    LDY   2,X
    SUBD  Y
    STD   A073_LOOP_CNT_HUMANOID/MISC?
    CLRA
    CLRB
    STD   $A0D0
    STD   $A0D2
    LDD   A073_LOOP_CNT_HUMANOID/MISC?
    SUBB  $A0D7
    BHI   L_0016FB
    NEGB
    STB   $A0D1
    BRA   L_0016FD
L_0016FB: ; 0x0016FB, $E6FB
    STB   $A0D3
L_0016FD: ; 0x0016FD, $E6FD
    SUBA  $A0D6
    BHI   L_001706
    NEGA
    STA   $A0D0
    BRA   L_001708
L_001706: ; 0x001706, $E706
    STA   $A0D2
L_001708: ; 0x001708, $E708
    LDD   A073_LOOP_CNT_HUMANOID/MISC?
    ADDD  Y
    SUBB  $A0D9
    BHI   L_001711
    CLRB
L_001711: ; 0x001711, $E711
    SUBA  $A0D8
    BHI   L_001716
    CLRA
L_001716: ; 0x001716, $E716
    STD   $A0DA
    LDD   Y
    SUBD  $A0D0
    SUBD  $A0DA
    STD   $A0CE
    LDA   1,U
    STA   $A0D5
    LDB   $A0D2
    MUL
    LDU   2,U
    LEAU  D,U
    LDA   1,Y
    STA   $A0D4
    LDY   2,Y
    LDB   $A0D0
    MUL
    LEAY  D,Y
    LDA   $A0D1
    LEAY  A,Y
    LDA   $A0D3
    LEAU  A,U
L_00173F: ; 0x00173F, $E73F
    LDB   $A0CF
    DECB
L_001742: ; 0x001742, $E742
    LDA   B,U
    BEQ   L_001770
    LDA   B,Y
    BEQ   L_001770
    LEAY  B,Y
    TFR   Y>D
    LDU   2,X
    SUBD  2,U
    LDY   4,X
L_001755: ; 0x001755, $E755
    SUBB  1,U
    SBCA  #$00
    BLO   L_001761
    LEAY  256,Y
    BRA   L_001755
L_001761: ; 0x001761, $E761
    ADDB  1,U
    ADCA  #$00
    LEAY  B,Y
    STY   $A0F8
    JSR   [8,X]
    LDA   #$01
    RTS
L_001770: ; 0x001770, $E770
    DECB
    BPL   L_001742
    LDD   $A0D4
    LEAY  A,Y
    LEAU  B,U
    DEC   $A0CE
    BNE   L_00173F
    LDU   $A0DC
    JMP   L_0016DC
L_001782: ; 0x001782, $E782
    CLR   $A0B6
    LDX   #$E799
    LDA   $A0B6
    LDB   A,X
    BEQ   L_001782
    INC   $A0B6
    STB   $A027
    LDA   #$02
    LDX   #$E784
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
    .db $38
    .db $39
    .db $3A
    .db $3B
    .db $3C
    .db $3D
    .db $3E
    .db $3F
    .db $37
    .db $2F
    .db $27
    .db $1F
    .db $17
    .db $47
    .db $47
    .db $87
    .db $87
    .db $C7
    .db $C7
    .db $C6
    .db $C5
    .db $CC
    .db $CB
    .db $CA
    .db $DA
    .db $E8
    .db $F8
    .db $F9
    .db $FA
    .db $FB
    .db $FD
    .db $FF
    .db $BF
    .db $3F
    .db $3E
    .db $3C
    .db $00
INIT_$A063_WITH_#$A05F+MORE: ; 0x0017BE, $E7BE
    LDX   #$A05F ; PTR
    STX   R_A063_PTR_TO_OTHER_LIST ; Store...
WAIT_FOR_FLAG: ; 0x0017C3, $E7C3
    LDA   $A05D ; Get A from
    BEQ   WAIT_FOR_FLAG ; If 0, wait.
    CLR   $A05D ; Clear.
    LDB   $A0BA ; Get B
    BITB  #$7D ; Test 0111.1101 bits.
    BEQ   NONE_SET
    CLR   $A05E ; Clear?
    BRA   A_LOT_SKIPS_TO_HERE
NONE_SET: ; 0x0017D3, $E7D3
    ASLA ; Shift
    ADDA  $A05E ; Add with
    SUBA  #$04 ; Sub
    BPL   IS_STILL_POSITIVE
    CLRA ; Clear if negative.
IS_STILL_POSITIVE: ; 0x0017DB, $E7DB
    STA   $A05E ; Store
    CMPA  #$02 ; If _ 2
    BLO   A_LOT_SKIPS_TO_HERE ; <, go.
    LDB   #$03 ; Move
    STB   $A0AE
    CMPA  #$02
    BLS   A_LOT_SKIPS_TO_HERE ; <=, go.
    LDA   #$02 ; Move
    STA   $A05E
L_0017ED: ; 0x0017ED, $E7ED
    LDY   #$A065 ; List
LOOP_FIND_IDK: ; 0x0017F1, $E7F1
    LDX   Y ; Get Y.next
    BEQ   A_LOT_SKIPS_TO_HERE ; If NULL, goto.
    LDA   20,X ; Get data in X
    BEQ   OBJ[20]_WAS_ZERO ; If 0, goto.
    LEAY  X ; Y is now Y.next
    BRA   LOOP_FIND_IDK
OBJ[20]_WAS_ZERO: ; 0x0017FE, $E7FE
    LDU   X ; Y.next.next
    STU   Y ; ...to Y.next
    LDD   A0DF_RAND_BYTE ; Get value from.
    ANDA  #$3F ; And...
    ADDA  #$60 ; Add
    ADDD  10,X ; Add
    STD   10,X ; Store to...
    JSR   L_0023FE ; Does tons.
    LDD   #$0000
    STD   4,X ; Clear
    LDU   LIST_$6B_UNK ; Get obj at head
    STX   LIST_$6B_UNK ; Store new head obj.
    STU   X ; Set old head obj to HEAD.next
A_LOT_SKIPS_TO_HERE: ; 0x00181A, $E81A
    LDA   #$02
    STA   CURRENT_BANK
    STA   BANKSWITCH
    BSR   L_001861
    JSR   L_002C66
    JSR   RANDOM_VALUE_FWD+IN_A
L_001829: ; 0x001829, $E829
    LDX   $A082
    BNE   L_001839
    LDX   $A086
    BEQ   U_LIST_A05F
    LDD   $A088
    CLR   $A086
    CLR   $A087
    BRA   L_00183F
L_001839: ; 0x001839, $E839
    LDD   $A084
    CLR   $A082
    CLR   $A083
L_00183F: ; 0x00183F, $E83F
    ANDB  $A0BA
    BNE   L_001829
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    BRA   L_001829
U_LIST_A05F: ; 0x001848, $E848
    LDU   #$A05F ; Load list
    BRA   U=U.NEXT,HANDLE_COUNTER? ; Handle
DEC_OBJ[4]+HANDLE_IF_0: ; 0x00184D, $E84D
    DEC   4,U ; Dec OBJ[4]
    BNE   U=U.NEXT,HANDLE_COUNTER? ; If not 0, don't call handler.
    STU   R_A063_PTR_TO_OTHER_LIST ; Obj ptr to.
    JMP   [2,U] ; Goto handler?
U=U.NEXT,HANDLE_COUNTER?: ; 0x001856, $E856
    LDU   U ; U = U.next
    BNE   DEC_OBJ[4]+HANDLE_IF_0 ; If valid ptr, goto.
    LDS   #$BFFF ; Set stack, idk why
    JMP   INIT_$A063_WITH_#$A05F+MORE ; Goto
L_001861: ; 0x001861, $E861
    LDA   $A0BA
    BITA  #$10
    BNE   L_001894
    LDD   $A0BF
    LDU   #$F9C1
    TST   $A0BD
    BPL   L_001873
    LDU   #$F9CB
L_001873: ; 0x001873, $E873
    PSHS  U,B,A
    INC   $A0DE
    JSR   L_0016BA
    PULS  A,B,U
    BNE   L_001886
    LDX   #$A06D
    JSR   L_0016BD
    BEQ   L_001894
L_001886: ; 0x001886, $E886
    LDX   #$DA46
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LDA   $A0BA
    ORA   #$08
    STA   $A0BA
L_001894: ; 0x001894, $E894
    CLR   $A0DE
    RTS
    LDA   $A0AF
    BNE   L_0018BE
    INC   $A0AF
    LDD   $A0BD
    COMB
    COMA
    ADDD  #$0001
    STD   $A0BB
L_0018A6: ; 0x0018A6, $E8A6
    LDA   #$02
    LDX   #$E8AE
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
    LDA   WGT_DATA_A_RAM_COPY
    BITA  #$40
    BNE   L_0018A6
    LDA   #$05
    LDX   #$E8BC
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
    CLR   $A0AF
L_0018BE: ; 0x0018BE, $E8BE
    JMP   OBJ_X@A063_REMOVED_FROM_A05F+HANDLED
    LDA   $A09A
    BNE   L_00191C
    LDX   A08D_CURRENT_PLAYER_PTR?
    LDA   9,X
    BEQ   L_00191C
    INC   $A09A
    DEC   9,X
    JSR   SMARTBOMBS_TO_SCREEN
    LDD   #$D4D2
    JSR   SET_A0B0-A0B3_WHEN_@D>A0B2
L_0018D8: ; 0x0018D8, $E8D8
    LDX   LIST_$65_UNK
L_0018DA: ; 0x0018DA, $E8DA
    BEQ   L_0018F0
    LDD   4,X
    BEQ   L_0018EC
    LDA   20,X
    CMPA  #$02
    BHS   L_0018EC
    JSR   [8,X]
    BRA   L_0018D8
L_0018EC: ; 0x0018EC, $E8EC
    LDX   X
    BRA   L_0018DA
L_0018F0: ; 0x0018F0, $E8F0
    LDU   R_A063_PTR_TO_OTHER_LIST
    LDA   #$04
    STA   7,U
L_0018F6: ; 0x0018F6, $E8F6
    COM   $A026
    LDA   #$02
    LDX   #$E900
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
    DEC   7,U
    BNE   L_0018F6
L_001904: ; 0x001904, $E904
    LDA   #$0A
    LDX   #$E90C
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
    LDA   WGT_DATA_A_RAM_COPY
    BITA  #$04
    BNE   L_001904
    LDA   #$0A
    LDX   #$E91A
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
    CLR   $A09A
L_00191C: ; 0x00191C, $E91C
    JMP   OBJ_X@A063_REMOVED_FROM_A05F+HANDLED
    LDA   $A0BA
    BITA  #$FD
    LBNE  L_0019BC
    LDA   #$77
    STA   $A0BA
    JSR   CLEAR_GAME_SCREEN
    LDA   #$0F
    LDX   #$E936
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
L_001936: ; 0x001936, $E936
    LDX   LIST_$6D_UNK
    BEQ   L_00193F
    JSR   REMOVE_X_FROM_LIST_A06D
    BRA   L_001936
L_00193F: ; 0x00193F, $E93F
    CLR   $A099
    LDD   A0DF_RAND_BYTE
    STD   $A020
    STD   $A022
    LSRB
    BHS   L_001952
    LDD   #$2000
    LDX   #$0300
    BRA   L_001958
L_001952: ; 0x001952, $E952
    LDX   #$FD00
    LDD   #$7000
L_001958: ; 0x001958, $E958
    STD   $A0C3
    STX   $A0BB
    LDB   A0E0_RAND_WORD
    LSRB
    ADDB  #$2A
    STB   PLAYER.VPOS
    STD   $A0C1
    CLRA
    CLRB
    STA   $A0C9
    STD   $A0C7
    STD   PLAYER_V_MOMENTUM
    JSR   GOTO_B7-C000
    LDB   #$50
    JSR   A_FROM_A0FA,B_OR'D_CONDITIONALLY
    JSR   FILL_OUT_NEW_OBJ_IN_X_WITH_DATA[6]_PAST_JSR
    ADCB  $C1ED
    CMPX  R_0000
    LDD   #$0000
    STD   14,X
    STD   16,X
    LDD   PLAYER.VPOS
    STD   12,X
    LDD   $A0C3
    LSRA
    RORB
    LSRA
    RORB
    ADDD  $A020
    STD   10,X
    LDA   $A0BB
    BPL   L_00199D
    LDU   #$F9CB
    STU   2,X
L_00199D: ; 0x00199D, $E99D
    LDU   R_A063_PTR_TO_OTHER_LIST
    STX   7,U
    JSR   JMP_TO_REPLACES_HANDLER_AND_DOES_ALOT
    LDA   #$28
    LDX   #$E9AC
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
    LDX   7,U
    JSR   L_0023FB
    JSR   A_FROM_A0FA,B_CLEARED_OR_2
    LDA   A0E0_RAND_WORD+1
    CMPA  #$C0
    LBHI  L_000A46
L_0019BC: ; 0x0019BC, $E9BC
    JMP   OBJ_X@A063_REMOVED_FROM_A05F+HANDLED
CALLBACK_UNK: ; 0x0019BF, $E9BF
    LDX   $A09F
    LEAX  1,X
    CMPX  #$A182
    BLS   L_0019CB
    LDX   #$A162
L_0019CB: ; 0x0019CB, $E9CB
    STX   $A09F
    LDX   $A0A8
    LEAX  1,X
    CMPX  #$A1BA
    BLS   L_0019D9
    LDX   #$A1A2
L_0019D9: ; 0x0019D9, $E9D9
    STX   $A0A8
    LDA   #$04
    LDX   #$E9BF
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
CALLBACK_UNK: ; 0x0019E3, $E9E3
    JSR   L_001A33
    LDA   #$02
    LDX   #$E9EE
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
    JSR   L_001A0A
    JSR   L_00156A
    LDA   #$02
    LDX   #$E9FC
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
    JSR   BANKSWITCH_TO_1
    JSR   PALETTE_ENTRY_0x3
    LDA   #$04
    LDX   #$E9E3
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
L_001A0A: ; 0x001A0A, $EA0A
    LDD   $A020
    SUBD  #$0C80
    STD   A073_LOOP_CNT_HUMANOID/MISC?
    LDX   #$A065
    BRA   L_001A2C
L_001A16: ; 0x001A16, $EA16
    LDD   10,X
    SUBD  A073_LOOP_CNT_HUMANOID/MISC?
    CMPD  #$3E80
    BLO   L_001A2C
    LDU   X
    STU   Y
    LDU   LIST_$6B_UNK
    STU   X
    STX   LIST_$6B_UNK
    LEAX  Y
L_001A2C: ; 0x001A2C, $EA2C
    LEAY  X
    LDX   X
    BNE   L_001A16
    RTS
L_001A33: ; 0x001A33, $EA33
    LDD   $A020
    SUBD  #$0C80
    STD   A073_LOOP_CNT_HUMANOID/MISC?
    LDX   #$A06B
    BRA   L_001A78
L_001A3F: ; 0x001A3F, $EA3F
    LDD   16,X
    ASLB
    ROLA
    ASLB
    ROLA
    ASLB
    ROLA
    ADDD  12,X
    CMPA  #$2A
    BHS   L_001A50
    LDA   #$F0
L_001A50: ; 0x001A50, $EA50
    CMPA  #$F0
    BLS   L_001A56
    LDA   #$2A
L_001A56: ; 0x001A56, $EA56
    STD   12,X
    LDD   14,X
    ASLB
    ROLA
    ASLB
    ROLA
    ASLB
    ROLA
    ADDD  10,X
    STD   10,X
    SUBD  A073_LOOP_CNT_HUMANOID/MISC?
    CMPD  #$3E80
    BHS   L_001A78
    LDU   X
    STU   Y
    LDU   LIST_$65_UNK
    STU   X
    STX   LIST_$65_UNK
    LEAX  Y
L_001A78: ; 0x001A78, $EA78
    LEAY  X
    LDX   X
    BNE   L_001A3F
    RTS
    NEGA
L_001A80: ; 0x001A80, $EA80
    LDX   #$EAB4
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LEAU  X
    JSR   FILL_OUT_NEW_OBJ_IN_X_WITH_DATA[6]_PAST_JSR
    .db $F9
    .db $A3
    .db $EB
    .db $2B
    .db $33
    .db $33
    STX   7,U
    STU   6,X
    LDD   A0DF_RAND_BYTE
    ANDA  #$1F
    ADDD  $A020
    STD   10,X
    LSRB
    ADDB  #$2A
    STB   12,X
    CLRA
    CLRB
    STD   16,X
    STD   14,X
    LDA   #$08
    STA   9,U
    BSR   L_001AF5
    JMP   JMP_TO_REPLACES_HANDLER_AND_DOES_ALOT
    LDX   7,U
    LDD   2,X
    CMPD  #$F8EC
    BEQ   L_001AE6
    DEC   9,U
    BNE   L_001AD5
    LDA   R_A110
    JSR   GET_NEW_A_THAT_IS_<=_CURRENT
    STA   9,U
    JSR   L_001EBA
    BEQ   L_001AD5
    LDD   #$D52F
    JSR   SET_A0B0-A0B3_WHEN_@D>A0B2
L_001AD5: ; 0x001AD5, $EAD5
    LDU   2,X
    LEAU  10,U
    CMPU  #$F9B7
    BLS   L_001AE4
    LDU   #$F9A3
    BSR   L_001AEE
L_001AE4: ; 0x001AE4, $EAE4
    STU   2,X
L_001AE6: ; 0x001AE6, $EAE6
    LDA   #$06
    LDX   #$EAB4
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
L_001AEE: ; 0x001AEE, $EAEE
    LDA   A0DF_RAND_BYTE
    CMPA  R_A111
    BLS   L_001B2A
L_001AF5: ; 0x001AF5, $EAF5
    LDD   #$4001
    STD   A073_LOOP_CNT_HUMANOID/MISC?
    LDD   10,X
    SUBD  $A0CC
    BMI   L_001B02
    NEG   A073_LOOP_CNT_HUMANOID/MISC?
L_001B02: ; 0x001B02, $EB02
    ADDD  #$0280
    CMPD  #$0500
    BLS   L_001B12
    LDB   A073_LOOP_CNT_HUMANOID/MISC?
    SEX
    ADDD  $A0C7
    STD   14,X
L_001B12: ; 0x001B12, $EB12
    LDA   12,X
    SUBA  $A0C0
    BMI   L_001B1A
    NEG   $A074
L_001B1A: ; 0x001B1A, $EB1A
    ADDA  #$0A
    CMPA  #$14
    BLS   L_001B2A
    CLRB
    LDA   $A074
    ADDD  PLAYER_V_MOMENTUM
    ASRA
    RORB
    STD   16,X
L_001B2A: ; 0x001B2A, $EB2A
    RTS
    DEC   R_A119
    JSR   L_002416
    .db $01 ; Illegal instruction. 1 byte.
    .db $20
    .db $D4
    .db $FD
    .db $39
L_001B36: ; 0x001B36, $EB36
    STA   A073_LOOP_CNT_HUMANOID/MISC?
L_001B38: ; 0x001B38, $EB38
    JSR   FILL_OUT_NEW_OBJ_IN_X_WITH_DATA[6]_PAST_JSR
    EORB  $F7EB
    LSR   $CCCC
    JSR   RANDOM_VALUE_FWD+IN_A
    LDD   A0E0_RAND_WORD
    ANDA  #$3F
    ADDA  #$10
    STD   10,X
    LSRB
    ADDB  #$2A
    STB   12,X
    LDB   A0DF_RAND_BYTE
    ANDB  #$3F
    ADDB  #$E0
    SEX
    STD   14,X
    LDB   A0E0_RAND_WORD+1
    ANDB  #$7F
    SUBB  #$40
    SEX
    BMI   L_001B67
    ORB   #$20
    BRA   L_001B69
L_001B67: ; 0x001B67, $EB67
    ANDB  #$DF
L_001B69: ; 0x001B69, $EB69
    STD   16,X
    JSR   JMP_TO_REPLACES_HANDLER_AND_DOES_ALOT
    DEC   A073_LOOP_CNT_HUMANOID/MISC?
    BNE   L_001B38
    RTS
    JSR   L_00241D
    .db $02
    .db $10
    .db $D4
    .db $F3
    LDA   #$06
    JSR   GET_NEW_A_THAT_IS_<=_CURRENT
    LEAY  X
    JSR   UNK_MAKE_OBJ_DETAILS_FROM_OBJ@Y?
    DEC   R_A114_ENEMY_IDK_COUNT
    RTS
RANDOM_WORD_TO_OBJ_X_[14],[16]: ; 0x001B89, $EB89
    JSR   RANDOM_VALUE_FWD+IN_A ; Move random
    LDB   A0DF_RAND_BYTE ; Get random in B
    SEX ; Extend B into A
    ASLB ; Shift
    ROLA ; Shift
    STD   16,X ; Store to OBJ[16]
    LDB   A0E0_RAND_WORD+1 ; Get random again
    ANDB  #$3F ; Get bottom bits.
    ADDB  #$E0 ; Add val
    SEX ; Extend again
    STD   14,X ; Store to OBJ[14]
    RTS
UNK_MAKE_OBJ_DETAILS_FROM_OBJ@Y?: ; 0x001B9E, $EB9E
    PSHS  U,Y,X,B,A
    STA   A073_LOOP_CNT_HUMANOID/MISC? ; Store A to loop count
LOOP_MAKE_THIS_OBJ: ; 0x001BA2, $EBA2
    LDA   R_A116_ENEMY_IDK_COUNT ; Load val
    INCA ; Inc
    CMPA  #$14 ; If A _ #$14
    BHI   RTS ; >, GOTO
    STA   R_A116_ENEMY_IDK_COUNT ; Store back
L_001BAD: ; 0x001BAD, $EBAD
    LDX   #$EC17 ; Callback?
L_001BB0: ; 0x001BB0, $EBB0
    LDA   #$00 ; Type?
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP ; Setup
    LEAU  X ; Save X in U
    JSR   FILL_OUT_NEW_OBJ_IN_X_WITH_DATA[6]_PAST_JSR
    .db $F9
    .db $7B
    .db $EB
    .db $E9
    .db $24
    .db $24
    LDD   10,Y ; OBJ[10] move. Not sure what Y is.
    STD   10,X
    LDD   12,Y ; OBJ[12] too
    STD   12,X
    STX   7,U ; Obj X ptr to OBJ[7] of U
    STU   6,X ; Obj U ptr to OBJ[6] of X
    BSR   RANDOM_WORD_TO_OBJ_X_[14],[16] ; Get random.
    LDD   A0E0_RAND_WORD ; Get random word.
    ANDB  R_A10E ; And lower with val.
    STB   9,U ; Store to OBJ[9]
    ANDA  #$1F ; Get bottom bits of A
    STA   4,U ; Store to OBJ[4]
    LDA   R_A10D ; Load val
    JSR   GET_NEW_A_THAT_IS_<=_CURRENT
    STA   11,U ; Store to OBJ[11]
    STX   LIST_$65_UNK ; Add to this list.
    DEC   A073_LOOP_CNT_HUMANOID/MISC? ; Dec loop counter.
    BNE   LOOP_MAKE_THIS_OBJ
RTS: ; 0x001BE7, $EBE7
    PULS  A,B,X,Y,U,PC ; Leave
    DEC   R_A116_ENEMY_IDK_COUNT
    JSR   L_0023FB
    PSHS  X
    JSR   LIST_SEARCH_FOR_X_IN_OBJ[6]_AND_REMOVE_FROM_$A05F
    PULS  X
    LDD   10,X
    SUBD  #$0040
    STD   10,X
    LDD   12,X
    SUBA  #$02
    STA   12,X
    LDU   #$F8E2
    STU   2,X
    JSR   L_002C63
    LDD   #$0115
    JSR   SCORE_ADD_AB
    LDD   #$D516
    JMP   SET_A0B0-A0B3_WHEN_@D>A0B2
L_001C17: ; 0x001C17, $EC17
    LDX   7,U
    LDB   R_A10C
    LDY   $A0CC
    CMPY  10,X
    BHS   L_001C25
    NEGB
L_001C25: ; 0x001C25, $EC25
    SEX
    STD   14,X
    BRA   L_001C7E
    LDB   9,U
    LDX   7,U
    LDA   $A0C0
    CMPA  12,X
    BHI   L_001C35
    NEGB
L_001C35: ; 0x001C35, $EC35
    SEX
    ADDD  16,X
    CMPD  #$0200
    BLT   L_001C42
    LDD   #$0200
L_001C42: ; 0x001C42, $EC42
    CMPD  #$FE00
    BGT   L_001C4B
    LDD   #$FE00
L_001C4B: ; 0x001C4B, $EC4B
    STD   16,X
    COMA
    COMB
    ASLB
    ROLA
    ASLB
    ROLA
    TFR   A>B
    SEX
    ADDD  16,X
    STD   16,X
    LDB   A0DF_RAND_BYTE
    ANDB  #$1F
    ADDB  #$F0
    SEX
    ADDD  16,X
    STD   16,X
    LDD   $A0CC
    SUBD  10,X
    ADDD  #$12C0
    CMPD  #$2580
    BHI   L_001C17
    DEC   11,U
    BNE   L_001C7E
    JSR   L_001C86
L_001C7E: ; 0x001C7E, $EC7E
    LDA   #$03
    LDX   #$EC2A
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
L_001C86: ; 0x001C86, $EC86
    PSHS  X
    LDD   $A0CC
    SUBD  10,X
    EORA  14,X
    BMI   L_001CBF
    LEAY  X
    JSR   L_0013F3
    ANDB  [-1701,U]
    BITB  -2,X
    BEQ   L_001CBF
    LDD   14,Y
    ASLB
    ROLA
    ASLB
    ROLA
    ASLB
    ROLA
    STD   14,X
    LDD   #$D534
    JSR   SET_A0B0-A0B3_WHEN_@D>A0B2
    CLRB
    LDA   $A0C0
    SUBA  12,X
    ASRA
    RORB
    ASRA
    RORB
    ASRA
    RORB
    ASRA
    RORB
    ASRA
    RORB
    STD   16,X
L_001CBF: ; 0x001CBF, $ECBF
    LDA   R_A10D
    JSR   GET_NEW_A_THAT_IS_<=_CURRENT
    STA   11,U
    PULS  X,PC
CALLBACK_UNK: ; 0x001CC9, $ECC9
    LDX   7,U
    LEAX  2,X
    CMPX  #$A13A
    BLO   L_001CD5
    LDX   #$A11A
L_001CD5: ; 0x001CD5, $ECD5
    STX   7,U
    LDX   X
    BEQ   L_001D51
    LDD   4,X
    BEQ   L_001D51
    LDD   8,X
    CMPD  #$ED70
    BNE   L_001D51
    LDD   2,X
    CMPD  #$F90B
    BHI   L_001D1E
    LDA   A0DF_RAND_BYTE
    CMPA  #$08
    BLS   L_001D45
    JSR   L_001D59
    ADDA  #$04
    CMPA  #$E8
    BLS   L_001D00
    LDA   #$E8
L_001D00: ; 0x001D00, $ED00
    LDB   #$01
    CMPA  12,X
    BEQ   L_001D0D
    BHI   L_001D09
    NEGB
L_001D09: ; 0x001D09, $ED09
    ADDB  12,X
    STB   12,X
L_001D0D: ; 0x001D0D, $ED0D
    LDU   2,X
    LEAU  10,U
    CMPU  #$F90B
    BLS   L_001D1A
L_001D17: ; 0x001D17, $ED17
    LDU   #$F901
L_001D1A: ; 0x001D1A, $ED1A
    LDB   #$E0
    BRA   L_001D4A
L_001D1E: ; 0x001D1E, $ED1E
    LDA   A0DF_RAND_BYTE
    CMPA  #$08
    BLS   L_001D17
    BSR   L_001D59
    ADDA  #$0F
    CMPA  #$E8
    BLS   L_001D2E
    LDA   #$E8
L_001D2E: ; 0x001D2E, $ED2E
    LDB   #$01
    CMPA  12,X
    BEQ   L_001D3B
    BHI   L_001D37
    NEGB
L_001D37: ; 0x001D37, $ED37
    ADDB  12,X
    STB   12,X
L_001D3B: ; 0x001D3B, $ED3B
    LDU   2,X
    LEAU  10,U
    CMPU  #$F91F
    BLS   L_001D48
L_001D45: ; 0x001D45, $ED45
    LDU   #$F915
L_001D48: ; 0x001D48, $ED48
    LDB   #$20
L_001D4A: ; 0x001D4A, $ED4A
    STU   2,X
    SEX
    ADDD  10,X
    STD   10,X
L_001D51: ; 0x001D51, $ED51
    LDA   #$02
    LDX   #$ECC9
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
L_001D59: ; 0x001D59, $ED59
    PSHS  X,B
    LDD   10,X
    LSRA
    RORB
    LSRA
    RORB
    LSRA
    RORB
    LSRA
    RORB
    LSRA
    RORB
    LSRA
    RORB
    LDX   #$B300
    LDA   D,X
    PULS  B,X,PC
L_001D70: ; 0x001D70, $ED70
    LDA   $A0DE
    BEQ   L_001D77
    CLRA
    PULS  A,B,PC
L_001D77: ; 0x001D77, $ED77
    BSR   L_001DC4
    JSR   L_0023FB
    LDD   #$F8D8
    STD   2,X
    LDD   10,X
    SUBD  #$0040
    STD   10,X
    JSR   L_002C63
    LDD   #$D4E4
    JMP   SET_A0B0-A0B3_WHEN_@D>A0B2
    LDU   6,X
    BEQ   L_001D70
    LDA   $A0DE
    BEQ   L_001DBF
    LDD   2,U
    CMPD  #$F24C
    BEQ   L_001DB7
    LDD   #$D4DA
    JSR   SET_A0B0-A0B3_WHEN_@D>A0B2
    PSHS  X
    LDX   #$EE73
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LEAY  X
    PULS  X
    STX   7,Y
L_001DB7: ; 0x001DB7, $EDB7
    LDD   #$F24C
    STD   2,U
    CLRA
    PULS  A,B,PC
L_001DBF: ; 0x001DBF, $EDBF
    BSR   L_001D77
    JMP   LIST_SEARCH_FOR_X_IN_OBJ[6]_AND_REMOVE_FROM_$A05F
L_001DC4: ; 0x001DC4, $EDC4
    LEAY  X
    PSHS  U,X,A
    LDU   #$A11A
    LDA   #$40
L_001DCD: ; 0x001DCD, $EDCD
    CMPY  U++
    BEQ   L_001DD8
    DECA
    BNE   L_001DCD
    JSR   SYSTEM_PANIC
L_001DD8: ; 0x001DD8, $EDD8
    CLRA
    CLRB
    STD   -2,U
    DEC   A0FA_HUMANOID_COUNT?
    BNE   L_001DE8
    LDX   #$EDEA
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
L_001DE8: ; 0x001DE8, $EDE8
    PULS  A,X,U,PC
    LDA   $A0BA
    ORA   #$02
    STA   $A0BA
    CLR   7,U
    JSR   BANKSWITCH_TO_7
    JSR   PALETTE_ENTRY_0x9
    LDX   #$B125
    LDU   #$0000
    LDA   #$40
L_001E00: ; 0x001E00, $EE00
    STU   [X++]
    DECA
    BNE   L_001E00
L_001E05: ; 0x001E05, $EE05
    LDX   LIST_$67_UNUSED_OBJS?
    LDD   #$F9F1
    STD   2,X
    LDB   #$02
    STB   A073_LOOP_CNT_HUMANOID/MISC?
L_001E10: ; 0x001E10, $EE10
    JSR   RANDOM_VALUE_FWD+IN_A
    ANDA  #$3F
    ADDD  $A020
    STD   10,X
    JSR   L_001D59
    STA   12,X
    SUBA  #$0A
    JSR   L_002C63
    DEC   A073_LOOP_CNT_HUMANOID/MISC?
    BNE   L_001E10
    LDA   A0DF_RAND_BYTE
    ANDA  #$1F
    LDX   #$E799
    LDA   A,X
    STA   $A026
    LDD   #$D4E4
    JSR   SET_A0B0-A0B3_WHEN_@D>A0B2
    LDX   #$EE44
    LDA   #$02
L_001E3D: ; 0x001E3D, $EE3D
    LDB   #$08
    STB   $A05E
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
    CLR   $A026
    LDA   7,U
    LSRA
    LSRA
    LSRA
    INCA
    JSR   GET_NEW_A_THAT_IS_<=_CURRENT
    LDX   #$EE54
    BRA   L_001E3D
    INC   7,U
    LDA   7,U
    CMPA  #$10
    BNE   L_001E05
    LDD   #$D4C7
    JSR   SET_A0B0-A0B3_WHEN_@D>A0B2
    JMP   OBJ_X@A063_REMOVED_FROM_A05F+HANDLED
    JSR   FILL_OUT_NEW_OBJ_IN_X_WITH_DATA[6]_PAST_JSR
    ADCB  L_000DED
    CMPX  R_0000
    LDD   #$0125
    BRA   L_001E7F
    JSR   FILL_OUT_NEW_OBJ_IN_X_WITH_DATA[6]_PAST_JSR
    ADCB  L_0017ED
    CMPX  R_0000
    LDD   #$0150
L_001E7F: ; 0x001E7F, $EE7F
    JSR   SCORE_ADD_AB
CALLBACK_UNK: ; 0x001E82, $EE82
    LDY   7,U
    LDD   $A0C7
    STD   14,X
    LDD   #$0000
    STD   16,X
    LDA   #$11
    STA   20,X
    LDD   10,Y
    STD   10,X
    LDD   12,Y
    BMI   L_001EA1
    ADDD  #$1800
    BRA   L_001EA4
L_001EA1: ; 0x001EA1, $EEA1
    SUBD  #$2000
L_001EA4: ; 0x001EA4, $EEA4
    STD   12,X
    STX   LIST_$65_UNK
    STX   7,U
    LDA   #$32
    LDX   #$EEB2
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
    LDX   7,U
    JSR   L_0023FB
    JMP   OBJ_X@A063_REMOVED_FROM_A05F+HANDLED
L_001EBA: ; 0x001EBA, $EEBA
    PSHS  X
    JSR   L_0013F3
    ANDB  [-1701,U]
    BITB  -2,X
    BEQ   L_001EFC
    LDB   A0DF_RAND_BYTE
    ANDB  #$1F
    ADDB  #$F0
    ADDB  $A0BF
    SUBB  4,X
    SEX
    ASLB
    ROLA
    ASLB
    ROLA
    STD   14,X
    LDB   A0DF_RAND_BYTE
    CMPB  #$78
    BLS   L_001EE8
    LDD   $A0C7
    ASLB
    ROLA
    ASLB
    ROLA
    ADDD  14,X
    STD   14,X
L_001EE8: ; 0x001EE8, $EEE8
    LDB   A0E0_RAND_WORD+1
    ANDB  #$1F
    ADDB  #$F0
    ADDB  $A0C0
    SUBB  5,X
    SEX
    ASLB
    ROLA
    ASLB
    ROLA
    STD   16,X
    LDA   #$01
L_001EFC: ; 0x001EFC, $EEFC
    PULS  X,PC
L_001EFE: ; 0x001EFE, $EEFE
    DEC   13,U
    BNE   L_001F14
    LDA   R_A105
    JSR   GET_NEW_A_THAT_IS_<=_CURRENT
    STA   13,U
    BSR   L_001EBA
    BEQ   L_001F14
    LDD   #$D525
    JSR   SET_A0B0-A0B3_WHEN_@D>A0B2
L_001F14: ; 0x001F14, $EF14
    RTS
L_001F15: ; 0x001F15, $EF15
    PSHS  A ; Save A
    STA   A073_LOOP_CNT_HUMANOID/MISC? ; Loop counter
LOOP_MAKE_ENEMY_IDK: ; 0x001F19, $EF19
    LDX   #$F15E ; Handler
    LDA   #$00 ; Type
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP ; Make obj
    LEAU  X ; Obj to U
    JSR   FILL_OUT_NEW_OBJ_IN_X_WITH_DATA[6]_PAST_JSR ; Data to it.
    .db $F8
    .db $CE
    .db $EF
    .db $6D
    .db $CC
    .db $33
    JSR   RANDOM_VALUE_FWD+IN_A ; Get random
    LDD   $A020 ; Load
    SUBD  #$2580 ; Subtract
    STD   $A075 ; Store
    LDD   A0E0_RAND_WORD ; Loasd
    SUBD  $A075 ; Sub
    CMPD  #$4B00 ; Compare to val
    BHS   DONT_ADD_8000
    ADDD  #$8000 ; Add
DONT_ADD_8000: ; 0x001F43, $EF43
    ADDD  $A075 ; Add always
    STD   10,X ; Store to OBJ[10]
    LDA   A0DF_RAND_BYTE ; Random
    LSRA ; Shift
    ADDA  #$2A ; Add
    STA   12,X ; Store to OBJ[12]
    CLRA ; Clear D
    CLRB
    STD   16,X ; Clear OBJ[16]
    STD   14,X ; Clear OBJ[14]
    LDA   R_A10B ; Load val
    JSR   GET_NEW_A_THAT_IS_<=_CURRENT ; Get <= val
    STA   7,U ; Store to OBJ[7]
    JSR   JMP_TO_REPLACES_HANDLER_AND_DOES_ALOT ; Do sub, idfk what it actually does.
    STU   6,X ; Store OBJ U to OBJ[6]@X
    STX   7,U ; Store OBJ X to OBJ[7]@U
    INC   R_A115_ENEMY_IDK_COUNT ; Inc enemy count
    DEC   A073_LOOP_CNT_HUMANOID/MISC?
    BNE   LOOP_MAKE_ENEMY_IDK
    PULS  A,PC
    DEC   R_A115_ENEMY_IDK_COUNT
    JSR   L_002416
    .db $01 ; illegal instx2, 1 byte each
    .db $15
    ANDB  $A0F8
    RTS
L_001F78: ; 0x001F78, $EF78
    PSHS  X
    LDA   A0FA_HUMANOID_COUNT?
    BEQ   L_001F9A
    LDX   $A09B
L_001F80: ; 0x001F80, $EF80
    LEAX  2,X
    CMPX  #$A15A
    BLO   L_001F8A
    LDX   #$A11A
L_001F8A: ; 0x001F8A, $EF8A
    LDD   X
    BNE   L_001F94
    CMPX  $A09B
    BNE   L_001F80
    PULS  X,PC
L_001F94: ; 0x001F94, $EF94
    STX   $A09B
    STD   9,U
    STX   11,U
L_001F9A: ; 0x001F9A, $EF9A
    PULS  X,PC
L_001F9C: ; 0x001F9C, $EF9C
    PSHS  A
    STA   A073_LOOP_CNT_HUMANOID/MISC?
L_001FA0: ; 0x001FA0, $EFA0
    TST   A0FA_HUMANOID_COUNT?
    BNE   L_001FA7
    JMP   LOOP_MAKE_ENEMY_IDK
L_001FA7: ; 0x001FA7, $EFA7
    LDX   #$EFF6
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LEAU  X
    JSR   FILL_OUT_NEW_OBJ_IN_X_WITH_DATA[6]_PAST_JSR
    .db $F9
    .db $85
    .db $F2
    .db $0B
    .db $44
    .db $33
    JSR   RANDOM_VALUE_FWD+IN_A
    LDD   A0E0_RAND_WORD
    STD   10,X
    LDA   #$2C
    STA   12,X
    LDD   R_A103
    STD   16,X
    LDA   R_A105
    JSR   GET_NEW_A_THAT_IS_<=_CURRENT
    STA   13,U
    LDA   R_A102
    JSR   GET_NEW_A_THAT_IS_<=_CURRENT
    TFR   A>B
    CLRA
    BITB  #$01
    BEQ   L_001FE2
    COMB
    COMA
L_001FE2: ; 0x001FE2, $EFE2
    STD   14,X
    STU   6,X
    JSR   JMP_TO_REPLACES_HANDLER_AND_DOES_ALOT
    STX   7,U
    BSR   L_001F78
    INC   R_A112_ENEMY_IDK_COUNT
    DEC   A073_LOOP_CNT_HUMANOID/MISC?
    BNE   L_001FA0
    PULS  A,PC
    LDX   7,U
    LDY   9,U
    LDD   [11,U]
    BEQ   L_002016
    LDA   9,Y
    CMPA  #$70
    BNE   L_002016
    LDA   10,X
    ANDA  #$FC
    STA   A073_LOOP_CNT_HUMANOID/MISC?
    LDA   10,Y
    ANDA  #$FC
    CMPA  A073_LOOP_CNT_HUMANOID/MISC?
    BEQ   L_002065
    BRA   L_002025
L_002016: ; 0x002016, $F016
    LDA   20,X
    ANDA  #$FE
    STA   20,X
    JSR   L_001F78
    LBEQ  L_00213E
L_002025: ; 0x002025, $F025
    JSR   L_001D59
    SUBA  #$32
    SUBA  12,X
    BHI   L_00203D
    CMPA  #$EC
    BLT   L_002036
    CLRA
    CLRB
    BRA   L_002040
L_002036: ; 0x002036, $F036
    LDD   R_A103
    COMA
    COMB
    BRA   L_002040
L_00203D: ; 0x00203D, $F03D
    LDD   R_A103
L_002040: ; 0x002040, $F040
    STD   16,X
    LDD   2,X
    CMPD  #$F8EC
    BEQ   L_00205D
    JSR   L_001EFE
    LDU   2,X
    LEAU  10,U
    CMPU  #$F999
    BLS   L_00205B
    LDU   #$F985
L_00205B: ; 0x00205B, $F05B
    STU   2,X
L_00205D: ; 0x00205D, $F05D
    LDA   #$06
    LDX   #$EFF6
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
L_002065: ; 0x002065, $F065
    CLRA
    CLRB
    INC   20,X
    STD   14,X
    STD   16,X
    LDD   #$F985
    STD   2,X
    LDX   7,U
    LDY   9,U
    LDD   [11,U]
    BEQ   L_002016
    LDA   9,Y
    CMPA  #$70
    BNE   L_002016
    LDD   10,Y
    ANDB  #$E0
    STD   $A075
    LDD   10,X
    ANDB  #$E0
    CMPD  $A075
    BEQ   L_0020A0
    BLT   L_002099
    LDB   #$E0
    BRA   L_00209B
L_002099: ; 0x002099, $F099
    LDB   #$20
L_00209B: ; 0x00209B, $F09B
    SEX
    ADDD  10,X
    STD   10,X
L_0020A0: ; 0x0020A0, $F0A0
    LDA   12,Y
    SUBA  #$0C
    CMPA  12,X
    BEQ   L_0020BE
    LDD   R_A103
    BHS   L_0020AF
    COMA
    COMB
L_0020AF: ; 0x0020AF, $F0AF
    ADDD  12,X
    STD   12,X
L_0020B3: ; 0x0020B3, $F0B3
    JSR   L_001EFE
    LDA   #$01
    LDX   #$F074
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
L_0020BE: ; 0x0020BE, $F0BE
    LDD   10,X
    ADDD  #$0040
    SUBD  10,Y
    CMPD  #$0080
    BHI   L_0020B3
    LDD   #$F1E0
    STD   8,X
    LDD   R_A103
    COMB
    COMA
    STD   16,X
    STD   16,Y
    LDD   #$D50C
    JSR   SET_A0B0-A0B3_WHEN_@D>A0B2
    LDD   #$ED91
    STD   8,Y
    LDU   R_A063_PTR_TO_OTHER_LIST
    LDX   7,U
    LDA   12,X
    CMPA  #$32
    BLS   L_0020FB
    JSR   L_001EFE
    LDA   #$04
    LDX   #$F0E6
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
L_0020FB: ; 0x0020FB, $F0FB
    LDD   #$D511
    JSR   SET_A0B0-A0B3_WHEN_@D>A0B2
    LDX   7,U
    LDY   9,U
    LDD   [11,U]
    BNE   L_002116
    JSR   L_0023FB
    DEC   R_A112_ENEMY_IDK_COUNT
    INC   R_A0FB_ENEMY_IDK_COUNT
    JMP   OBJ_X@A063_REMOVED_FROM_A05F+HANDLED
L_002116: ; 0x002116, $F116
    CLRA
    CLRB
    STD   16,X
    STD   16,Y
    LDA   12,Y
    CMPA  12,X
    BLS   L_002133
    DEC   12,Y
    LDA   #$12
    JSR   WRITE_ROM_PIA_DATA_REGS_W/_#$3F_AND_B
    LDA   #$01
    LDX   #$F101
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
L_002133: ; 0x002133, $F133
    LEAX  Y
    LDD   4,Y
    ADDA  #$01
    STD   $A0F8
    JSR   L_001D77
L_00213E: ; 0x00213E, $F13E
    DEC   R_A112_ENEMY_IDK_COUNT
    INC   R_A115_ENEMY_IDK_COUNT
    LDX   7,U
    CLR   20,X
    LDD   #$F8CE
    STD   2,X
    LDD   #$CC33
    STD   18,X
    LDD   #$EF6D
    STD   8,X
    LDA   R_A10B
    STA   9,U
    LDX   7,U
    LDB   R_A10A
    LDY   $A0CC
    CMPY  10,X
    BGE   L_00216C
    NEGB
L_00216C: ; 0x00216C, $F16C
    SEX
    STD   14,X
    LDD   $A0CC
    SUBD  10,X
    ADDD  #$017C
    CMPD  #$0700
    BLS   L_00219D
    LDA   $A0C0
    SUBA  12,X
    BLS   L_00218D
    CMPA  #$08
    BHI   L_002191
    LDD   R_A108
    COMA
    COMB
    BRA   L_002198
L_00218D: ; 0x00218D, $F18D
    CMPA  #$F8
    BGT   L_002195
L_002191: ; 0x002191, $F191
    CLRA
    CLRB
    BRA   L_002198
L_002195: ; 0x002195, $F195
    LDD   R_A108
L_002198: ; 0x002198, $F198
    STD   16,X
    BRA   L_0021AF
L_00219D: ; 0x00219D, $F19D
    LDA   $A0C0
    CMPA  12,X
    LDD   R_A108
    BHS   L_0021A8
    COMA
    COMB
L_0021A8: ; 0x0021A8, $F1A8
    STD   16,X
    LDD   4,X
    BEQ   L_0021D8
L_0021AF: ; 0x0021AF, $F1AF
    LDB   R_A107
    LDA   A0DF_RAND_BYTE
    BMI   L_0021B7
    NEGB
L_0021B7: ; 0x0021B7, $F1B7
    ADDB  12,X
    CMPB  #$2A
    BHS   L_0021BF
    LDB   #$F0
L_0021BF: ; 0x0021BF, $F1BF
    STB   12,X
    DEC   9,U
    BNE   L_0021D8
    LDA   R_A10B
    JSR   GET_NEW_A_THAT_IS_<=_CURRENT
    STA   9,U
    JSR   L_001EBA
    BEQ   L_0021D8
    LDD   #$D52A
    JSR   SET_A0B0-A0B3_WHEN_@D>A0B2
L_0021D8: ; 0x0021D8, $F1D8
    LDA   #$03
    LDX   #$F15E
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
    LDU   6,X
    LDD   [11,U]
    BEQ   L_00220B
    LDD   #$0000
    LDD   #$0000
    PSHS  X
    LDX   #$F216
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LDU   9,U
    STU   7,X
    LDD   #$D4E9
    JSR   SET_A0B0-A0B3_WHEN_@D>A0B2
    LDD   #$0000
    STD   16,U
    STX   6,U
    PULS  X
L_00220B: ; 0x00220B, $F20B
    DEC   R_A112_ENEMY_IDK_COUNT
    JSR   L_002416
    .db $01
    .db $15
    .db $D5
    .db $07
    RTS
    LDX   7,U
    LDD   #$0008
    ADDD  16,X
    CMPD  #$0300
    BHS   L_002227
    STD   16,X
L_002227: ; 0x002227, $F227
    JSR   L_001D59
    CMPA  12,X
    BHI   L_002244
    LDD   16,X
    CMPD  #$00E0
    BLS   L_002270
    LDD   4,X
    ADDD  #$0107
    STD   $A0F8
    JSR   L_001D77
    JMP   OBJ_X@A063_REMOVED_FROM_A05F+HANDLED
L_002244: ; 0x002244, $F244
    LDA   #$04
    LDX   #$F216
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
    LDX   7,U
    LDD   #$0000
    STD   16,X
    LDA   PLAYER.VPOS
    ADDA  #$0A
    STA   12,X
    LDD   $A0CC
    ADDD  #$0080
    STD   10,X
    JSR   L_001D59
    CMPA  12,X
    BLO   L_002277
    LDA   #$01
    LDX   #$F24C
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
L_002270: ; 0x002270, $F270
    PSHS  X
    LDX   #$EE65
    BRA   L_00227C
L_002277: ; 0x002277, $F277
    PSHS  X
    LDX   #$EE73
L_00227C: ; 0x00227C, $F27C
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LEAY  X
    PULS  X
    STX   7,Y
    LDD   #$0000
    STD   6,X
    STD   16,X
    LDD   #$ED70
    STD   8,X
    LDD   #$D4DF
    JSR   SET_A0B0-A0B3_WHEN_@D>A0B2
    JMP   OBJ_X@A063_REMOVED_FROM_A05F+HANDLED
L_00229D: ; 0x00229D, $F29D
    STA   A073_LOOP_CNT_HUMANOID/MISC?
    LDB   R_A106
    COM   $A0AA
    BMI   L_0022A7
    NEGB
L_0022A7: ; 0x0022A7, $F2A7
    STB   $A074
    LDX   #$F2F7
    LDA   #$00
    JSR   LIST_REMOVE_AND_INIT+IDK
    LEAU  X
    LDA   A073_LOOP_CNT_HUMANOID/MISC?
    STA   15,U
    CLRA
    CLRB
    STD   7,U
    STD   9,U
    STD   11,U
    STD   13,U
L_0022C1: ; 0x0022C1, $F2C1
    JSR   FILL_OUT_NEW_OBJ_IN_X_WITH_DATA[6]_PAST_JSR
    ADCB  R_29F3
    CMPX  R_8888
    LDB   $A074
    SEX
    STD   14,X
    CLRA
    CLRB
    STD   16,X
    LDA   A073_LOOP_CNT_HUMANOID/MISC?
    LSRA
    RORB
    ADDA  A073_LOOP_CNT_HUMANOID/MISC?
    ADDD  $A0CC
    ADDA  #$80
    STD   10,X
    LDA   #$50
    STA   12,X
    STA   16,U
    STU   6,X
    STX   LIST_$65_UNK
    LDA   A073_LOOP_CNT_HUMANOID/MISC?
    ASLA
    ADDA  #$05
    STX   A,U
    DEC   A073_LOOP_CNT_HUMANOID/MISC?
    BNE   L_0022C1
    RTS
    LDA   A0DF_RAND_BYTE
    ANDA  #$06
    ADDA  #$07
    LDX   A,U
    LBEQ  L_0023B4
    LDB   A0DF_RAND_BYTE
    LDA   #$0A
    ANDB  #$3F
    ADDB  #$E0
    BMI   L_00230E
    NEGA
L_00230E: ; 0x00230E, $F30E
    LDY   2,X
    LEAY  A,Y
    CMPY  #$F929
    BHS   L_00231D
    LDY   #$F929
L_00231D: ; 0x00231D, $F31D
    CMPY  #$F947
    BLS   L_002327
    LDY   #$F947
L_002327: ; 0x002327, $F327
    STY   2,X
    SEX
    ADDD  16,X
    STD   16,X
    ASLB
    ROLA
    ASLB
    ROLA
    ASLB
    ROLA
    TFR   A>B
    NEGB
    SEX
    ADDD  16,X
    STD   16,X
    LDA   5,X
    BNE   L_002380
    LDA   A0DF_RAND_BYTE
    CMPA  #$40
    BHI   L_002361
    ANDA  #$03
    ADDA  #$FE
    ADDA  16,U
    CMPA  #$40
    BHS   L_002358
    LDA   #$40
L_002358: ; 0x002358, $F358
    CMPA  #$68
    BLO   L_00235E
    LDA   #$68
L_00235E: ; 0x00235E, $F35E
    STA   16,U
L_002361: ; 0x002361, $F361
    LDA   16,U
    SUBA  12,X
    ADDA  #$10
    CMPA  #$20
    BLS   L_0023B4
    SUBA  #$10
    BMI   L_002375
    LDD   #$FFF0
    BRA   L_002378
L_002375: ; 0x002375, $F375
    LDD   #$0010
L_002378: ; 0x002378, $F378
    ADDD  16,X
    STD   16,X
    BRA   L_0023B4
L_002380: ; 0x002380, $F380
    SUBA  $A0C0
    BMI   L_002396
    CMPA  #$20
    BLO   L_00238D
    LDD   #$FFF0
    BRA   L_0023A6
L_00238D: ; 0x00238D, $F38D
    CMPA  #$10
    BHI   L_0023AC
    LDD   #$0010
    BRA   L_0023A6
L_002396: ; 0x002396, $F396
    CMPA  #$E0
    BGT   L_00239F
    LDD   #$0010
    BRA   L_0023A6
L_00239F: ; 0x00239F, $F39F
    CMPA  #$F0
    BLT   L_0023AC
    LDD   #$FFF0
L_0023A6: ; 0x0023A6, $F3A6
    ADDD  16,X
    STD   16,X
L_0023AC: ; 0x0023AC, $F3AC
    LDA   A0E0_RAND_WORD+1
    ANDA  #$07
    BNE   L_0023B4
    BSR   L_0023DC
L_0023B4: ; 0x0023B4, $F3B4
    LDA   #$01
    LDX   #$F2F7
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
    JSR   L_00241D
    .db $01
    .db $25
    .db $D5
    .db $02
    DEC   R_A113_ENEMY_IDK_COUNT
    LDU   6,X
    LEAY  7,U
L_0023CA: ; 0x0023CA, $F3CA
    CMPX  Y++
    BNE   L_0023CA
    CLRA
    CLRB
    STD   -2,Y
    DEC   15,U
    BNE   L_0023DB
    LEAX  U
    JSR   LIST_SEARCH_OBJ@X_IN_$A05F_TO_OTHER_LIST
L_0023DB: ; 0x0023DB, $F3DB
    RTS
L_0023DC: ; 0x0023DC, $F3DC
    LDA   $A099
    CMPA  #$0A
L_0023E0: ; 0x0023E0, $F3E0
    BHS   L_0023FA
    JSR   L_0013F3
    .db $E4
    .db $98
    .db $F9
    .db $5B
    BITB  -2,X
    BEQ   L_0023FA
    LDB   A0E0_RAND_WORD
    SEX
    ASLB
    ROLA
    LDA   A0DF_RAND_BYTE
    ANDA  #$1F
    INCA
    STA   21,X
L_0023FA: ; 0x0023FA, $F3FA
    RTS
L_0023FB: ; 0x0023FB, $F3FB
    JSR   REMOVE_X_FROM_LIST_A065|A06B
L_0023FE: ; 0x0023FE, $F3FE
    PSHS  U,Y,X,B,A
    JSR   BANKSWITCH_TO_2
    LDD   4,X
    LDY   2,X
    JSR   [8,Y]
    PULS  A,B,X,Y,U,PC
    PSHS  X
    JSR   LIST_SEARCH_FOR_X_IN_OBJ[6]_AND_REMOVE_FROM_$A05F
    PULS  X
    BRA   L_002420
L_002416: ; 0x002416, $F416
    PSHS  X
    JSR   LIST_SEARCH_FOR_X_IN_OBJ[6]_AND_REMOVE_FROM_$A05F
    PULS  X
L_00241D: ; 0x00241D, $F41D
    JSR   REMOVE_X_FROM_LIST_A065|A06B
L_002420: ; 0x002420, $F420
    PSHS  U,B,A
    LDU   4,S
    PULU  A,B
    JSR   SCORE_ADD_AB
    BSR   L_002434
    PULU  A,B
    STU   4,S
    JSR   SET_A0B0-A0B3_WHEN_@D>A0B2
    PULS  A,B,U,PC
L_002434: ; 0x002434, $F434
    PSHS  U,Y,X,B,A
    BSR   L_0023FE
    JSR   L_002C63
    PULS  A,B,X,Y,U,PC
CALLBACK_UNK: ; 0x00243D, $F43D
    LDX   #$F45B
L_002440: ; 0x002440, $F440
    STX   7,U
    LDA   #$06
    LDX   #$F44A
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
    LDX   7,U
    LDD   X++
    STD   $A033
    LDA   X+
    STA   $A035
    CMPX  #$F464
    BLO   L_002440
    BRA   CALLBACK_UNK
    CMPA  #$81
    BLE   L_0023E0
    BLE   L_002468
    BLE   L_0023E4
    .db $07
CALLBACK_UNK: ; 0x002464, $F464
    .db $86
    STU   R_9730
L_002468: ; 0x002468, $F468
    CLR   $A032
    LDA   #$03
    LDX   #$F472
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
    LDA   A0DF_RAND_BYTE
    ANDA  #$1F
    LDX   #$E799
    LDA   A,X
    STA   $A030
    STA   $A032
    LDX   #$CCB0
    CMPX  $A0A6
    BNE   L_002489
    LDX   #$CCBC
L_002489: ; 0x002489, $F489
    STX   $A0A6
    LDA   #$06
    LDX   #$F464
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
CALLBACK_UNK: ; 0x002493, $F493
    LDA   $A08A
    BNE   L_0024BB
    LDX   #$0F1C
    LDA   A08B_CURRENT_PLAYER
    DECA
    BEQ   L_0024A2
    LDX   #$711C
L_0024A2: ; 0x0024A2, $F4A2
    LDD   #$1808
    JSR   CLEAR_SCREEN_FLEX_SETUP
    LDA   #$08
    LDX   #$F4B0
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
    JSR   SCORE_TO_SCREEN
    LDA   #$0C
    LDX   #$F493
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
L_0024BB: ; 0x0024BB, $F4BB
    JMP   OBJ_X@A063_REMOVED_FROM_A05F+HANDLED
L_0024BE: ; 0x0024BE, $F4BE
    LDU   R_A063_PTR_TO_OTHER_LIST
    STX   13,U
    LDB   CURRENT_BANK
    STB   12,U
    LDX   #$F4CC
    JMP   SET_U2LIST,STORE_X2HANDLER+A2COUNTER,U.NEXT
    LDA   12,U
    BSR   BANKSWITCH_TO_A
    JMP   [13,U]
GOTO_PAST_JSR: ; 0x0024D3, $F4D3
    LEAS  -3,S ; Save 3 bytes of stack. FORMAT: [ptr,bank]
    PSHS  U,A ; STACK S 0:A 2:U 3-5:RSV 6:RTS
    LDA   CURRENT_BANK ; Get current bank.
    STA   5,S ; Save bank up stack.
    LDU   6,S ; Pull location from.
    LDA   2,U ; Pull bank going to into A.
    LDU   U ; Get ptr past JSR.
    STU   3,S ; Save on stack.
    BSR   BANKSWITCH_TO_A ; Goto bank past JSR.
    PULS  A,U ; Pull saved.
    JSR   [S] ; JSR to location past original JSR.
    PSHS  U,A ; Save new info.
    LDA   5,S ; Load bank from up stack.
    BSR   BANKSWITCH_TO_A ; Switch back to it.
    LDU   6,S ; Load location from.
    LEAU  3,U ; Add 3 to skip data.
    STU   6,S ; Store new RTS location.
    PULS  A,U ; Pull saved.
    LEAS  3,S ; Unreserve stack.
    RTS ; RTS
GOTO_B7-C000: ; 0x0024FA, $F4FA
    BSR   BANKSWITCH_TO_7
    JMP   JMP_TO_DOES_LOTS_IDFK
BANKSWITCH_TO_7: ; 0x0024FF, $F4FF
    LDA   #$07
    BRA   BANKSWITCH_TO_A
BANKSWITCH_TO_2: ; 0x002503, $F503
    LDA   #$02
    BRA   BANKSWITCH_TO_A
BANKSWITCH_TO_3: ; 0x002507, $F507
    LDA   #$03
    BRA   BANKSWITCH_TO_A
BANKSWITCH_TO_1: ; 0x00250B, $F50B
    LDA   #$01
BANKSWITCH_TO_A: ; 0x00250D, $F50D
    STA   CURRENT_BANK
    STA   BANKSWITCH
    RTS
PSH_ALL_GOTO_B2-C002: ; 0x002513, $F513
    PSHS  U,Y,X,DP,B,A,CC
    BSR   BANKSWITCH_TO_2
    JSR   $C002
    PULS  CC,A,B,DP,X,Y,U,PC
GOTO_B3-C00F_BOOKKEEP_UPDATE_+1: ; 0x00251C, $F51C
    BSR   BANKSWITCH_TO_3
    JMP   JMP_BOOKKEEP_UPDATE_+1
    RTS
GFX_BANK2_CHR_TO_SCREEN: ; 0x002522, $F522
    PSHS  U,Y,X,B,A ; Save state
    TFR   D>X ; TFR location to X
    LDA   CURRENT_BANK ; Get bank
    PSHS  A ; Save
    LDA   #$02 ; Switch to bank 2.
    STA   CURRENT_BANK
    STA   BANKSWITCH
    LDD   Y ; Get WWHH?
    LDY   2,Y ; LDY from Y
    PSHS  B,A ; Save from Y
    BITB  #$01 ; Test lowest bit...
    BNE   LOOP_ON_BBOUNDRY
LOOP_ON_WBOUNDRY: ; 0x00253C, $F53C
    SUBB  #$02 ; Taking 2
LOOP_NO_OFFSET: ; 0x00253E, $F53E
    LDU   B,Y ; Get data from Y+B
    STU   B,X ; Store to X+B
    SUBB  #$02
    BPL   LOOP_NO_OFFSET ; If next data exists.
    LDB   1,S ; Get A pushed to stack.
    LEAX  256,X ; Add 256 to X
    LEAY  B,Y ; Add offset from B, height?
    DECA ; Dec A normally.
    BNE   LOOP_ON_WBOUNDRY ; Loop if not done.
    BRA   POST_COL_DATA_MOVED
LOOP_ON_BBOUNDRY: ; 0x002553, $F553
    DECB ; -= consumed
    LDA   B,Y ; Get byte
    STA   B,X ; Store byte
    SUBB  #$02 ; Sub 2
    BMI   END_MOVE_COL
LOOP_ON_BBOUNDRY_WORD: ; 0x00255C, $F55C
    LDU   B,Y ; Get word
    STU   B,X ; Store word
    SUBB  #$02
    BPL   LOOP_ON_BBOUNDRY_WORD
END_MOVE_COL: ; 0x002564, $F564
    LDB   1,S ; Get A pushed onto stack.
    LEAX  256,X ; Add 256 to X
    LEAY  B,Y ; Y+=B
    DEC   S ; Decrease A on stack
    BNE   LOOP_ON_BBOUNDRY ; Loop if not written
POST_COL_DATA_MOVED: ; 0x002570, $F570
    LEAS  2,S ; Fix stack
    PULS  A ; Pull bank from.
    STA   CURRENT_BANK
    STA   BANKSWITCH ; Switch to bank.
    PULS  A,B,X,Y,U,PC ; RTS
GFX_BANK2_CHR_CLEAR: ; 0x00257B, $F57B
    PSHS  U,X,B,A ; Save
    TFR   D>X ; D is location on screen.
    LDA   CURRENT_BANK ; Get bank in.
    PSHS  A ; Save
    LDA   #$02 ; Switch to bank 2.
    STA   CURRENT_BANK ; Store val.
    STA   BANKSWITCH ; Switch
    LDD   Y ; Load with Y ptr, WWHH?
CLR_SCRN_SLOW_X=POS,A=W,B=H: ; 0x00258C, $F58C
    LDU   #$0000 ; Clearing value.
    PSHS  B ; Save loaded B, height
    BITB  #$01 ; Test bottom bit.
    BNE   B_BOUNDARY ; Is on byte boundary.
W_BOUNDARY: ; 0x002595, $F595
    SUBB  #$02 ; Taking 2
LOOP_CLEAR_W: ; 0x002597, $F597
    STU   B,X ; Clear X[B]
    SUBB  #$02 ; Wrote 2 rows.
    BPL   LOOP_CLEAR_W
    LDB   S ; Reset Y addition.
    LEAX  256,X ; Next col.
    DECA ; Dec A
    BNE   W_BOUNDARY ; Not done.
    BRA   EXIT_RESTORE_BANK ; Exit
B_BOUNDARY: ; 0x0025A8, $F5A8
    DECB ; One byte clearing.
    CLR   B,X ; Clear
    SUBB  #$02
    BMI   ONE_GOOD_ENOUGH ; If we under flow, one was all that was needed, since we said -2
MORE_ROWS_BYTE_WORD: ; 0x0025AF, $F5AF
    STU   B,X ; Clear 2 rows.
    SUBB  #$02 ; Did 2
    BPL   MORE_ROWS_BYTE_WORD ; Loop clear.
ONE_GOOD_ENOUGH: ; 0x0025B5, $F5B5
    LDB   S ; Reset Y addition.
    LEAX  256,X ; Next col.
    DECA ; More width?
    BNE   B_BOUNDARY ; Yes, loop this.
EXIT_RESTORE_BANK: ; 0x0025BE, $F5BE
    PULS  A,B ; Pull A=Y Off, B=Bank from. Expected.
    STB   CURRENT_BANK ; Store bank.
    STB   BANKSWITCH
    PULS  A,B,X,U,PC ; Restore state, RTS.
CLEAR_SCREEN_FLEX_SETUP: ; 0x0025C7, $F5C7
    PSHS  U,X,B,A ; Save. X=POS,A=W,B=H,U gets clobbered so save too.
    LDA   CURRENT_BANK ; RTN expects this.
    PSHS  A
    LDA   1,S ; Get A pushed onto stack originally.
    BRA   CLR_SCRN_SLOW_X=POS,A=W,B=H
CLEAR_ALL_SCREEN: ; 0x0025D1, $F5D1
    PSHS  U,Y,X,B,A
    LDU   #$9C00
    LDX   #$0000
    TFR   X>Y
    TFR   X>D
CLEAR_SCREEN_ALL_LOOP: ; 0x0025DD, $F5DD
    PSHU  Y,X,B,A
    PSHU  Y,X,B,A
    PSHU  Y,X,B,A
    PSHU  Y,X,B,A
    PSHU  Y,X,B,A
    PSHU  X
    CMPU  #$0000 ; All cleared
    BNE   CLEAR_SCREEN_ALL_LOOP ; If not end of screen.
    PULS  A,B,X,Y,U,PC ; restore, RTS
CLEAR_GAME_SCREEN: ; 0x0025F1, $F5F1
    PSHS  U,Y,X,DP,B,A
    LDU   #$9C00
    LDX   #$0000
    TFR   X>Y
    TFR   X>D
    TFR   A>DP
CLEAR_GAME_SCREEN_COL_LOOP: ; 0x0025FF, $F5FF
    LDB   #$08 ; loop count
CLEAR_COUNT_LOOP: ; 0x002601, $F601
    PSHU  Y,X,DP,A ; 6 rows.
    PSHU  Y,X,DP,A
    PSHU  Y,X,DP,A
    PSHU  Y,X,DP,A ; 24 rows.
    DECB
    BNE   CLEAR_COUNT_LOOP ; 192 rows.
    PSHU  Y,X,DP,A ; 198
    PSHU  Y,X,DP,A
    PSHU  Y,X,DP,A ; 210
    PSHU  Y,X ; 214
    LEAU  -42,U ; 256. Adjust to miss scanner.
    CMPU  #$0000 ; Is end?
    BNE   CLEAR_GAME_SCREEN_COL_LOOP ; No, keep looping.
    PULS  A,B,DP,X,Y,U,PC
DEFENDER_BOOTUP: ; 0x00261F, $F61F
    CLR   BANKSWITCH ; Set bankswitch to 0.
    LDX   #$CC00 ; Set to PIA's.
    CLR   1,X ; Clear data ctrl registers.
    CLR   3,X
    CLR   5,X
    CLR   7,X
    LDA   #$C0 ; Set top two bits. 1=Input, 0=Output.
    STA   X ; PIA-ROM-A-DATA
    LDA   #$FF ; Set all bits to input.
    STA   2,X ; PIA-ROM-B-DATA
    CLR   4,X ; PIA-WIG-A-DATA
    CLR   6,X ; PIA-WIG-B-DATA
    LDA   #$04 ; Set data to report.
    STA   3,X ; PIA-ROM-B-CTRL
    STA   5,X ; PIA-WIG-A-CTRL
    STA   7,X ; PIA-WIG-B-CTRL
    ORA   #$10 ; Set CTRL to interrupt on 0->1 transition.
    STA   1,X ; PIA-ROM-A-CTRL
    LDX   #$C000 ; Ptr, IO space.
    LDA   #$C0 ; Seed palette gen.
INITIAL_PALETTE_LOAD: ; 0x00264A, $F64A
    STA   X+ ; Store A/D Upper to palette.
    LDB   #$B5 ; Seed B
    MUL ; Figure next palette byte.
    CMPX  #$C010 ; Compare to end.
    BNE   INITIAL_PALETTE_LOAD
    ORCC  #$80 ; Set entire flag.
    ANDCC #$EF ; Enable IRQs, unmask.
    LDY   #$0002 ; Set number of times to do pattern.
    CLRA ; Clear A.
    TFR   A>DP ; Set DP to 0.
    ANDCC #$BF ; Enable FIRQs, unmask.
    CLRB
RUG_PATTERN_SETUP: ; 0x002662, $F662
    TFR   D>U ; Save D to U
    LDX   #$0000 ; Set X to screen memory.
RUG_PATTERN_LOOP: ; 0x002667, $F667
    COMB ; Invert B
    BITB  #$09 ; Test bits.
    BNE   BITS_SET
    COMB ; Re-invert
    RORA ; rotate
    RORB
    BRA   STR_D_TO_SCR[X]
BITS_SET: ; 0x002671, $F671
    COMB ; re-invert
    BITB  #$09 ; Test bits.
    BNE   BITS_SET2
    RORA ; rotate
    RORB
    BRA   STR_D_TO_SCR[X]
BITS_SET2: ; 0x00267A, $F67A
    LSRA ; rotate in 0.
    RORB
STR_D_TO_SCR[X]: ; 0x00267C, $F67C
    STD   X++ ; Store D to screen.
    EXG   X-D ; Screen loc to D
    TSTB ; Test if column
    BNE   RUG_DISP_NOT_COL
    LDB   #$38
    STB   WATCHDOG ; Set watchdog.
    TFR   CC>B ; CC to B
    BITB  #$10 ; Test if IRQ mask
    BEQ   IRQ_NO_MASK
    CLR   BANKSWITCH ; Set to IO bank.
    LDB   PIA_ROM_DATA_A ; Get switches from coin door. 1=Active
    COMB ; Invert, active low.
    BITB  #$03 ; Test if auto/man or adv weren't set.
    BEQ   RUG_BOTH_INPUTS_ACTIVE ; Both active.
IRQ_NO_MASK: ; 0x002699, $F699
    CLRB ; Set init to proper val.
RUG_DISP_NOT_COL: ; 0x00269A, $F69A
    EXG   X-D ; Put screen location back to X.
    CMPX  #$C000 ; End of screen.
    BNE   RUG_PATTERN_LOOP ; Not done, loop.
    TFR   U>D ; D=0
    LDX   #$0000 ; Set X.
COMPARE_RUG_LOOP: ; 0x0026A6, $F6A6
    COMB
    BITB  #$09
    BNE   BITS_SET
    COMB
    RORA
    RORB
    BRA   COMPARE_RUG
BITS_SET: ; 0x0026B0, $F6B0
    COMB
    BITB  #$09
    BNE   BITS_SET2
    RORA
    RORB
    BRA   COMPARE_RUG
BITS_SET2: ; 0x0026B9, $F6B9
    LSRA
    RORB
COMPARE_RUG: ; 0x0026BB, $F6BB
    CMPD  X++ ; Test what is on screen.
    BEQ   RUG_MATCH
    EXG   D-Y ; Save value to Y.
    TFR   CC>A
    BITA  #$10 ; Test if IRQ mask.
    BEQ   RUG_MISMATCH_IRQ_NOMASK
    LDA   #$03
    STA   CURRENT_BANK
    STA   BANKSWITCH
    JMP   JMP_RUG_MISMATCH
RUG_MISMATCH_IRQ_NOMASK: ; 0x0026D2, $F6D2
    CLRA ; Start over by clearing the top byte?
    EXG   Y-D ; Put screen value back to D.
    ORCC  #$40 ; Mask FIRQ
RUG_MATCH: ; 0x0026D7, $F6D7
    EXG   X-D ; Save screen pos to X.
    TSTB ; See if at column.
    BNE   NOT_COLUMN_RUG_MATCH
    TFR   CC>B
    BITB  #$10 ; Test if IRQ mask.
    BEQ   RUG_MATCH_NOT_ADMIN_MENU ; No mask goes here.
    LDB   PIA_ROM_DATA_A ; Get coin door buttons. 1=Active
    COMB ; Active low.
    BITB  #$03 ; Test auto/man and adv switch.
    BNE   WATCHDOG+RUG_REENTER ; If neither active, reenter.
RUG_BOTH_INPUTS_ACTIVE: ; 0x0026EA, $F6EA
    LDA   #$03 ; Otherwise, leave. Bank val.
    STA   CURRENT_BANK
    STA   BANKSWITCH ; Switch
    JMP   JMP_RUG_LEAVE_ADMIN_MENU? ; Leave to admin menu.
RUG_MATCH_NOT_ADMIN_MENU: ; 0x0026F4, $F6F4
    TFR   CC>B
    BITB  #$40 ; Test if FIRQ mask.
    BEQ   WATCHDOG+RUG_REENTER ; Not set, reenter.
    ANDCC #$BF ; Clear FIRQ mask.
    TFR   DP>B ; DP to B...
    TFR   A>DP ; A to DP. Val?
SUB_LOOP: ; 0x002700, $F700
    SUBA  #$03 ; A-=3
    BHS   SUB_LOOP ; Loop until underflow.
    INCA ; Test if was 2
    BNE   A_NOT_FF ; Skip setting DP.
    ORB   #$02 ; A=FF, set.
    BRA   COMMIT_DP
A_NOT_FF: ; 0x00270B, $F70B
    INCA ; Test if was 1
    BNE   A_IS_FD ; No, was 0, take this.
    ORB   #$01 ; A=FE, set.
    BRA   COMMIT_DP ; Always taken.
A_IS_FD: ; 0x002712, $F712
    ORB   #$04 ; A=FD, set.
COMMIT_DP: ; 0x002714, $F714
    TFR   DP>A ; Put A back.
    TFR   B>DP ; Failure value to DP.
WATCHDOG+RUG_REENTER: ; 0x002718, $F718
    LDB   #$38 ; Reset watchdog.
    STB   WATCHDOG
    CLRB ; Set B back to value.
NOT_COLUMN_RUG_MATCH: ; 0x00271E, $F71E
    EXG   X-D ; Put screen back to X.
    CMPX  #$C000 ; Is end of screeen.
    LBNE  COMPARE_RUG_LOOP ; No, loop.
    LEAY  -1,Y ; Rug pattern finished, minus 1 loop.
    LBNE  RUG_PATTERN_SETUP ; Repeat if not 0.
    TFR   CC>B ; RUG PATTERN CONFIRMED HERE.
    TSTB ; Test CC
    BMI   RUG_POST_ENTIRE_SET(BOOTUP?) ; If bit 7 set
    LDB   #$03 ; If not bootup do this?
    STB   BANKSWITCH
    JSR   SETUP_TEXT+UNK ; Idk
    JMP   JUMP_RUG_MATCH_UNK ; Exit
RUG_POST_ENTIRE_SET(BOOTUP?): ; 0x00273D, $F73D
    BITB  #$10 ; Test for IRQ mask.
    LBNE  RUG_PATTERN_SETUP ; IRQ masked, keep going. In menu call?
    LDA   #$9E ; Init A, eventually gets put to stack?
    TFR   DP>B ; Put marks to B
    TSTB ; Test if was failures?
    BEQ   NO_DP_MARKS ; No marks, use A as-is.
BIT_0_WAS_SET: ; 0x00274A, $F74A
    INCA ; ++, 1>+1,2=+1,3=+2
    LSRB ; Get bit off B (DP)
    BLO   BIT_0_WAS_SET ; If bit 0 was 1, repeat.
NO_DP_MARKS: ; 0x00274E, $F74E
    TFR   A>DP ; Write A to DP. 0x9E to 0xA6.
    ADDA  #$01 ; ++
    CLRB ; D=##00
    TFR   D>S ; Put S stack there.
    JSR   SETUP_TEXT+UNK ; Setup stuff.
ROM_CHECK_START: ; 0x002758, $F758
    LDU   #$F86E ; Load U stack.
BANK_TEST_CHECK_LOOP: ; 0x00275B, $F75B
    CLR   BANKSWITCH ; Set to IO
    LDA   #$38 ; Set watchdog.
    STA   WATCHDOG
    LDA   U ; Load pointed data.
    LDB   U ; Load pointed.
    BEQ   CORRECT_CHECKSUM ; If is 0, skip check.
    ANDB  #$0F ; Get bank bits.
    STB   BANKSWITCH ; Switch to bank
    ANDA  #$70 ; Get upper bits.
    LSRA ; Shift once.
    ADDA  #$C0 ; Add value to get offset.
    CLRB ; Clear bottom byte of D.
    TFR   D>X ; Addr made to X
    LDY   #$0800 ; Set Y to check size
    TFR   U>D ; Tfr location for check...
    SUBB  #$6C ; location.lower - 2
    LSRB ; Divide by 2. This is init value.
    CLRA ; Clear A
LOOP_0x800: ; 0x002780, $F780
    ADCB  X+ ; +=, w/ carry
    LEAY  -1,Y ; --
    BNE   LOOP_0x800
    CMPB  #$80 ; If B ends up being #$80...
    BEQ   CORRECT_CHECKSUM
    TFR   CC>A ; Incorrect here.
    BITA  #$10 ; Test IRQ mask
    BEQ   WRONG_CHECKSUM_NO_IRQ ; No IRQ Mask.
RTS_INTO_BANK3_FROM_CHECK: ; 0x002790, $F790
    JMP   BANKSWITCH_TO_3 ; Go back to system menu.
CORRECT_CHECKSUM: ; 0x002793, $F793
    LEAU  1,U ; Ptr += 1
    CMPU  #$F886 ; End
    BNE   BANK_TEST_CHECK_LOOP ; Not at end.
    TFR   CC>A ; Get CC. All passed here.
    BITA  #$10 ; Test IRQ
    BNE   RTS_INTO_BANK3_FROM_CHECK ; Go back into menu?
    TFR   DP>A ; Get DP
    CMPA  #$9E ; Check if DP was originally 0
    BNE   DP_ORIGINALLY_NOT_0 ; If taken, original DP!=0
    JSR   BANKSWITCH_TO_3 ; Switch to bank.
    JSR   JMP_BOOTUP_UNIT_OK ; UNIT OK.
    BRA   RUG_PASS_SRAM_CHECK ; NOTE: Goes to main loop here!
DP_ORIGINALLY_NOT_0: ; 0x0027AF, $F7AF
    LDB   #$40 ; LED 4+2
    BSR   WRITE_B_TO_ROM_DATA_PIA_REGS+BANK3 ; Turn on.
    JSR   JMP_BOOTUP_RAM_FAILURE
    BRA   RUG_PASS_SRAM_CHECK
WRITE_B_TO_ROM_DATA_PIA_REGS+BANK3: ; 0x0027B8, $F7B8
    LDX   #$CC00
    STB   X ; Write to ROM_DATA_A
    STB   2,X ; And B
    CLR   BANKSWITCH ; Change to IO bank.
DISPLAY_MESSAGE_WAIT: ; 0x0027C2, $F7C2
    LDA   #$38
    STA   WATCHDOG ; Clear watchdog...
    LEAX  -1,X
    BNE   DISPLAY_MESSAGE_WAIT
    JMP   BANKSWITCH_TO_3 ; Switch to bank 3, abuse RTS
WRONG_CHECKSUM_NO_IRQ: ; 0x0027CE, $F7CE
    LDB   #$80 ; LED 3+1
    BSR   WRITE_B_TO_ROM_DATA_PIA_REGS+BANK3 ; Turn on.
    JSR   JMP_BOOTUP_ROM_FAILURE
RUG_PASS_SRAM_CHECK: ; 0x0027D5, $F7D5
    JSR   JMP_SRAM_CHECK_UNK ; SRAM check to see if menu?
    JMP   DEFENDER_GAME_TITLE? ; Goto game if SRAM check didn't take over.
STORE_B[X]_BANK0: ; 0x0027DB, $F7DB
    PSHS  A,CC ; Save A,CC
    LDA   CURRENT_BANK ; Load bank
    PSHS  A ; Push to the stack to save.
    CLR   CURRENT_BANK ; Set to bank 0
    CLR   BANKSWITCH
    STB   X ; Store B to X
RESTORE_BANK+A+CC_@S: ; 0x0027E8, $F7E8
    PULS  A
    STA   CURRENT_BANK
    STA   BANKSWITCH
    PULS  CC,A,PC ; Restore regs. RTS
LOAD_B[X]_BANK0: ; 0x0027F1, $F7F1
    PSHS  A,CC ; Save A,CC
    LDA   CURRENT_BANK ; Loaded because restores.
    PSHS  A ; Push current bank to save.
    CLR   CURRENT_BANK ; Set to bank 0.
    CLR   BANKSWITCH
    LDB   X ; Load B
    BRA   RESTORE_BANK+A+CC_@S ; Restore last bank
SETUP_TEXT+UNK: ; 0x002800, $F800
    PSHS  B,A ; Save B,A
    CLR   SENTENCE_PTR_WORD_ON ; Clear
    CLR   UNK_$49_SYS_MENU_FLAG?
    LDA   #$03
    STA   CURRENT_BANK ; Bank info without switching?
    STA   UNK_$48 ; Set
    LDD   #$FFFF
    STD   TEXT_PTR_UNK ; Set
    PULS  A,B,PC ; Get reg, RTS.
GET_DATA_FROM_SRAM(IN_A): ; 0x002813, $F813
    LDA   1,X ; Get val at X+1
    ANDA  #$0F ; Bottom bits.
    PSHS  A ; Save
    LDA   X++ ; Get val, X+=2
    ASLA ; Lower bits higher.
    ASLA
    ASLA
    ASLA
    ADDA  S+ ; Get bottom bits, fix stack too.
    RTS ; RTS
GET_DATA_FROM_SRAM[X]_IN_A: ; 0x002822, $F822
    PSHS  B ; Save B.
    LDB   CURRENT_BANK ; Get bank.
    PSHS  B ; Save
    CLR   CURRENT_BANK ; Bank 0.
    CLR   BANKSWITCH ; Bank 0.
    BSR   GET_DATA_FROM_SRAM(IN_A) ; Get data. X+=2
    PULS  B
    STB   CURRENT_BANK ; Restore bank from stack.
    STB   BANKSWITCH
    PULS  B,PC ; Rest+ret, data in A.
GET_DATA_FROM_SRAM[X]_IN_AB: ; 0x002838, $F838
    BSR   GET_DATA_FROM_SRAM[X]_IN_A
GET_DATA_FROM_SRAM[X]_IN_B: ; 0x00283A, $F83A
    PSHS  A ; INFO: X+=2
    BSR   GET_DATA_FROM_SRAM[X]_IN_A
    TFR   A>B
    PULS  A,PC
STORE_A_TO_SRAM[X]: ; 0x002842, $F842
    PSHS  A ; Store low bits.
    STA   1,X ; above
    LSRA ; Shift high bits low
    LSRA
    LSRA
    LSRA
    STA   X++ ; Store at X
    PULS  A,PC ; Return
STORE_A_TO_SRAM[X]_BANKED: ; 0x00284E, $F84E
    PSHS  B ; Save B
    LDB   CURRENT_BANK ; Get bank
    PSHS  B ; Save bank
    CLR   CURRENT_BANK
    CLR   BANKSWITCH ; Set to IO bank.
    BSR   STORE_A_TO_SRAM[X] ; Write
    PULS  B ; Restore bank.
    STB   CURRENT_BANK
    STB   BANKSWITCH
    PULS  B,PC ; RTS
STORE_D_TO_SRAM[X]: ; 0x002864, $F864
    BSR   STORE_A_TO_SRAM[X]_BANKED ; Store A
STORE_B_TO_SRAM[X]: ; 0x002866, $F866
    PSHS  A ; Save A
    TFR   B>A ; Put B to SRAM.
    BSR   STORE_A_TO_SRAM[X]_BANKED ; Store.
    PULS  A,PC ; RTS.
BANK_CHECK_DATA: ; 0x00286E, $F86E
    .db $20 ; BANK CHECK ARRAY, FMT[-AAABBBB, A=Addr*0x200+0xC000,B=BANK]
    .db $00
    .db $40
    .db $50
    .db $60
    .db $70
    .db $30
    .db $00
    .db $00
    .db $00
    .db $07
    .db $00
    .db $03
    .db $00
    .db $02
    .db $00
    .db $01
    .db $00
    .db $13
    .db $00
    .db $12
    .db $00
    .db $11
    .db $00 ; END OF DATA
    .db $E5 ; THIS DATA IS USED IN THE FAILURE STUFF
    .db $91
    .db $00
    .db $E8
    .db $00
    .db $00
    .db $00
    .db $00
    .db $E8
    .db $C1
    .db $00
    .db $F8
    .db $E9
    .db $1F
    .db $00
    .db $F8
    .db $D8
    .db $4E
    .db $00
    .db $00
    .db $D8
    .db $39
    .db $00
    .db $00
    .db $E8
    .db $97
    .db $00
    .db $E8
DATA_FOR_$82-$88: ; 0x0028A2, $F8A2
    .db $00 ; fmt: [4 bytes]
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $D4
    .db $4C
    .db $00
    .db $00
    .db $D4
    .db $75
    .db $02
    .db $00
    .db $D4
    .db $3D
    .db $00
    .db $00
    .db $D4
    .db $6E
    .db $02
    .db $00
    .db $D4
    .db $7C
    .db $02
    .db $00
INIT_DATA_FOR_$A026: ; 0x0028BE, $F8BE
    .db $00 ; 0x10 bytes
    .db $00
    .db $07
    .db $28
    .db $2F
    .db $81
    .db $A4
    .db $15
    .db $C7
    .db $FF
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $05
    .db $08
    .db $F9
    .db $FB
    .db $FA
    .db $23
    .db $D1
    .db $93
    .db $D1
    .db $1F
    .db $04
    .db $08
    .db $FA
    .db $4B
    .db $FA
    .db $4B
    .db $D1
    .db $39
    .db $D1
    .db $6B
    .db $04
    .db $08
    .db $FA
    .db $6B
    .db $FA
    .db $6B
    .db $D1
    .db $39
    .db $D1
    .db $6B
    .db $01
    .db $01
    .db $F8
    .db $F6
    .db $F8
    .db $F6
    .db $D8
    .db $DB
    .db $D8
    .db $DB
    .db $00
    .db $04
    .db $08
    .db $FA
    .db $8B
    .db $FA
    .db $AB
    .db $D1
    .db $39
    .db $D1
    .db $6B
    .db $02
    .db $08
    .db $FA
    .db $CB
    .db $FA
    .db $DB
    .db $D0
    .db $F9
    .db $D1
    .db $0B
    .db $02
    .db $08
    .db $FA
    .db $EB
    .db $FA
    .db $FB
    .db $D0
    .db $F9
    .db $D1
    .db $0B
HUMANOID_BITMAP: ; 0x002915, $F915
    .db $02
    .db $08
    .db $FB
    .db $0B
    .db $FB
    .db $1B
    .db $D0
    .db $F9
    .db $D1
    .db $0B
    .db $02
    .db $08
    .db $FB
    .db $2B
    .db $FB
    .db $3B
    .db $D0
    .db $F9
    .db $D1
    .db $0B
    .db $04
    .db $08
    .db $FB
    .db $4B
    .db $FB
    .db $6B
    .db $D1
    .db $39
    .db $D1
    .db $6B
    .db $04
    .db $08
    .db $FB
    .db $8B
    .db $FB
    .db $AB
    .db $D1
    .db $39
    .db $D1
    .db $6B
    .db $04
    .db $08
    .db $FB
    .db $CB
    .db $FB
    .db $EB
    .db $D1
    .db $39
    .db $D1
    .db $6B
    .db $04
    .db $08
    .db $FC
    .db $0B
    .db $FC
    .db $2B
    .db $D1
    .db $39
    .db $D1
    .db $6B
    .db $04
    .db $08
    .db $CC
    .db $90
    .db $CC
    .db $90
    .db $D1
    .db $39
    .db $D1
    .db $6B
    .db $02
    .db $03
    .db $CC
    .db $B0
    .db $CC
    .db $B6
    .db $D1
    .db $F1
    .db $D2
    .db $0D
    .db $02
    .db $03
    .db $CC
    .db $BC
    .db $CC
    .db $C2
    .db $D1
    .db $F1
    .db $D2
    .db $0D
    .db $08
    .db $01
    .db $F9
    .db $73
    .db $FF
    .db $FF
    .db $FF
    .db $FF
    .db $FF
    .db $FF
    .db $FF
    .db $FF
    .db $03
    .db $04
    .db $CC
    .db $C8
    .db $CC
    .db $D4
    .db $D1
    .db $AD
    .db $D1
    .db $D7
    .db $05
    .db $08
    .db $CC
    .db $E0
    .db $CD
    .db $08
    .db $D1
    .db $93
    .db $D1
    .db $1F
    .db $05
    .db $08
    .db $CD
    .db $30
    .db $CD
    .db $58
    .db $D1
    .db $93
    .db $D1
    .db $1F
    .db $05
    .db $08
    .db $CD
    .db $80
    .db $CD
    .db $A8
    .db $D1
    .db $93
    .db $D1
    .db $1F
    .db $06
    .db $04
    .db $CD
    .db $D0
    .db $CD
    .db $E8
    .db $D2
    .db $1F
    .db $D2
    .db $60
    .db $06
    .db $04
    .db $CE
    .db $00
    .db $CE
    .db $18
    .db $D2
    .db $1F
    .db $D2
    .db $60
    .db $06
    .db $04
    .db $CE
    .db $30
    .db $CE
    .db $48
    .db $D2
    .db $1F
    .db $D2
    .db $60
    .db $08
    .db $06
    .db $CE
    .db $60
    .db $CE
    .db $90
    .db $D2
    .db $8E
    .db $D2
    .db $DF
    .db $08
    .db $06
    .db $CE
    .db $C0
    .db $CE
    .db $F0
    .db $D2
    .db $8E
    .db $D2
    .db $DF
BMP_SHIP: ; 0x0029D5, $F9D5
    .db $05 ; Player ship.
    .db $04
    .db $CF
    .db $20
BMP_SMARTBOMB: ; 0x0029D9, $F9D9
    .db $03 ; Smartbomb graphic here.
    .db $03
    .db $CF
    .db $34
    .db $06
    .db $06
    .db $CF
    .db $3D
    .db $CF
    .db $61
    .db $D3
    .db $3D
    .db $D3
    .db $50
    .db $06
    .db $06
    .db $CF
    .db $85
    .db $CF
    .db $A9
    .db $D3
    .db $3D
    .db $D3
    .db $50
    .db $08
    .db $06
    .db $CF
    .db $CD
    .db $CF
    .db $CD
    .db $F5
    .db $22
    .db $F5
    .db $7B
    .db $00
    .db $00
    .db $03
    .db $03
    .db $00
    .db $00
    .db $03
    .db $30
    .db $0C
    .db $3C
    .db $0C
    .db $08
    .db $38
    .db $30
    .db $00
    .db $00
    .db $C0
    .db $C0
    .db $C8
    .db $78
    .db $78
    .db $70
    .db $70
    .db $70
    .db $00
    .db $30
    .db $03
    .db $03
    .db $30
    .db $30
    .db $03
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $30
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $30
    .db $00
    .db $03
    .db $30
    .db $30
    .db $03
    .db $03
    .db $30
    .db $00
    .db $CC
    .db $CC
    .db $CC
    .db $87
    .db $87
    .db $07
    .db $07
    .db $07
    .db $00
    .db $03
    .db $80
    .db $80
    .db $83
    .db $03
    .db $00
    .db $00
    .db $00
    .db $00
    .db $30
    .db $30
    .db $00
    .db $00
    .db $30
    .db $03
    .db $00
    .db $00
    .db $0D
    .db $6C
    .db $6C
    .db $0D
    .db $00
    .db $00
    .db $06
    .db $E6
    .db $C8
    .db $83
    .db $82
    .db $C8
    .db $EC
    .db $06
    .db $60
    .db $6D
    .db $8C
    .db $28
    .db $28
    .db $8C
    .db $6D
    .db $60
    .db $00
    .db $00
    .db $E0
    .db $C6
    .db $C6
    .db $E0
    .db $00
    .db $00
    .db $00
    .db $00
    .db $02
    .db $22
    .db $24
    .db $02
    .db $00
    .db $00
    .db $02
    .db $22
    .db $44
    .db $44
    .db $24
    .db $42
    .db $22
    .db $00
    .db $20
    .db $22
    .db $44
    .db $44
    .db $24
    .db $42
    .db $22
    .db $00
    .db $00
    .db $00
    .db $20
    .db $22
    .db $22
    .db $20
    .db $00
    .db $00
    .db $00
    .db $0E
    .db $00
    .db $D8
    .db $00
    .db $0E
    .db $00
    .db $00
    .db $0F
    .db $08
    .db $8C
    .db $C8
    .db $8C
    .db $08
    .db $0F
    .db $00
    .db $00
    .db $0E
    .db $80
    .db $C8
    .db $80
    .db $0E
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $D0
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $0D
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $E0
    .db $08
    .db $8C
    .db $08
    .db $E0
    .db $00
    .db $00
    .db $F0
    .db $80
    .db $C8
    .db $8C
    .db $C8
    .db $80
    .db $F0
    .db $00
    .db $00
    .db $E0
    .db $00
    .db $8D
    .db $00
    .db $E0
    .db $00
    .db $00
    .db $33
    .db $43
    .db $43
    .db $87
    .db $87
    .db $07
    .db $07
    .db $07
    .db $00
    .db $00
    .db $80
    .db $80
    .db $80
    .db $00
    .db $00
    .db $00
    .db $03
    .db $04
    .db $04
    .db $08
    .db $08
    .db $00
    .db $00
    .db $00
    .db $30
    .db $30
    .db $38
    .db $78
    .db $78
    .db $70
    .db $70
    .db $70
    .db $33
    .db $43
    .db $43
    .db $87
    .db $87
    .db $77
    .db $77
    .db $77
    .db $00
    .db $00
    .db $80
    .db $80
    .db $80
    .db $00
    .db $00
    .db $00
    .db $03
    .db $04
    .db $04
    .db $08
    .db $08
    .db $07
    .db $07
    .db $07
    .db $30
    .db $30
    .db $38
    .db $78
    .db $78
    .db $70
    .db $70
    .db $70
    .db $03
    .db $03
    .db $83
    .db $87
    .db $87
    .db $07
    .db $07
    .db $07
    .db $30
    .db $40
    .db $40
    .db $80
    .db $80
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $08
    .db $08
    .db $08
    .db $00
    .db $00
    .db $00
    .db $33
    .db $34
    .db $34
    .db $78
    .db $78
    .db $70
    .db $70
    .db $70
    .db $03
    .db $03
    .db $83
    .db $87
    .db $87
    .db $07
    .db $07
    .db $07
    .db $30
    .db $40
    .db $40
    .db $80
    .db $80
    .db $70
    .db $70
    .db $70
    .db $00
    .db $00
    .db $08
    .db $08
    .db $08
    .db $00
    .db $00
    .db $00
    .db $33
    .db $34
    .db $34
    .db $78
    .db $78
    .db $77
    .db $77
    .db $77
    .db $08
    .db $08
    .db $DD
    .db $DE
    .db $DE
    .db $DE
    .db $DD
    .db $00
    .db $88
    .db $88
    .db $DD
    .db $EE
    .db $FE
    .db $EE
    .db $DD
    .db $00
    .db $88
    .db $88
    .db $D8
    .db $D8
    .db $D8
    .db $D0
    .db $D0
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $0D
    .db $0D
    .db $0D
    .db $0D
    .db $0D
    .db $00
    .db $88
    .db $88
    .db $DD
    .db $EE
    .db $EF
    .db $EE
    .db $DD
    .db $00
    .db $88
    .db $88
    .db $DD
    .db $ED
    .db $ED
    .db $ED
    .db $DD
    .db $00
    .db $80
    .db $80
    .db $80
    .db $80
    .db $80
    .db $00
    .db $00
    .db $00
    .db $00
    .db $08
    .db $DD
    .db $DE
    .db $DE
    .db $DE
    .db $DD
    .db $00
    .db $00
    .db $88
    .db $DD
    .db $EE
    .db $FE
    .db $EE
    .db $DD
    .db $00
    .db $00
    .db $88
    .db $D8
    .db $D8
    .db $D8
    .db $D8
    .db $D0
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $0D
    .db $0D
    .db $0D
    .db $0D
    .db $0D
    .db $00
    .db $00
    .db $88
    .db $DD
    .db $EE
    .db $EF
    .db $EE
    .db $DD
    .db $00
    .db $00
    .db $88
    .db $DD
    .db $ED
    .db $ED
    .db $ED
    .db $DD
    .db $00
    .db $00
    .db $80
    .db $80
    .db $80
    .db $80
    .db $80
    .db $00
    .db $00
    .db $00
    .db $00
    .db $DD
    .db $DE
    .db $DE
    .db $DE
    .db $DD
    .db $00
    .db $00
    .db $00
    .db $DD
    .db $EE
    .db $FE
    .db $EE
    .db $DD
    .db $00
    .db $00
    .db $00
    .db $D8
    .db $D8
    .db $D8
    .db $D8
    .db $D8
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $0D
    .db $0D
    .db $0D
    .db $0D
    .db $0D
    .db $00
    .db $00
    .db $00
    .db $DD
    .db $EE
    .db $EF
    .db $EE
    .db $DD
    .db $00
    .db $00
    .db $00
    .db $DD
    .db $ED
    .db $ED
    .db $ED
    .db $DD
    .db $00
    .db $00
    .db $00
    .db $80
    .db $80
    .db $80
    .db $80
    .db $80
    .db $00
    .db $00
    .db $00
    .db $DD
    .db $DE
    .db $DE
    .db $DE
    .db $DD
    .db $00
    .db $00
    .db $00
    .db $DD
    .db $EE
    .db $FE
    .db $EE
    .db $DD
    .db $88
    .db $00
    .db $00
    .db $D0
    .db $D8
    .db $D8
    .db $D8
    .db $D8
    .db $88
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $0D
    .db $0D
    .db $0D
    .db $0D
    .db $0D
    .db $00
    .db $00
    .db $00
    .db $DD
    .db $EE
    .db $EF
    .db $EE
    .db $DD
    .db $88
    .db $00
    .db $00
    .db $DD
    .db $ED
    .db $ED
    .db $ED
    .db $DD
    .db $88
    .db $00
    .db $00
    .db $00
    .db $80
    .db $80
    .db $80
    .db $80
    .db $80
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
JMP_TO_REPLACES_HANDLER_AND_DOES_ALOT: ; 0x002C60, $FC60
    JMP   REPLACES_HANDLER_AND_DOES_ALOT
L_002C63: ; 0x002C63, $FC63
    JMP   L_002CCC
L_002C66: ; 0x002C66, $FC66
    JMP   L_002D2D
REPLACES_HANDLER_AND_DOES_ALOT: ; 0x002C69, $FC69
    PSHS  U,Y,B,A ; Save
    LDD   2,X ; Load OBJ[2]
    PSHS  B,A ; Save
    LDD   DATA_W_F8EC ; Get data
    STD   2,X ; Store to
    STX   LIST_$65_UNK ; Store obj to list.
    LDD   10,X ; Load OBJ[10]
    SUBD  $A020 ; Sub with
    CMPD  #$2600 ; Compare to
    BHI   RESTORE_HANDLER+IDK ; If >, restore.
    LDY   $A0E2 ; Load Y from
    BEQ   Y_TO_#$9C00 ; If 0, goto.
Y+=64,CMP_TO_#$A000: ; 0x002C85, $FC85
    LEAY  64,Y ; Y+=64
    CMPY  #$A000 ; If Y _ #$A000
    BNE   DONT_CAP_Y ; !=, goto
Y_TO_#$9C00: ; 0x002C8E, $FC8E
    LDY   #$9C00 ; Cap to val.
DONT_CAP_Y: ; 0x002C92, $FC92
    CMPY  $A0E2 ; Compare to
    BNE   L_002C9D ; !=, goto
RESTORE_HANDLER+IDK: ; 0x002C97, $FC97
    PULS  A,B ; Get old handler.
    STD   2,X ; Restore
    BRA   RTS ; RTS
L_002C9D: ; 0x002C9D, $FC9D
    LDA   Y ; Load A from Y
    BMI   Y+=64,CMP_TO_#$A000 ; If negative, goto.
    BEQ   SKIP_JSR ; If 0, goto.
    JSR   L_002DD5 ; IDK
SKIP_JSR: ; 0x002CA6, $FCA6
    LDA   $A0BA ; Load val
    BITA  #$80 ; Test
    BNE   EXIT_STUFF ; If set, goto.
    LDD   DATA_W_2CAC ; Load val
    JSR   JMP_SET_A0B0-A0B3_WHEN_@D>A0B2 ; Sets IDK.
EXIT_STUFF: ; 0x002CB2, $FCB2
    LDA   20,X ; Load OBJ[20]
    ORA   #$02 ; Set bit
    STA   20,X ; Store back
    LDD   #$AF00 ; Load D
    STD   Y ; Store to Y...?
    PULS  A,B ; Restore handler?
    STD   2,Y
    LEAU  64,Y ; U = Y+64
    STU   4,Y ; Store to OBJ[4]
    STX   10,Y ; Store OBJ PTR to OBJ[10]
RTS: ; 0x002CCA, $FCCA
    PULS  A,B,Y,U,PC
L_002CCC: ; 0x002CCC, $FCCC
    PSHS  U,Y,B,A
    LDD   10,X
    SUBD  $A020
    CMPA  #$26
    BHI   L_002D2B
    STD   $A0E9
    LDY   $A0E2
    BEQ   L_002CE6
L_002CDD: ; 0x002CDD, $FCDD
    LEAY  64,Y
    CMPY  #$A000
    BNE   L_002CEA
L_002CE6: ; 0x002CE6, $FCE6
    LDY   #$9C00
L_002CEA: ; 0x002CEA, $FCEA
    CMPY  $A0E2
    BEQ   L_002D2B
    LDA   Y
    BMI   L_002CDD
    BEQ   L_002CF8
    JSR   L_002DD5
L_002CF8: ; 0x002CF8, $FCF8
    STY   $A0E2
    LDD   #$0100
    STD   Y
    LDD   2,X
    STD   2,Y
    LEAU  64,Y
    STU   4,Y
    LDD   $A0E9
    ASLB
    ROLA
    ASLB
    ROLA
    LDB   12,X
    STD   8,Y
    SUBD  $A0F8
    LDU   2,Y
    ADDA  U
    BHS   L_002D23
    ADDB  1,U
    BHS   L_002D23
    LDD   $A0F8
    BRA   L_002D29
L_002D23: ; 0x002D23, $FD23
    LDD   U
    LSRA
    LSRB
    ADDD  8,Y
L_002D29: ; 0x002D29, $FD29
    STD   6,Y
L_002D2B: ; 0x002D2B, $FD2B
    PULS  A,B,Y,U,PC
L_002D2D: ; 0x002D2D, $FD2D
    LDY   #$9C00
L_002D31: ; 0x002D31, $FD31
    LDA   $A0BA
    BITA  #$04
    BEQ   L_002D43
    LDA   Y
    BMI   L_002D91
    LDD   #$0000
    STD   Y
    JMP   L_002DC9
L_002D43: ; 0x002D43, $FD43
    LDD   Y
    LBEQ  L_002DC9
    BMI   L_002D7E
    ADDD  #$00AA
    STD   Y
    CMPA  #$30
    BLS   L_002D5E
    JSR   L_002DD5
    LDD   #$0000
    STD   Y
    BRA   L_002DC9
L_002D5E: ; 0x002D5E, $FD5E
    LDD   $A020
    ANDB  #$C0
    PSHS  B,A
    LDD   $A022
    ANDB  #$C0
    SUBD  S++
    ASLB
    ROLA
    ASLB
    ROLA
    PSHS  A
    LDA   6,Y
    ADDA  S
    STA   6,Y
    LDA   8,Y
    ADDA  S+
    STA   8,Y
    BRA   L_002DC3
L_002D7E: ; 0x002D7E, $FD7E
    SUBD  #$0100
    STD   Y
    BPL   L_002D91
    LDX   10,Y
    LDD   10,X
    SUBD  $A020
    ADDA  #$0C
    BITA  #$C0
    BEQ   L_002DA9
L_002D91: ; 0x002D91, $FD91
    LDD   #$0000
    STD   Y
    LDD   2,Y
    LDX   10,Y
    STD   2,X
    LDA   20,X
    ANDA  #$FD
    STA   20,X
    JSR   L_002DD5
    BRA   L_002DC9
L_002DA9: ; 0x002DA9, $FDA9
    SUBA  #$0C
    ASLB
    ROLA
    ASLB
    ROLA
    LDB   12,X
    STD   8,Y
    LDB   #$DA
    MUL
    ASLA
    LDU   2,Y
    LDB   U
    MUL
    LDB   1,U
    LSRB
    ADDD  8,Y
    STD   6,Y
L_002DC3: ; 0x002DC3, $FDC3
    JSR   L_002DD5
    JSR   L_002DEF
L_002DC9: ; 0x002DC9, $FDC9
    LEAY  64,Y
    CMPY  #$A000
    LBNE  L_002D31
    RTS
L_002DD5: ; 0x002DD5, $FDD5
    PSHS  X,B,A
    LDD   #$0000
    LEAX  64,Y
    STX   $A0F3
    LDX   4,Y
    CMPX  $A0F3
    BEQ   L_002DED
L_002DE5: ; 0x002DE5, $FDE5
    STD   [X++]
    CMPX  $A0F3
    BNE   L_002DE5
    STX   4,Y
L_002DED: ; 0x002DED, $FDED
    PULS  A,B,X,PC
L_002DEF: ; 0x002DEF, $FDEF
    PSHS  U,Y,X,B,A
    STY   $A0F6
    LDA   Y
    ANDA  #$7F
    STA   $A0E7
    LEAU  64,Y
    CLR   $A0E6
    LDX   2,Y
    LDD   2,X
    STD   $A0F3
    LDD   X
    STA   $A0F1
    STB   $A0F2
    BITB  #$01
    BNE   L_002E14
    LDX   #$FF27
    BRA   L_002E17
L_002E14: ; 0x002E14, $FE14
    LDX   #$FEF3
L_002E17: ; 0x002E17, $FE17
    STX   R_A0ED
    LDD   6,Y
    SUBD  8,Y
    STA   $A0E4
    LSRB
    STB   $A0E5
    ROL   $A0E6
    LDA   $A0E7
    LDB   $A0E4
    MUL
    STD   $A0E9
    LDB   6,Y
    CLRA
    SUBD  $A0E9
    STD   $A0E9
L_002E32: ; 0x002E32, $FE32
    TSTA
    BEQ   L_002E4D
    LDD   $A0F3
    ADDB  $A0F2
    ADCA  #$00
    STD   $A0F3
    DEC   $A0F1
    LBEQ  L_002F35
    LDD   $A0E9
    ADDB  $A0E7
    ADCA  #$00
    STD   $A0E9
    BRA   L_002E32
L_002E4D: ; 0x002E4D, $FE4D
    CMPB  #$98
    LBHI  L_002F35
    LDA   $A0E7
    ASLA
    STA   $A0E8
    LDB   $A0E5
    MUL
    STD   $A0EB
    LDB   7,Y
    CLRA
    SUBD  $A0EB
    SUBB  $A0E6
    ADCA  #$00
    CLR   $A0F5
L_002E68: ; 0x002E68, $FE68
    TSTA
    BNE   L_002E6F
    CMPB  #$2A
    BHS   L_002E7F
L_002E6F: ; 0x002E6F, $FE6F
    INC   $A0F5
    DEC   $A0F2
    DEC   $A0F2
    LBLE  L_002F35
    ADDB  $A0E8
    ADCA  #$00
    BRA   L_002E68
L_002E7F: ; 0x002E7F, $FE7F
    STD   $A0EB
    LDA   $A0F2
    ANDA  #$FE
    LDX   #$FF48
    LDX   A,X
    STX   R_A0EF
    LDX   $A0F3
    ASL   $A0F5
    LDA   $A0EA
L_002E92: ; 0x002E92, $FE92
    LDB   $A0F5
    ABX
    LDB   $A0EC
    JMP   [R_A0EF]
    STD   --U
    LDY   X++
    STY   [U]
    ADDB  $A0E8
    BLO   L_002EFD
    STD   --U
    LDY   X++
    STY   [U]
    ADDB  $A0E8
    BLO   L_002F03
    STD   --U
    LDY   X++
    STY   [U]
    ADDB  $A0E8
    BLO   L_002F09
    STD   --U
    LDY   X++
    STY   [U]
    ADDB  $A0E8
    BLO   L_002F0F
    STD   --U
    LDY   X++
    STY   [U]
    ADDB  $A0E8
    BLO   L_002F15
    STD   --U
    LDY   X++
    STY   [U]
    ADDB  $A0E8
    BLO   L_002F1B
    STD   --U
    LDY   X++
    STY   [U]
    ADDB  $A0E8
    BLO   L_002F21
    JMP   [R_A0ED]
    BLO   L_002F25
    STD   --U
    LDB   X+
    STB   [U]
    BRA   L_002F27
L_002EFD: ; 0x002EFD, $FEFD
    LEAX  12,X
    JMP   [R_A0ED]
L_002F03: ; 0x002F03, $FF03
    LEAX  10,X
    JMP   [R_A0ED]
L_002F09: ; 0x002F09, $FF09
    LEAX  8,X
    JMP   [R_A0ED]
L_002F0F: ; 0x002F0F, $FF0F
    LEAX  6,X
    JMP   [R_A0ED]
L_002F15: ; 0x002F15, $FF15
    LEAX  4,X
    JMP   [R_A0ED]
L_002F1B: ; 0x002F1B, $FF1B
    LEAX  2,X
    JMP   [R_A0ED]
L_002F21: ; 0x002F21, $FF21
    JMP   [R_A0ED]
L_002F25: ; 0x002F25, $FF25
    LEAX  1,X
L_002F27: ; 0x002F27, $FF27
    DEC   $A0F1
    BEQ   L_002F35
    ADDA  $A0E7
    BLO   L_002F35
    CMPA  #$98
    LBLS  L_002E92
L_002F35: ; 0x002F35, $FF35
    LDX   $A0F6
    STU   4,X
    LDD   6,X
    CMPA  #$98
    BHI   RTS+RESTORE
    SUBB  $A0E6
    LDX   #$0000
    STX   D,X
RTS+RESTORE: ; 0x002F46, $FF46
    PULS  A,B,X,Y,U,PC
    .db $FE
    .db $EF
    .db $FE
    .db $E3
    .db $FE
    .db $D7
    .db $FE
    .db $CB
    .db $FE
    .db $BF
    .db $FE
    .db $B3
    .db $FE
    .db $A7
    .db $FE
    .db $9B
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
DATA_W_F8EC: ; 0x002F9D, $FF9D
    .db $F8
    .db $EC
DATA_W_$F86E: ; 0x002F9F, $FF9F
    .db $F8
    .db $6E
JMP_GET_DATA_FROM_SRAM[X]: ; 0x002FA1, $FFA1
    JMP   GET_DATA_FROM_SRAM[X]_IN_A
JMP_GET_DATA_FROM_SRAM@X_IN_B: ; 0x002FA4, $FFA4
    JMP   GET_DATA_FROM_SRAM[X]_IN_B
JMP_GET_DATA_FROM_SRAM@X_IN_AB: ; 0x002FA7, $FFA7
    JMP   GET_DATA_FROM_SRAM[X]_IN_AB
JMP_STORE_A_TO_SRAM_@X_BANKED: ; 0x002FAA, $FFAA
    JMP   STORE_A_TO_SRAM[X]_BANKED
JMP_STORE_B_TO_SRAM[X]: ; 0x002FAD, $FFAD
    JMP   STORE_B_TO_SRAM[X]
JMP_STORE_D_TO_SRAM[X]: ; 0x002FB0, $FFB0
    JMP   STORE_D_TO_SRAM[X]
JMP_GFX_BANK2_CHR_TO_SCREEN: ; 0x002FB3, $FFB3
    JMP   GFX_BANK2_CHR_TO_SCREEN ; Puts bank 2 char to screen.
JMP_GFX_BANK2_CHR_CLEAR: ; 0x002FB6, $FFB6
    JMP   GFX_BANK2_CHR_CLEAR ; Clears bank 2 char from screen.
L_002FB9: ; 0x002FB9, $FFB9
    JMP   CLEAR_SCREEN_FLEX_SETUP
JMP_CLEAR_ALL_SCREEN: ; 0x002FBC, $FFBC
    JMP   CLEAR_ALL_SCREEN
JMP_ROM_CHECK_START: ; 0x002FBF, $FFBF
    JMP   ROM_CHECK_START
JMP_CORRECT_CHECKSUM: ; 0x002FC2, $FFC2
    JMP   CORRECT_CHECKSUM
JMP_RUG_SETUP: ; 0x002FC5, $FFC5
    JMP   RUG_PATTERN_SETUP
L_002FC8: ; 0x002FC8, $FFC8
    JMP   RUG_PASS_SRAM_CHECK
    JMP   GOTO_B7-C000
JMP_GOTO_PAST_JSR: ; 0x002FCE, $FFCE
    JMP   GOTO_PAST_JSR
L_002FD1: ; 0x002FD1, $FFD1
    JMP   L_0024BE
JMP_STORE_B@X_BANK0: ; 0x002FD4, $FFD4
    JMP   STORE_B[X]_BANK0
LOAD_B@X_BANK0: ; 0x002FD7, $FFD7
    JMP   LOAD_B[X]_BANK0
JMP_SET_A0B0-A0B3_WHEN_@D>A0B2: ; 0x002FDA, $FFDA
    JMP   SET_A0B0-A0B3_WHEN_@D>A0B2
DATA_W_2CAC: ; 0x002FDD, $FFDD
    .db $D4
    .db $EE
    .db $2A
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $F6 ; Interrupt vectors.
    .db $1F
    .db $F6
    .db $1F
    .db $F6
    .db $1F
    .db $F6
    .db $1F
    .db $A0 ; IRQ, Goes to $A08F in RAM.
    .db $8F
    .db $F6
    .db $1F
    .db $F6
    .db $1F
    .db $F6
    .db $1F

;Bank 1
	.org $C000

    JMP   L_003006
    JMP   L_003CAD
L_003006: ; 0x003006, $C006
    JSR   SORT_LIST_A05F_INTO_OTHER_LISTS_IF_OBJ[5]!=2
    LDA   #$FF
    STA   $A0BA
    JSR   INIT_STARS
    LDA   VAL_FROM_SRAM_C495-C496
    STA   R_A183
    CLRA
    STA   R_A184
    STA   R_A178
    LDA   $A0B7
    LBEQ  L_003677
    LDX   #$C8F4
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LDY   #$A1C2
    LDA   #$01
L_003030: ; 0x003030, $C030
    STA   $A006
    STY   R_A17B
    LDX   #$B2B4
    JSR   L_003147
    LBHS  L_00312A
    INC   R_A178
    JSR   CLEAR_ALL_SCREEN
    LDA   $A006
    DECA
    BNE   L_003050
    JSR   SAVE_BANK+SET_WATCHDOG_NONFLIPPED
    BRA   L_003053
L_003050: ; 0x003050, $C050
    JSR   SET_WATCHDOG_GAMEPLAY?
L_003053: ; 0x003053, $C053
    LDB   #$85
    STB   $A027
    LDA   #$3E
    LDX   #$B260
    JSR   L_003147
    BHS   L_003063
    LDA   #$3D
L_003063: ; 0x003063, $C063
    LDX   #$CC02
    LDB   #$3F
    JSR   JMP_STORE_B@X_BANK0
    LDB   #$24
    JSR   JMP_STORE_B@X_BANK0
L_003070: ; 0x003070, $C070
    DECB
    BNE   L_003070
    LDB   #$3F
    JSR   JMP_STORE_B@X_BANK0
    TFR   A>B
    JSR   JMP_STORE_B@X_BANK0
    LDU   #$C0ED ; ELECTRONICS INC. PRESENTS
    LDA   $A006
    ASLA
    LEAU  A,U
    LDX   #$3E38
    JSR   JMP_GOTO_PAST_JSR
    .db $C0
    .db $02
    .db $02
    LDU   #$C0FD
    LDX   #$1458
    JSR   JMP_GOTO_PAST_JSR
    .db $C0
    .db $02
    .db $02
    LDD   #$412F
    STD   $A000
    LDA   #$40
    STD   R_A002
    STD   $A004
    JSR   L_003158
    LDA   #$28
    STA   R_A17D
    LDX   #$C1DC
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LDX   #$C1E7
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LDX   #$C1FA
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    CLR   R_A17A
    JSR   L_00316B
L_0030CB: ; 0x0030CB, $C0CB
    CLRA
    STA   R_A186
    STA   R_A185
L_0030D2: ; 0x0030D2, $C0D2
    LDA   #$01
    LDX   #$C0DA
    JMP   L_0024BE
    LDA   WGT_DATA_A_RAM_COPY
    BITA  #$01
    BNE   L_0030F4
    TST   R_A17D
    BEQ   L_00310E
    INC   R_A186
    LDA   R_A186
    CMPA  #$05
    BNE   L_0030D2
    STA   R_A185
    BRA   L_0030D2
L_0030F4: ; 0x0030F4, $C0F4
    CLR   R_A186
    TST   R_A185
    BEQ   L_0030D2
    LDA   #$14
    STA   R_A17D
    INC   R_A17A
    JSR   L_00316B
    LDA   R_A17A
    CMPA  #$03
    BNE   L_0030CB
L_00310E: ; 0x00310E, $C10E
    JSR   SORT_LIST_A05F_INTO_OTHER_LISTS_IF_OBJ[5]!=2
    LDX   #$B2A8
    LDU   #$B254
    JSR   L_003194
    LDX   #$C471
    BSR   L_003147
    BHS   L_00312A
    LDX   #$C465
    LDU   #$C411
    JSR   L_003194
L_00312A: ; 0x00312A, $C12A
    LDY   #$A1FF
    LDA   $A006
    INCA
    CMPA  #$03
    LBNE  L_003030
    TST   R_A178
    BNE   L_003144
    LDA   #$FF
    LDX   #$C144
    JMP   L_0024BE
L_003144: ; 0x003144, $C144
    JMP   L_003263
L_003147: ; 0x003147, $C147
    PSHS  X,B,A
    JSR   GET_DATA_FROM_SRAM[X]_IN_AB
    CMPD  1,Y
    BNE   L_003156
    JSR   GET_DATA_FROM_SRAM[X]_IN_A
    CMPA  3,Y
L_003156: ; 0x003156, $C156
    PULS  A,B,X,PC
L_003158: ; 0x003158, $C158
    LDX   #$46AC
    LDD   #$1408
    JSR   CLEAR_SCREEN_FLEX_SETUP
    LDU   #$C0FF
    JSR   JMP_GOTO_PAST_JSR
    .db $C0
    .db $02
    .db $02
    RTS
L_00316B: ; 0x00316B, $C16B
    CLR   R_A162
    LDX   #$45B7
L_003171: ; 0x003171, $C171
    LDU   #$1111
    LDA   R_A162
    CMPA  R_A17A
    BNE   L_00317F
    LDU   #$DDDD
L_00317F: ; 0x00317F, $C17F
    LDD   #$0400
L_003182: ; 0x003182, $C182
    STU   D,X
    DECA
    BNE   L_003182
    INC   R_A162
    LEAX  2048,X
    CMPX  #$5DB7
    BNE   L_003171
    RTS
L_003194: ; 0x003194, $C194
    STU   R_A164
    LDY   R_A17B
L_00319B: ; 0x00319B, $C19B
    BSR   L_003147
    BHS   L_0031A8
    BSR   L_0031C5
    LEAX  -12,X
    CMPX  R_A164
    BHI   L_00319B
L_0031A8: ; 0x0031A8, $C1A8
    LEAX  12,X
    LDD   1,Y
    JSR   STORE_D_TO_SRAM[X]
    LDA   3,Y
    JSR   STORE_A_TO_SRAM[X]_BANKED
    LDU   #$A000
L_0031B7: ; 0x0031B7, $C1B7
    LDA   U
    JSR   STORE_A_TO_SRAM[X]_BANKED
    LEAU  2,U
    CMPU  #$A006
    BNE   L_0031B7
    RTS
L_0031C5: ; 0x0031C5, $C1C5
    PSHS  X
L_0031C7: ; 0x0031C7, $C1C7
    JSR   GET_DATA_FROM_SRAM[X]_IN_AB
    LEAX  8,X
    JSR   STORE_D_TO_SRAM[X]
    LEAX  -24,X
    CMPX  S
    BEQ   L_0031DA
    LEAX  12,X
    BRA   L_0031C7
L_0031DA: ; 0x0031DA, $C1DA
    PULS  X,PC
    DEC   R_A17D
    LDA   #$3C
    LDX   #$C1DC
    JMP   L_0024BE
    LDA   $A033
    BNE   L_0031EF
    LDA   $A027
    BRA   L_0031F0
L_0031EF: ; 0x0031EF, $C1EF
    CLRA
L_0031F0: ; 0x0031F0, $C1F0
    STA   $A033
    LDA   #$0F
    LDX   #$C1E7
    JMP   L_0024BE
    CLR   R_A179
    LDA   WGT_DATA_A_RAM_COPY
    BITA  #$80
    BEQ   L_003207
    LDA   #$FF
    BRA   L_003216
L_003207: ; 0x003207, $C207
    LDA   WGT_DATA_B_RAM_COPY
    BITA  #$01
    BEQ   L_003211
    LDA   #$01
    BRA   L_003216
L_003211: ; 0x003211, $C211
    CLR   R_A179
    BRA   L_00324A
L_003216: ; 0x003216, $C216
    CMPA  R_A179
    BNE   L_003252
    DEC   R_A17F
    BNE   L_00324A
    LDX   #$A000
    LDB   R_A17A
    ASLB
    ABX
    LDA   X
    ADDA  R_A179
    CMPA  #$3F
    BNE   L_003233
    LDA   #$5A
L_003233: ; 0x003233, $C233
    CMPA  #$5B
    BNE   L_003239
    LDA   #$40
L_003239: ; 0x003239, $C239
    STA   X
    JSR   L_003158
    LDA   R_A17E
    LSRA
    ADDA  #$05
    STA   R_A17E
    STA   R_A17F
L_00324A: ; 0x00324A, $C24A
    LDA   #$01
    LDX   #$C1FD
    JMP   L_0024BE
L_003252: ; 0x003252, $C252
    STA   R_A179
    LDA   #$37
    STA   R_A17E
    LDA   #$03
    STA   R_A17F
    BRA   L_00324A
    LDU   $A0FF
L_003263: ; 0x003263, $C263
    CLR   R_A162
    JSR   SORT_LIST_A05F_INTO_OTHER_LISTS_IF_OBJ[5]!=2
    JSR   L_00386F
    JSR   CLEAR_ALL_SCREEN
    JSR   SAVE_BANK+SET_WATCHDOG_NONFLIPPED
    CLR   $A027
    LDX   #$C8F4
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    JSR   L_003936
    LDU   #$C101
    LDX   #$3854
    JSR   JMP_GOTO_PAST_JSR
    .db $C0
    .db $02
    .db $02
    LDU   #$1111
    LDX   #$1E7B
    LDD   #$5F00
L_003294: ; 0x003294, $C294
    STU   D,X
    CMPA  #$41
    BNE   L_00329C
    LDA   #$1F
L_00329C: ; 0x00329C, $C29C
    DECA
    BPL   L_003294
    LDA   #$2F
    STA   $A007
    STA   A00B_PTR_UNK
    STA   A012_UNK
    LDU   #$C103
    LDX   #$1886
    STX   R_A181
    LDX   #$B260
    STX   R_A164
    BSR   L_003306
    LDX   #$5986
    STX   R_A181
    LDX   #$C41D
    STX   R_A164
    BSR   L_003306
    LDA   #$3F
    STA   $A032
    LDY   #$B300
    LDD   #$3C18
    STD   Y
    LDD   #$B412
    STD   2,Y
    LDD   #$3038
    JSR   GFX_BANK2_CHR_TO_SCREEN
    LDX   #$E782
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LDA   #$3C
    STA   R_A17D
    TST   R_A184
    BNE   L_003304
    TST   R_A162
    LBNE  L_003263
    DEC   R_A17D
    BEQ   L_003304
    LDA   #$0A
    LDX   #$C2EB
    JMP   L_0024BE
L_003304: ; 0x003304, $C304
    BRA   L_003351
L_003306: ; 0x003306, $C306
    LDA   #$31
    STA   $A006
L_00330A: ; 0x00330A, $C30A
    CLRA
    LDY   #$A00C
    LDX   R_A164
L_003312: ; 0x003312, $C312
    JSR   LOAD_B@X_BANK0
    LEAX  1,X
    ANDB  #$0F
    BNE   L_003322
    TSTA
    BNE   L_003322
    LDB   #$40
    BRA   L_003325
L_003322: ; 0x003322, $C322
    INCA
    ADDB  #$30
L_003325: ; 0x003325, $C325
    STB   Y+
    CMPY  #$A012
    BNE   L_003312
    JSR   GET_DATA_FROM_SRAM[X]_IN_AB
    STD   $A008
    JSR   GET_DATA_FROM_SRAM[X]_IN_A
    STA   $A00A
    STX   R_A164
    LDX   R_A181
    JSR   JMP_GOTO_PAST_JSR
    .db $C0
    .db $02
    .db $02
    LEAX  10,X
    STX   R_A181
    INC   $A006
    LDA   $A006
    CMPA  #$39
    BNE   L_00330A
    RTS
L_003351: ; 0x003351, $C351
    JSR   SORT_LIST_A05F_INTO_OTHER_LISTS_IF_OBJ[5]!=2
    JSR   L_00343C
    LDA   #$D9
    STA   $A0BA
    JSR   L_003936
    LDX   #$C8F4
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    JSR   SCANNER_TO_SCREEN
    LDX   #$CC63
    STX   R_A196
    LDX   #$E782
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LDX   #$F464
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LDX   #$F43D
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LDX   #$E9E3
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LDX   #$C64F
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    JSR   LIST_REMOVE_$67_TO_X,X.next_FROM_$65
    LDD   #$0000
    STD   14,X
    STD   16,X
    LDD   #$1E00
    STD   10,X
    LDD   #$DB00
    STD   12,X
    LDD   #$F901
    STD   2,X
    STX   LIST_$65_UNK
    LDD   #$6666
    STD   18,X
    STX   R_A189
    JSR   LIST_REMOVE_$67_TO_X,X.next_FROM_$65
    LDD   #$0000
    STD   14,X
    STD   16,X
    LDD   #$0800
    STD   10,X
    LDD   #$5000
    STD   12,X
    LDD   #$F9C1
    STD   2,X
    STX   LIST_$65_UNK
    LDD   #$0000
    STD   18,X
    STX   R_A18B
    JSR   LIST_REMOVE_$67_TO_X,X.next_FROM_$65
    LDD   #$F985
    STD   2,X
    LDD   #$1DA0
    STD   10,X
    LDD   #$4000
    STD   12,X
    LDD   #$00A0
    STD   16,X
    LDD   #$0000
    STD   14,X
    LDD   #$4433
    STD   18,X
    JSR   JMP_TO_REPLACES_HANDLER_AND_DOES_ALOT
    STX   R_A18D
    LDA   #$E6
    LDX   #$C412
    JMP   L_0024BE
    LDD   #$FF50
    LDX   R_A18D
    STD   16,X
    LDX   R_A189
    STD   16,X
    LDA   #$A0
    LDX   #$C429
    JMP   L_0024BE
    LDX   #$C5F5
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    STX   R_A187
    LDA   #$15
    LDX   #$C475
    JMP   L_0024BE
L_00343C: ; 0x00343C, $C43C
    LDA   #$FF
    STA   $A0BA
    JSR   CHAIN_LIST_$67,NULL_$65_$6B_$6D
    JSR   CLEAR_ALL_SCREEN
    LDD   #$0000
    STD   $A020
    STD   $A022
    JSR   JMP_GOTO_PAST_JSR
    .db $F4
    .db $FA
    .db $00
    JSR   SETUP_$A026_TO_$A036
    LDA   #$DB
    STA   $A0BA
    LDX   #$1030
    STX   $A0BF
    RTS
L_003460: ; 0x003460, $C460
    LDX   R_A187
    LDU   R_A194
    CLRA
L_003467: ; 0x003467, $C467
    STA   U
    LEAU  256,U
    CMPU  7,X
    BLS   L_003467
    JMP   LIST_SEARCH_OBJ@X_IN_$A05F_TO_OTHER_LIST
    BSR   L_003460
    LDX   R_A18D
    JSR   REMOVE_X_FROM_LIST_A065|A06B
    JSR   L_002C63
    LDX   R_A18B
    LDD   #$0040
    STD   14,X
    LDD   #$00D4
    STD   16,X
    LDA   #$2D
    STA   R_A18F
    LDX   R_A189
    LDD   #$0000
    STD   16,X
    LDX   R_A189
    LDD   16,X
    ADDD  #$0008
    STD   16,X
    DEC   R_A18F
    BEQ   L_0034B5
    LDA   #$02
    LDX   #$C49C
    JMP   L_0024BE
L_0034B5: ; 0x0034B5, $C4B5
    JSR   LIST_REMOVE_$67_TO_X,X.next_FROM_$65
    LDD   #$0000
    STD   14,X
    STD   16,X
    LDD   #$1DFF
    STD   10,X
    LDD   #$9000
    STD   12,X
    LDD   #$F9E7
    STD   2,X
    STX   LIST_$65_UNK
    LDD   #$0000
    STD   18,X
    STX   R_A190
    LDD   #$0000
    LDU   #$00C0
    LDX   R_A18B
    STD   14,X
    STU   16,X
    LDX   R_A189
    LDD   #$1E80
    STD   10,X
    LDD   #$A2E0
    STD   12,X
    STU   16,X
    LDA   #$50
    LDX   #$C500
    JMP   L_0024BE
    LDX   R_A190
    LDD   #$E000
    STD   12,X
    LDD   #$1C00
    STD   10,X
    LDX   R_A189
    LDD   #$0000
    STD   16,X
    LDX   R_A18B
    LDD   #$F9CB
    STD   2,X
    LDD   #$FFC0
    STD   14,X
    LDD   #$FE80
    STD   16,X
    LDA   #$60
    LDX   #$C531
    JMP   L_0024BE
    LDX   R_A18B
    LDD   #$F9C1
    STD   2,X
    LDD   #$0000
    STD   14,X
    STD   16,X
    LDX   R_A190
    LDD   4,X
    JSR   REMOVE_X_FROM_LIST_A065|A06B
    JSR   GFX_CLEAR_12X6
    LDU   #$CC7D
L_00354F: ; 0x00354F, $C54F
    JSR   LIST_REMOVE_$67_TO_X,X.next_FROM_$65
    LDD   12,U
    STD   2,X
    LDD   36,U
    STD   18,X
    LDD   #$1F00
    STD   10,X
    LDD   #$A000
    STD   12,X
    LDD   #$FF40
    STD   16,X
    LDD   #$0000
    STD   14,X
    JSR   JMP_TO_REPLACES_HANDLER_AND_DOES_ALOT
    STU   R_A192
    STX   R_A18D
    LDA   #$5F
    LDX   #$C585
    JMP   L_0024BE
    LDX   #$C5F5
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    STX   R_A187
    LDA   #$17
    LDX   #$C598
    JMP   L_0024BE
    JSR   L_003460
    LDX   R_A18D
    JSR   REMOVE_X_FROM_LIST_A065|A06B
    JSR   LIST_REMOVE_$67_TO_X,X.next_FROM_$65
    JSR   L_002C63
    LDU   R_A192
    LDD   24,U
    STD   10,X
    LDD   U++
    STD   12,X
    LDD   #$0000
    STD   16,X
    STD   14,X
    JSR   JMP_TO_REPLACES_HANDLER_AND_DOES_ALOT
    STU   R_A192
    LDA   #$20
    LDX   #$C5CA
    JMP   L_0024BE
    LDX   R_A196
    LEAX  2,X
    STX   R_A196
    LDA   #$20
    LDX   #$C5DA
    JMP   L_0024BE
    LDU   R_A192
    CMPU  #$CC89
    LBNE  L_00354F
    LDA   #$FF
    LDX   #$C5ED
    JMP   L_0024BE
    LDA   #$FF
    LDX   #$C677
    JMP   L_0024BE
    LDX   R_A18B
    LDX   4,X
    LEAX  1796,X
    STX   7,U
    STX   9,U
    STX   R_A194
    LDA   #$04
    LDX   7,U
    LDB   #$11
L_00360B: ; 0x00360B, $C60B
    STB   X
    LEAX  256,X
    DECA
    BNE   L_00360B
    LDB   #$99
    STB   X
    STX   7,U
    LDY   $A0A4
    CMPY  #$A15F
    BLO   L_003627
    LDY   #$A142
L_003627: ; 0x003627, $C627
    LDX   9,U
    LDA   #$03
L_00362B: ; 0x00362B, $C62B
    LDB   Y+
    STB   X
    LEAX  256,X
    DECA
    BNE   L_00362B
    STY   $A0A4
    STX   9,U
    LDX   R_A194
    CLR   X
    LEAX  256,X
    STX   R_A194
    LDA   #$01
    LDX   #$C605
    JMP   L_0024BE
L_00364F: ; 0x00364F, $C64F
    LDY   #$CC61
L_003653: ; 0x003653, $C653
    LDU   14,Y
    LDX   Y++
    JSR   JMP_GOTO_PAST_JSR
    .db $C0
    .db $02
    .db $02
    STY   R_A198
    LDA   #$06
    LDX   #$C66B
    JMP   L_0024BE
    LDY   R_A198
    CMPY  R_A196
    BNE   L_003653
    BRA   L_00364F
L_003677: ; 0x003677, $C677
    JSR   SORT_LIST_A05F_INTO_OTHER_LISTS_IF_OBJ[5]!=2
    CLR   R_A184
    LDA   #$FB
    STA   $A0BA
    JSR   CLEAR_ALL_SCREEN
    CLR   SENTENCE_PTR_WORD_ON
    LDD   #$FFFF
    STD   TEXT_PTR_UNK
    LDX   #$E782
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LDX   #$F43D
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LDA   #$3F
    STA   $A032
    JMP   L_0036A2
L_0036A2: ; 0x0036A2, $C6A2
    JSR   L_00386F
    LDA   #$03
    STA   R_A16A
    LDX   #$C941
    STX   R_A16B
L_0036B0: ; 0x0036B0, $C6B0
    LDA   R_A16A
    STA   R_A163
    LDY   R_A16B
L_0036BA: ; 0x0036BA, $C6BA
    LDA   Y+
    CMPA  #$AA
    BLS   L_0036CE
    COMA
    BEQ   L_0036BA
    DECA
    BNE   L_003711
    LDD   Y++
    STD   R_A166
    CLRA
    BRA   L_0036E6
L_0036CE: ; 0x0036CE, $C6CE
    ASLA
    BHS   L_0036D4
    DEC   R_A166
L_0036D4: ; 0x0036D4, $C6D4
    ASLA
    BHS   L_0036DA
    INC   R_A166
L_0036DA: ; 0x0036DA, $C6DA
    ASLA
    BHS   L_0036E0
    DEC   R_A167
L_0036E0: ; 0x0036E0, $C6E0
    ASLA
    BHS   L_0036E6
    INC   R_A167
L_0036E6: ; 0x0036E6, $C6E6
    STA   R_A162
    LDD   R_A166
    LSRA
    TFR   D>X
    LDB   X
    BLO   L_0036F7
    ORB   #$F0
    BRA   L_0036F9
L_0036F7: ; 0x0036F7, $C6F7
    ORB   #$0F
L_0036F9: ; 0x0036F9, $C6F9
    STB   X
    LDA   R_A162
    BNE   L_0036CE
    DEC   R_A163
    BNE   L_0036BA
    STY   R_A16B
    LDA   #$02
    LDX   #$C6B0
    JSR   L_0024BE
L_003711: ; 0x003711, $C711
    STX   R_A168
    LDA   #$03
    CMPA  R_A16A
    BNE   L_003728
    LDA   #$0A
    STA   R_A16A
    LDX   #$C730
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
L_003728: ; 0x003728, $C728
    LDX   #$C941
    STX   R_A16B
    BRA   L_0036B0
    LDX   #$C74C
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LDX   #$3258
    LDU   #$C0ED
    JSR   JMP_GOTO_PAST_JSR
    .db $C0
    .db $02
    .db $02
    LDA   #$05
    LDX   #$C738
    JSR   L_0024BE
    LDA   #$30
    LDX   #$C754
    JMP   L_0024BE
    LDD   #$B3D6
    STD   R_A16D
    LDD   #$B412
    STD   R_A16F
    LDD   #$0000
    STD   $A020
    LDD   #$0C00
    STD   R_A171
    LDD   #$B304
    STD   R_A173
L_003771: ; 0x003771, $C771
    LDX   R_A173
    LDY   R_A16D
    LDD   #$040C
    STD   Y
    LDD   R_A16F
    STD   2,Y
    ADDD  #$0060
    STD   R_A16F
    STY   2,X
    LDD   R_A171
    STD   10,X
    ADDD  #$0100
    STD   R_A171
    LDD   #$9800
    STD   12,X
    JSR   JMP_TO_REPLACES_HANDLER_AND_DOES_ALOT
    LEAX  14,X
    STX   R_A173
    LEAY  4,Y
    STY   R_A16D
    CMPY  #$B412
    BNE   L_003771
    LDA   #$2E
    LDX   #$C7B7
    JMP   L_0024BE
    LDX   #$B300
    LDD   #$3C18
    STD   X
    LDD   #$B412
    STD   2,X
    LDX   #$C848
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LDA   #$28
    LDX   #$C7D4
    JMP   L_0024BE
    LDX   #$F464
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LDU   R_A168
    LDY   #$CC11
    LDX   #$3BD0
L_0037E6: ; 0x0037E6, $C7E6
    LDD   Y++
    STD   R_A164
    LDA   #$01
L_0037ED: ; 0x0037ED, $C7ED
    CLRB
    BITA  R_A164
    BEQ   L_0037F5
    LDB   #$10
L_0037F5: ; 0x0037F5, $C7F5
    BITA  R_A165
    BEQ   L_0037FC
    ORB   #$01
L_0037FC: ; 0x0037FC, $C7FC
    STB   X+
    ASLA
    BNE   L_0037ED
    LEAX  248,X
    CMPY  #$CC61
    BNE   L_0037E6
    LDX   #$A026
    LDB   L_0036F8
    LDA   B,X
    COMA
    ANDA  #$07
    BNE   L_003820
    LDX   #$8018
    LDD   #$20A0
    STU   D,X
L_003820: ; 0x003820, $C820
    LDA   #$01
    STA   $A0B7
    LDX   #$C8F4
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    LDA   #$3C
    STA   R_A17D
    TST   R_A184
    LBNE  L_003351
    DEC   R_A17D
    BEQ   L_003845
    LDA   #$0A
    LDX   #$C831
    JMP   L_0024BE
L_003845: ; 0x003845, $C845
    JMP   L_003263
    LDY   #$B300
    LDD   #$3090
    JSR   GFX_BANK2_CHR_TO_SCREEN
    TST   R_9C00
    BNE   L_003867
    TST   R_9C40
    BNE   L_003867
    LDX   #$C921
    LDA   #$00
    JSR   FROM_LIST_A061_TO_A063_POINTS_TO+SETUP
    JMP   OBJ_X@A063_REMOVED_FROM_A05F+HANDLED
L_003867: ; 0x003867, $C867
    LDA   #$01
    LDX   #$C848
    JMP   L_0024BE
L_00386F: ; 0x00386F, $C86F
    LDX   #$B412
    LDY   #$CAA0
    CLRA
    STA   R_A177
    STA   R_A176
L_00387D: ; 0x00387D, $C87D
    LDA   Y
    LSRA
    LSRA
    LSRA
    LSRA
    BSR   L_003891
    LDA   Y+
    ANDA  #$0F
    BSR   L_003891
    CMPY  #$CC0E
    BNE   L_00387D
L_003891: ; 0x003891, $C891
    BITA  #$0C
    BNE   L_00389E
    ADDA  R_A176
    ASLA
    ASLA
    STA   R_A176
    RTS
L_00389E: ; 0x00389E, $C89E
    PSHS  A
    ANDA  #$03
    ADDA  R_A176
    STA   R_A176
    PULS  A
    ANDA  #$0C
    LSRA
    LSRA
    LDU   #$CC0D
    LDB   A,U
    STB   R_A175
    CMPX  #$B9B2
    BLO   L_0038BF
    LEAX  -1439,X
L_0038BF: ; 0x0038BF, $C8BF
    LDA   R_A177
    BEQ   L_0038D8
    LDA   X
    ANDA  #$F0
    STA   X
    LDA   R_A175
    ANDA  #$0F
    ORA   X
    STA   X
    LDA   R_A175
    BRA   L_0038E5
L_0038D8: ; 0x0038D8, $C8D8
    COM   R_A177
    LDA   R_A175
L_0038DE: ; 0x0038DE, $C8DE
    STA   X
    DEC   R_A176
    BMI   L_0038F0
L_0038E5: ; 0x0038E5, $C8E5
    LEAX  24,X
    DEC   R_A176
    BPL   L_0038DE
    CLR   R_A177
L_0038F0: ; 0x0038F0, $C8F0
    CLR   R_A176
    RTS
    LDB   VAL_FROM_SRAM_C495-C496
    BEQ   L_003919
    CMPB  R_A183
    BLS   L_003903
    STB   R_A183
    INC   R_A184
L_003903: ; 0x003903, $C903
    LDU   #$C0E9
    LDX   #$28E5
    JSR   JMP_GOTO_PAST_JSR
    .db $C0
    .db $02
    .db $02
    CLRA
    LDX   #$48E5
    JSR   JMP_GOTO_PAST_JSR
    .db $C0
    .db $0E
    .db $02
L_003919: ; 0x003919, $C919
    LDA   #$10
    LDX   #$C8F4
    JMP   L_0024BE
    LDA   #$FF
    STA   R_A16A
    LDA   #$02
    LDX   #$C92E
    JMP   L_0024BE
    LDA   #$0A
    STA   R_A16A
    JMP   OBJ_X@A063_REMOVED_FROM_A05F+HANDLED
L_003936: ; 0x003936, $C936
    LDA   A08C_CURRENT_PLAYER
L_003938: ; 0x003938, $C938
    BEQ   L_003940
    JSR   PLAYER_SCORE_TO_SCREEN
    DECA
    BRA   L_003938
L_003940: ; 0x003940, $C940
    RTS
    .db $FE
    .db $74
    .db $40
    .db $11
    .db $11
    .db $85
    .db $81
    .db $81
    .db $81
    .db $88
    .db $82
    .db $82
    .db $22
    .db $24
    .db $22
    .db $42
    .db $24
    .db $24
    .db $24
    .db $44
    .db $24
    .db $44
    .db $49
    .db $44
    .db $94
    .db $41
    .db $88
    .db $14
    .db $41
    .db $88
    .db $14
    .db $41
    .db $88
    .db $94
    .db $41
    .db $88
    .db $94
    .db $49
    .db $88
    .db $14
    .db $98
    .db $58
    .db $94
    .db $98
    .db $18
    .db $94
    .db $46
    .db $66
    .db $62
    .db $42
    .db $42
    .db $42
    .db $42
    .db $25
    .db $24
    .db $24
    .db $68
    .db $24
    .db $24
    .db $24
    .db $26
    .db $11
    .db $18
    .db $18
    .db $58
    .db $18
    .db $58
    .db $81
    .db $44
    .db $98
    .db $81
    .db $44
    .db $98
    .db $81
    .db $44
    .db $98
    .db $14
    .db $94
    .db $94
    .db $16
    .db $22
    .db $24
    .db $24
    .db $A4
    .db $24
    .db $A4
    .db $24
    .db $24
    .db $24
    .db $24
    .db $24
    .db $FE
    .db $81
    .db $4A
    .db $42
    .db $42
    .db $42
    .db $42
    .db $44
    .db $99
    .db $99
    .db $41
    .db $88
    .db $14
    .db $41
    .db $88
    .db $14
    .db $46
    .db $24
    .db $24
    .db $24
    .db $24
    .db $24
    .db $24
    .db $A4
    .db $24
    .db $24
    .db $A4
    .db $22
    .db $42
    .db $4A
    .db $42
    .db $42
    .db $44
    .db $99
    .db $19
    .db $91
    .db $19
    .db $91
    .db $91
    .db $81
    .db $81
    .db $41
    .db $81
    .db $49
    .db $46
    .db $42
    .db $42
    .db $42
    .db $42
    .db $42
    .db $42
    .db $24
    .db $22
    .db $42
    .db $62
    .db $62
    .db $42
    .db $24
    .db $49
    .db $19
    .db $91
    .db $91
    .db $91
    .db $91
    .db $91
    .db $85
    .db $88
    .db $14
    .db $94
    .db $14
    .db $24
    .db $24
    .db $24
    .db $24
    .db $24
    .db $24
    .db $A4
    .db $24
    .db $24
    .db $41
    .db $81
    .db $81
    .db $18
    .db $18
    .db $94
    .db $41
    .db $88
    .db $14
    .db $14
    .db $24
    .db $42
    .db $24
    .db $24
    .db $24
    .db $24
    .db $24
    .db $24
    .db $24
    .db $44
    .db $98
    .db $18
    .db $18
    .db $18
    .db $58
    .db $89
    .db $44
    .db $18
    .db $85
    .db $14
    .db $24
    .db $14
    .db $24
    .db $A4
    .db $24
    .db $24
    .db $24
    .db $A4
    .db $24
    .db $28
    .db $24
    .db $44
    .db $18
    .db $19
    .db $19
    .db $81
    .db $41
    .db $81
    .db $14
    .db $24
    .db $24
    .db $24
    .db $24
    .db $22
    .db $42
    .db $42
    .db $64
    .db $41
    .db $85
    .db $81
    .db $81
    .db $18
    .db $19
    .db $41
    .db $89
    .db $44
    .db $42
    .db $22
    .db $42
    .db $24
    .db $24
    .db $24
    .db $24
    .db $24
    .db $44
    .db $18
    .db $14
    .db $98
    .db $11
    .db $81
    .db $81
    .db $41
    .db $89
    .db $44
    .db $42
    .db $22
    .db $42
    .db $24
    .db $24
    .db $24
    .db $24
    .db $24
    .db $44
    .db $18
    .db $94
    .db $41
    .db $88
    .db $89
    .db $44
    .db $49
    .db $88
    .db $14
    .db $41
    .db $88
    .db $14
    .db $14
    .db $24
    .db $24
    .db $24
    .db $26
    .db $62
    .db $66
    .db $26
    .db $24
    .db $18
    .db $91
    .db $91
    .db $19
    .db $18
    .db $14
    .db $18
    .db $14
    .db $14
    .db $24
    .db $14
    .db $2A
    .db $45
    .db $24
    .db $68
    .db $88
    .db $24
    .db $44
    .db $42
    .db $18
    .db $A8
    .db $82
    .db $44
    .db $A8
    .db $22
    .db $20
    .db $FE
    .db $87
    .db $40
    .db $44
    .db $11
    .db $88
    .db $24
    .db $FE
    .db $9A
    .db $3F
    .db $44
    .db $11
    .db $88
    .db $24
    .db $FE
    .db $C1
    .db $3F
    .db $44
    .db $44
    .db $44
    .db $11
    .db $11
    .db $11
    .db $11
    .db $88
    .db $88
    .db $88
    .db $22
    .db $22
    .db $22
    .db $20
    .db $FE
    .db $C3
    .db $45
    .db $22
    .db $22
    .db $44
    .db $11
    .db $81
    .db $50
    .db $FD
    .db $10
    .db $D1
    .db $BD
    .db $29
    .db $C2
    .db $9C
    .db $29
    .db $CB
    .db $EA
    .db $C2
    .db $8C
    .db $29
    .db $C2
    .db $81
    .db $0D
    .db $10
    .db $C2
    .db $8D
    .db $29
    .db $C2
    .db $9C
    .db $29
    .db $CB
    .db $EA
    .db $42
    .db $94
    .db $29
    .db $42
    .db $81
    .db $0C
    .db $3F
    .db $29
    .db $C2
    .db $94
    .db $C2
    .db $9C
    .db $29
    .db $C1
    .db $8D
    .db $A4
    .db $29
    .db $42
    .db $94
    .db $29
    .db $3F
    .db $3E
    .db $29
    .db $42
    .db $A4
    .db $29
    .db $4C
    .db $29
    .db $C1
    .db $8D
    .db $A4
    .db $2A
    .db $42
    .db $94
    .db $29
    .db $3E
    .db $3D
    .db $B6
    .db $B4
    .db $A2
    .db $4A
    .db $17
    .db $CA
    .db $16
    .db $C1
    .db $9C
    .db $B4
    .db $A7
    .db $A4
    .db $B1
    .db $7A
    .db $7A
    .db $3D
    .db $3C
    .db $B6
    .db $B4
    .db $B1
    .db $71
    .db $81
    .db $6B
    .db $16
    .db $C1
    .db $AC
    .db $A4
    .db $B6
    .db $B4
    .db $A2
    .db $4A
    .db $6B
    .db $3C
    .db $2F
    .db $B6
    .db $B4
    .db $29
    .db $62
    .db $85
    .db $C2
    .db $85
    .db $C1
    .db $AC
    .db $A4
    .db $B6
    .db $B4
    .db $28
    .db $62
    .db $A2
    .db $F2
    .db $EB
    .db $61
    .db $84
    .db $29
    .db $62
    .db $8E
    .db $28
    .db $E2
    .db $A4
    .db $B7
    .db $B4
    .db $28
    .db $62
    .db $A2
    .db $E2
    .db $DB
    .db $7B
    .db $42
    .db $96
    .db $28
    .db $4E
    .db $28
    .db $E2
    .db $B4
    .db $B6
    .db $B4
    .db $29
    .db $62
    .db $92
    .db $E2
    .db $CB
    .db $7B
    .db $52
    .db $96
    .db $28
    .db $4E
    .db $28
    .db $EB
    .db $41
    .db $A4
    .db $B7
    .db $B4
    .db $28
    .db $62
    .db $92
    .db $E1
    .db $FB
    .db $7B
    .db $5B
    .db $24
    .db $B1
    .db $6D
    .db $18
    .db $14
    .db $EB
    .db $51
    .db $94
    .db $B7
    .db $B4
    .db $18
    .db $17
    .db $29
    .db $2D
    .db $1E
    .db $B1
    .db $4B
    .db $4B
    .db $25
    .db $B1
    .db $6D
    .db $B1
    .db $5E
    .db $B5
    .db $1A
    .db $4B
    .db $61
    .db $84
    .db $B2
    .db $4B
    .db $41
    .db $82
    .db $C1
    .db $DB
    .db $14
    .db $B5
    .db $18
    .db $17
    .db $18
    .db $16
    .db $D1
    .db $81
    .db $4E
    .db $B6
    .db $19
    .db $4B
    .db $61
    .db $84
    .db $18
    .db $24
    .db $B4
    .db $18
    .db $1F
    .db $1C
    .db $38
    .db $53
    .db $84
    .db $B1
    .db $6E
    .db $2B
    .db $CB
    .db $61
    .db $94
    .db $38
    .db $42
    .db $B4
    .db $18
    .db $41
    .db $81
    .db $EF
    .db $39
    .db $43
    .db $85
    .db $B1
    .db $6E
    .db $2B
    .db $CB
    .db $71
    .db $84
    .db $38
    .db $43
    .db $84
    .db $B6
    .db $18
    .db $1C
    .db $E3
    .db $95
    .db $38
    .db $41
    .db $81
    .db $6D
    .db $38
    .db $CB
    .db $C6
    .db $19
    .db $42
    .db $B5
    .db $38
    .db $4B
    .db $61
    .db $8F
    .db $D3
    .db $95
    .db $38
    .db $5B
    .db $51
    .db $F3
    .db $8C
    .db $BD
    .db $61
    .db $84
    .db $2A
    .db $63
    .db $85
    .db $B6
    .db $18
    .db $ED
    .db $38
    .db $53
    .db $94
    .db $18
    .db $51
    .db $F3
    .db $8C
    .db $BD
    .db $7B
    .db $42
    .db $91
    .db $42
    .db $B5
    .db $18
    .db $7B
    .db $DC
    .db $21
    .db $51
    .db $F3
    .db $4C
    .db $7E
    .db $30
    .db $6C
    .db $C2
    .db $14
    .db $2C
    .db $34
    .db $C7
    .db $E1
    .db $07
    .db $C1
    .db $35
    .db $CC
    .db $21
    .db $42
    .db $C3
    .db $4C
    .db $7F
    .db $10
    .db $6C
    .db $13
    .db $5C
    .db $C1
    .db $35
    .db $C1
    .db $52
    .db $C3
    .db $4C
    .db $7F
    .db $15
    .db $C2
    .db $7D
    .db $34
    .db $C1
    .db $5C
    .db $17
    .db $CC
    .db $36
    .db $C3
    .db $5C
    .db $14
    .db $2D
    .db $34
    .db $C7
    .db $1C
    .db $14
    .db $C2
    .db $6E
    .db $34
    .db $D1
    .db $4E
    .db $15
    .db $CC
    .db $36
    .db $C3
    .db $5C
    .db $14
    .db $2D
    .db $34
    .db $C7
    .db $1C
    .db $14
    .db $C2
    .db $51
    .db $C2
    .db $7D
    .db $14
    .db $F1
    .db $4C
    .db $22
    .db $CC
    .db $00
    .db $3E
    .db $41
    .db $41
    .db $22
    .db $00
    .db $3E
    .db $41
    .db $41
    .db $3E
    .db $00
    .db $7F
    .db $09
    .db $09
    .db $06
    .db $00
    .db $03
    .db $04
    .db $78
    .db $04
    .db $03
    .db $00
    .db $7F
    .db $09
    .db $19
    .db $66
    .db $00
    .db $41
    .db $7F
    .db $41
    .db $00
    .db $3E
    .db $41
    .db $49
    .db $3A
    .db $00
    .db $7F
    .db $08
    .db $08
    .db $7F
    .db $00
    .db $01
    .db $01
    .db $7F
    .db $01
    .db $01
    .db $00
    .db $1C
    .db $22
    .db $5D
    .db $63
    .db $55
    .db $22
    .db $1C
    .db $22
    .db $7F
    .db $4B
    .db $45
    .db $22
    .db $1C
    .db $00
    .db $00
    .db $00
    .db $42
    .db $7F
    .db $40
    .db $00
    .db $26
    .db $49
    .db $49
    .db $3E
    .db $00
    .db $36
    .db $49
    .db $49
    .db $36
    .db $00
    .db $3E
    .db $41
    .db $41
    .db $3E
    .db $43
    .db $30
    .db $1C
    .db $70
    .db $3C
    .db $70
    .db $5F
    .db $70
    .db $1C
    .db $A8
    .db $40
    .db $A8
    .db $5C
    .db $A8
    .db $C0
    .db $EB
    .db $C0
    .db $DD
    .db $C0
    .db $DF
    .db $C0
    .db $E7
    .db $C0
    .db $E3
    .db $C0
    .db $E1
    .db $C0
    .db $E5
    .db $60
    .db $00
    .db $60
    .db $00
    .db $62
    .db $00
    .db $98
    .db $00
    .db $98
    .db $00
    .db $9A
    .db $00
    .db $F9
    .db $85
    .db $F8
    .db $CE
    .db $F9
    .db $A3
    .db $F9
    .db $29
    .db $F8
    .db $F7
    .db $F9
    .db $7B
    .db $09
    .db $00
    .db $11
    .db $00
    .db $19
    .db $80
    .db $09
    .db $60
    .db $11
    .db $60
    .db $19
    .db $E0
    .db $44
    .db $33
    .db $CC
    .db $33
    .db $33
    .db $33
    .db $88
    .db $88
    .db $CC
    .db $CC
    .db $24
    .db $24
L_003CAD: ; 0x003CAD, $CCAD
    LDU   #$0000
    LDB   #$08
    LDX   #$B05D
L_003CB5: ; 0x003CB5, $CCB5
    STU   [X]
    STU   [2,X]
    STU   [4,X]
    STU   [6,X]
    ABX
    CMPX  R_A097
    BLO   L_003CB5
    LDX   [R_A097]
    BEQ   L_003CD3
    STU   X
    CLR   2,X
    STU   -256,X
L_003CD3: ; 0x003CD3, $CCD3
    LDD   $A020
    SUBD  #$6D40
    STD   A073_LOOP_CNT_HUMANOID/MISC?
    LSRA
    LSRA
    LDU   #$CD69
    LDB   #$03
    MUL
    LEAU  D,U
    LDA   $A0BA
    BITA  #$02
    BNE   L_003D0C
    LDA   #$30
    LDY   #$B125
L_003CF0: ; 0x003CF0, $CCF0
    LDX   #$0000
    STX   [Y]
    PULU  B,X
    STD   Y
    STX   [Y++]
    INCA
    LDX   #$0000
    STX   [Y]
    PULU  B,X
    STD   Y
    STX   [Y++]
    INCA
    CMPA  #$70
    BNE   L_003CF0
L_003D0C: ; 0x003D0C, $CD0C
    LDX   #$4C09
    LDD   #$9090
    STD   X
    STD   29,X
    LDX   #$5309
    LDD   #$0909
    STD   X
    STD   29,X
    LDX   #$A065
    LDU   #$B05D
    BSR   L_003D64
    LDX   #$A06B
    BSR   L_003D64
    STU   R_A097
    LDD   $A0BF
    LSRA
    LSRA
    LSRA
    LSRA
    LSRB
    LSRB
    LSRB
    ADDD  #$4B07
    STD   U
    LDX   U
    LDD   #$9099
    STD   X
    STA   2,X
    LDA   #$09
    STA   -255,X
    RTS
L_003D4F: ; 0x003D4F, $CD4F
    LDD   10,X
    SUBD  A073_LOOP_CNT_HUMANOID/MISC?
    LSRA
    LSRA
    LDB   12,X
    LSRB
    LSRB
    LSRB
    ADDD  #$3007
    STD   U
    LDD   18,X
    STD   [U++]
L_003D64: ; 0x003D64, $CD64
    LDX   X
    BNE   L_003D4F
    RTS
    .db $25
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $26
    .db $07
    .db $70
    .db $24
    .db $07
    .db $70
    .db $23
    .db $07
    .db $70
    .db $23
    .db $70
    .db $07
    .db $24
    .db $07
    .db $70
    .db $25
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $25
    .db $07
    .db $70
    .db $24
    .db $07
    .db $70
    .db $23
    .db $07
    .db $70
    .db $21
    .db $07
    .db $70
    .db $22
    .db $70
    .db $07
    .db $24
    .db $77
    .db $00
    .db $24
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $26
    .db $77
    .db $00
    .db $25
    .db $77
    .db $00
    .db $25
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $24
    .db $07
    .db $70
    .db $23
    .db $70
    .db $07
    .db $25
    .db $77
    .db $00
    .db $26
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $26
    .db $77
    .db $00
    .db $25
    .db $07
    .db $70
    .db $23
    .db $07
    .db $70
    .db $22
    .db $07
    .db $70
    .db $21
    .db $77
    .db $00
    .db $21
    .db $70
    .db $07
    .db $23
    .db $70
    .db $07
    .db $25
    .db $70
    .db $07
    .db $25
    .db $07
    .db $70
    .db $25
    .db $77
    .db $00
    .db $25
    .db $77
    .db $00
    .db $24
    .db $77
    .db $00
    .db $22
    .db $07
    .db $70
    .db $20
    .db $07
    .db $70
    .db $1E
    .db $07
    .db $70
    .db $1C
    .db $07
    .db $70
    .db $1D
    .db $70
    .db $07
    .db $1F
    .db $70
    .db $07
    .db $21
    .db $70
    .db $07
    .db $22
    .db $70
    .db $07
    .db $24
    .db $70
    .db $07
    .db $26
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $26
    .db $77
    .db $00
    .db $26
    .db $77
    .db $00
    .db $26
    .db $77
    .db $00
    .db $26
    .db $77
    .db $00
    .db $25
    .db $77
    .db $00
    .db $25
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $24
    .db $07
    .db $70
    .db $23
    .db $77
    .db $00
    .db $24
    .db $77
    .db $00
    .db $22
    .db $07
    .db $70
    .db $23
    .db $70
    .db $07
    .db $22
    .db $07
    .db $70
    .db $21
    .db $70
    .db $07
    .db $23
    .db $70
    .db $07
    .db $25
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $26
    .db $07
    .db $70
    .db $24
    .db $07
    .db $70
    .db $23
    .db $07
    .db $70
    .db $23
    .db $70
    .db $07
    .db $24
    .db $07
    .db $70
    .db $25
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $25
    .db $07
    .db $70
    .db $24
    .db $07
    .db $70
    .db $23
    .db $07
    .db $70
    .db $21
    .db $07
    .db $70
    .db $22
    .db $70
    .db $07
    .db $24
    .db $77
    .db $00
    .db $24
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $26
    .db $77
    .db $00
    .db $25
    .db $77
    .db $00
    .db $25
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $24
    .db $07
    .db $70
    .db $23
    .db $70
    .db $07
    .db $25
    .db $77
    .db $00
    .db $26
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $26
    .db $77
    .db $00
    .db $25
    .db $07
    .db $70
    .db $23
    .db $07
    .db $70
    .db $22
    .db $07
    .db $70
    .db $21
    .db $77
    .db $00
    .db $21
    .db $70
    .db $07
    .db $23
    .db $70
    .db $07
    .db $25
    .db $70
    .db $07
    .db $25
    .db $07
    .db $70
    .db $25
    .db $77
    .db $00
    .db $25
    .db $77
    .db $00
    .db $24
    .db $77
    .db $00
    .db $22
    .db $07
    .db $70
    .db $20
    .db $07
    .db $70
    .db $1E
    .db $07
    .db $70
    .db $1C
    .db $07
    .db $70
    .db $1D
    .db $70
    .db $07
    .db $1F
    .db $70
    .db $07
    .db $21
    .db $70
    .db $07
    .db $22
    .db $70
    .db $07
    .db $24
    .db $70
    .db $07
    .db $26
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $26
    .db $77
    .db $00
    .db $26
    .db $77
    .db $00
    .db $26
    .db $77
    .db $00
    .db $26
    .db $77
    .db $00
    .db $25
    .db $77
    .db $00
    .db $25
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $24
    .db $07
    .db $70
    .db $23
    .db $77
    .db $00
    .db $24
    .db $77
    .db $00
    .db $22
    .db $07
    .db $70
    .db $23
    .db $70
    .db $07
    .db $22
    .db $07
    .db $70
    .db $21
    .db $70
    .db $07
    .db $23
    .db $70
    .db $07
    .db $80
    .db $00
    .db $00
    .db $30
    .db $00
    .db $30
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $03
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $96
    .db $00
    .db $00
    .db $00
    .db $00
    .db $FE
    .db $C3
    .db $00
    .db $00
    .db $00
    .db $00
    .db $D6
    .db $66
    .db $00
    .db $00
    .db $00
    .db $00
    .db $66
    .db $66
    .db $39
    .db $00
    .db $06
    .db $66
    .db $66
    .db $88
    .db $68
    .db $66
    .db $66
    .db $66
    .db $88
    .db $88
    .db $88
    .db $00
    .db $60
    .db $63
    .db $30
    .db $63
    .db $00
    .db $06
    .db $26
    .db $68
    .db $28
    .db $60
    .db $66
    .db $66
    .db $86
    .db $00
    .db $00
    .db $66
    .db $66
    .db $00
    .db $00
    .db $ED
    .db $66
    .db $00
    .db $00
    .db $00
    .db $63
    .db $90
    .db $09
    .db $90
    .db $99
    .db $99
    .db $99
    .db $90
    .db $CC
    .db $90
    .db $11
    .db $00
    .db $11
    .db $10
    .db $11
    .db $00
    .db $10
    .db $10
    .db $10
    .db $00
    .db $10
    .db $00
    .db $11
    .db $10
    .db $11
    .db $00
    .db $11
    .db $00
    .db $10
    .db $00
    .db $10
    .db $10
    .db $10
    .db $00
    .db $11
    .db $10
    .db $10
    .db $10
    .db $11
    .db $00
    .db $10
    .db $10
    .db $10
    .db $10
    .db $10
    .db $00
    .db $01
    .db $00
    .db $01
    .db $01
    .db $01
    .db $00
    .db $11
    .db $01
    .db $11
    .db $00
    .db $11
    .db $00
    .db $01
    .db $01
    .db $01
    .db $00
    .db $01
    .db $00
    .db $11
    .db $00
    .db $11
    .db $01
    .db $11
    .db $00
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $11
    .db $01
    .db $01
    .db $01
    .db $11
    .db $00
    .db $FF
    .db $F0
    .db $FF
    .db $00
    .db $FF
    .db $00
    .db $F0
    .db $00
    .db $F0
    .db $F0
    .db $F0
    .db $00
    .db $EE
    .db $E0
    .db $E0
    .db $E0
    .db $EE
    .db $00
    .db $E0
    .db $E0
    .db $E0
    .db $E0
    .db $E0
    .db $00
    .db $DD
    .db $D0
    .db $D0
    .db $D0
    .db $DD
    .db $00
    .db $D0
    .db $D0
    .db $D0
    .db $D0
    .db $D0
    .db $00
    .db $0F
    .db $0F
    .db $0F
    .db $00
    .db $0F
    .db $00
    .db $FF
    .db $00
    .db $FF
    .db $0F
    .db $FF
    .db $00
    .db $0E
    .db $0E
    .db $0E
    .db $0E
    .db $0E
    .db $00
    .db $EE
    .db $0E
    .db $0E
    .db $0E
    .db $EE
    .db $00
    .db $0D
    .db $0D
    .db $0D
    .db $0D
    .db $0D
    .db $00
    .db $DD
    .db $0D
    .db $0D
    .db $0D
    .db $DD
    .db $00
    .db $1C
    .db $0D
    .db $7F
    .db $E7
    .db $70
    .db $00
    .db $0F
    .db $71
    .db $71
    .db $07
    .db $DC
    .db $77
    .db $7C
    .db $0D
    .db $71
    .db $C7
    .db $77
    .db $DE
    .db $07
    .db $71
    .db $17
    .db $17
    .db $DE
    .db $F7
    .db $71
    .db $17
    .db $71
    .db $7C
    .db $DE
    .db $F0
    .db $07
    .db $77
    .db $C7
    .db $71
    .db $17
    .db $70
    .db $70
    .db $7C
    .db $D7
    .db $77
    .db $77
    .db $70
    .db $01
    .db $CD
    .db $FF
    .db $D7
    .db $70
    .db $F0
    .db $00
    .db $00
    .db $00

;Bank 2
	.org $C000

    .db $C5 ; Used in 0x400 area.
    .db $FB
    JMP   TEXT_RTN_PTRS=$FFB3/$CAED ; The left value is IDK, right is a callback?
    JMP   TEXT_RTN_PTRS=$FFB6/$CAED ; Callback sentences.
    JMP   TEST_RTN_PTRS=$FFB3/$CB5F
    JMP   TEXT_RTN_PTRS=$FFB6/$CB5F
JMP_TO_VAL_IN_AB_TO_SCREEN: ; 0x00400E, $C00E
    JMP   TEXT_RTN_PTRS=$FFB3/$CC0F
    JMP   TEXT_RTN_PTRS=$FFB6/$CC0F ; This callback handles A/B as a number to the screen.
    JMP   TEXT_RTN_PTRS=$FFB3/$CC39
    JMP   TEXT_RTN_PTRS=$FFB6/$CC39
    JMP   TEXT_RTN_SPECIAL_PTR=$FFB6
    JMP   TEXT_RTN_SPECIAL_PTR=$FFB3
    JMP   TEXT_SENTENCE_RTN_PTR=$C0D9
    JMP   TEXT_SENTENCE_RTN_PTR=$C0BB
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $5B
    .db $FF
    .db $C0
    .db $BD
    .db $C0
    .db $BF
    .db $C0
    .db $C1
    .db $00
    .db $00
    .db $C0
    .db $C1
    .db $00
    .db $00
    .db $C0
    .db $C3
    .db $00
    .db $00
    .db $C0
    .db $C5
    .db $00
    .db $00
    .db $C0
    .db $C5
    .db $00
    .db $00
    .db $C0
    .db $C7
    .db $00
    .db $00
    .db $C0
    .db $C3
    .db $00
    .db $00
    .db $C0
    .db $C9
    .db $00
    .db $00
    .db $C0
    .db $CB
    .db $C0
    .db $CD
    .db $C0
    .db $CF
    .db $00
    .db $00
    .db $C0
    .db $BD
    .db $C0
    .db $D1
    .db $C0
    .db $D3
    .db $C0
    .db $D5
    .db $C0
    .db $DB
    .db $00
    .db $00
GLB_SENTENCES_START: ; 0x004069, $C069
    .db $C1 ; SENTENCE INITIAL TESTS INDICATE
    .db $07
    .db $C1 ; SENTENCE UNIT OK
    .db $0D
    .db $C1 ; SENTENCE ROM
    .db $11
    .db $C1 ; SENTENCE RAM
    .db $13
    .db $C1 ; SENTENCE ROM FAILURE
    .db $15
    .db $C1 ; SENTENCE RAM FAILURE
    .db $19
    .db $C1 ; SENTENCE GAME OVER
    .db $1D
    .db $C1 ; SENTENCE ALL ROMS OK
    .db $21
    .db $C1 ; SENTENCE RAM TEST
    .db $27
    .db $C1 ; SENTENCE NO RAM ERRORS DETECTED
    .db $2B
    .db $C1 ; SENTENCE CMOS RAM FAILURE
    .db $33
    .db $C1 ; SENTENCE CMOS RAM OK
    .db $4D
    .db $C1 ; SENTENCE MULTIPLE RAM FAILURE
    .db $53
    .db $C1 ; SENTENCE COLOR RAM TEST
    .db $6D
    .db $C1 ; SENTENCE AUDIO TEST
    .db $88
    .db $C1 ; SENTENCE SWITCH TEST
    .db $92
    .db $C1 ; SENTENCE MONITOR TEST
    .db $96
    .db $C1 ; SENTENCE AUTO UP
    .db $9C
    .db $C1 ; SENTENCE ADVANCE
    .db $A0
    .db $C1 ; SENTENCE RIGHT COIN
    .db $A2
    .db $C1 ; SENTENCE HIGHSCORE RESET
    .db $A6
    .db $C1 ; SENTENCE LEFT COIN
    .db $A8
    .db $C1 ; SENTENCE CENTER COIN
    .db $AC
    .db $C1 ; SENTENCE INVALID SWITCH
    .db $B0
    .db $C1 ; SENTENCE INVALID SWITCH
    .db $B2
    .db $C1 ; SENTENCE FIRE
    .db $B4
    .db $C1 ; SENTENCE THRUST
    .db $B6
    .db $C1 ; SENTENCE SMART BOMB
    .db $B8
    .db $C1 ; SENTENCE HYPERSPACE
    .db $BC
    .db $C1 ; SENTENCE TWO PLAYERS
    .db $BE
    .db $C1 ; SENTENCE ONE PLAYER
    .db $C2
    .db $C1 ; SENTENCE REVERSE
    .db $C6
    .db $C1 ; SENTENCE DOWN
    .db $C8
    .db $C1 ; SENTENCE UP
    .db $CA
    .db $C1 ; SENTENCE INVALID SWITCH (ALL BLANK BELOW TOO)
    .db $CC
    .db $C1
    .db $CE
    .db $C1
    .db $D0
    .db $C1
    .db $D2
    .db $C1
    .db $D4
    .db $C1
    .db $D6
    .db $C1
    .db $D8
    .db $C1 ; SENTENCE PRESS ADVANCE WITH SWITCH SET FOR [CMD]:
    .db $DA
    .db $C1 ; SENTENCE AUTO FOR AUDIT, GAME ADJUSTMENT
    .db $EA
    .db $C1 ; SENTENCE MANUAL FOR ROM TEST
    .db $F8
    .db $C2 ; SENTENCE AUTO FOR RAM TEST
    .db $00
    .db $C2 ; SENTENCE AUTO TO EXIT TEST
    .db $08
    .db $C2 ; SENTENCE AUTO FOR CMOS RAM TEST
    .db $10
    .db $C2 ; SENTENCE AUTO FOR COLOR RAM TEST
    .db $1A
    .db $C2 ; SENTENCE AUTO FOR AUDIO TEST
    .db $24
    .db $C2 ; SENTENCE AUTO FOR SWITCH TEST
    .db $2C
    .db $C2 ; SENTENCE MANUAL TO TEST INDIVIDUAL SOUNDS
    .db $34
    .db $C2 ; SENTENCE AUTO FOR MONITOR TEST PATTERNS
    .db $3E
    .db $C2 ; SENTENCE MANUAL TO STEP THRU PATTERNS
    .db $48
    .db $C2 ; SENTENCE AUTO FOR GAME OVER
    .db $52
    .db $C2 ; SENTENCE MANUAL TO STEP THRU ADJUSTMENT
    .db $5A
    .db $C2 ; SENTENCE WILLIAMS DEFENDER
    .db $64
    .db $C2 ; SENTENCE PRESS ADVANCE TO STEP THRU TEST
    .db $68
    .db $C2 ; SENTENCE PRESS HIGHSCORE RESET TO MAKE CHANGE
    .db $74
    .db $C2 ; SENTENCE LANDER 100
    .db $7E
    .db $C2 ; SENTENCE MUTANT 150
    .db $85
    .db $C2 ; SENTENCE " POD" 1000
    .db $8C
    .db $C2 ; SENTENCE BOMBER 250
    .db $93
    .db $C2 ; SENTENCE SWARMER 150
    .db $9A
    .db $C2 ; SENTENCE BAITER 200
    .db $A1
    .db $C2 ; SENTENCE CREDITS:
    .db $A8
    .db $C2 ; SENTENCE SCANNER
    .db $AA
    .db $C2 ; SENTENCE ELECTRONICS INC. PRESENTS
    .db $AC
    .db $C2 ; SENTENCE PLAYER ONE
    .db $B4
    .db $C2 ; SENTENCE PLAYER TWO
    .db $B8
    .db $C2 ; SENTENCE BONUS X
    .db $BC
    .db $C2 ; SENTENCE PRESS ONE PLAYER START
    .db $BE
    .db $C2 ; SENTENCE PRESS ONE OR TWO PLAYER START
    .db $C6
    .db $C2 ; SENTENCE ATTACK WAVE
    .db $D2
    .db $C2 ; SENTENCE COMPLETED
    .db $D6
    .db $C2 ; SENTENCE YOU HAVE COMPLETED...
    .db $D8
    .db $C3 ; SENTENCE PTR TO A000, A002, A004
    .db $01
    .db $C3 ; SENTENCE HALL OF FAME
    .db $0B
    .db $C3 ; SENTENCE PTR TO A006, A008, A00C
    .db $21 ; WORD POINTERS AFTER THIS.
    .db $C3 ; ADJUSTMENT
    .db $2B
    .db $C4 ; INITIAL
    .db $64
    .db $C5 ; TESTS
    .db $8D
    .db $C4 ; INDICATE
    .db $50
    .db $C5 ; UNIT
    .db $BB
    .db $C4 ; OK
    .db $D1
    .db $C5 ; ROM
    .db $2D
    .db $C5 ; RAM
    .db $1B
    .db $C5 ; ROM
    .db $2D
    .db $C4 ; FAILURE
    .db $04
    .db $C5 ; RAM
    .db $1B
    .db $C4 ; FAILURE
    .db $04
    .db $C4 ; GAME
    .db $15
    .db $C4 ; OVER
    .db $E0
    .db $C3 ; ALL
    .db $3E
    .db $C5 ; ROMS
    .db $31
    .db $C4 ; OK
    .db $D1
    .db $C5 ; RAM
    .db $1B
    .db $C5 ; TEST
    .db $81
    .db $C4 ; NO
    .db $CA
    .db $C5 ; RAM
    .db $1B
    .db $C3 ; ERRORS
    .db $F8
    .db $C3 ; DETECTED
    .db $C6
    .db $C3 ; CMOS
    .db $93
    .db $C5 ; RAM
    .db $1B
    .db $C4 ; FAILURE
    .db $04
    .db $06
    .db $28
    .db $A0
    .db $C5 ; TEST
    .db $81
    .db $C4 ; MUST
    .db $AD
    .db $C3 ; BE
    .db $66
    .db $C3 ; ENTERED
    .db $F0
    .db $07
    .db $C5 ; WITH
    .db $DA
    .db $C3 ; COIN
    .db $98
    .db $C3 ; DOOR
    .db $CF
    .db $C4 ; OPEN
    .db $D8
    .db $C3 ; CMOS
    .db $93
    .db $C5 ; RAM
    .db $1B
    .db $C4 ; OK
    .db $D1
    .db $C4 ; MULTIPLE
    .db $A4
    .db $C5 ; RAM
    .db $1B
    .db $C4 ; FAILURE
    .db $04
    .db $03
    .db $FE
    .db $C3 ; ,
    .db $81
    .db $04
    .db $10
    .db $02
    .db $F8
    .db $C3 ; CMOS
    .db $93
    .db $C5 ; RAM
    .db $1B
    .db $C3 ; CAN
    .db $7D
    .db $C4 ; NOT
    .db $CD
    .db $C3 ; BE
    .db $66
    .db $C5 ; TESTED
    .db $86
    .db $C3 ; COLOR
    .db $9D
    .db $C5 ; RAM
    .db $1B
    .db $C5 ; TEST
    .db $81
    .db $04
    .db $30
    .db $02
    .db $E8
    .db $C5 ; VERTICAL
    .db $C3
    .db $C3 ; COLOR
    .db $9D
    .db $C3 ; BARS
    .db $61
    .db $C4 ; INDICATE
    .db $50
    .db $07
    .db $03
    .db $FC
    .db $C3 ; COLOR
    .db $9D
    .db $C5 ; RAM
    .db $1B
    .db $C4 ; FAILURE
    .db $04
    .db $C3 ; AUDIO
    .db $49
    .db $C5 ; TEST
    .db $81
    .db $07
    .db $07
    .db $03
    .db $04
    .db $C5 ; SOUND
    .db $54
    .db $C5 ; SWITCH
    .db $7A
    .db $C5 ; TEST
    .db $81
    .db $C4 ; MONITOR
    .db $9C
    .db $C5 ; TEST
    .db $81
    .db $C4 ; PATTERNS
    .db $E5
    .db $C3 ; AUTO
    .db $55
    .db $C5 ; UP
    .db $C0
    .db $C3 ; ADVANCE
    .db $36
    .db $C5 ; RIGHT
    .db $27
    .db $C3 ; COIN
    .db $98
    .db $C4 ; HIGHSCORE RESET
    .db $35
    .db $C4 ; LEFT
    .db $8B
    .db $C3 ; COIN
    .db $98
    .db $C3 ; CENTER
    .db $85
    .db $C3 ; COIN
    .db $98
    .db $C4 ; INVALID SWITCH
    .db $75
    .db $C4 ; INVALID SWITCH
    .db $75
    .db $C4 ; FIRE
    .db $0C
    .db $C5 ; THRUST
    .db $9C
    .db $C5 ; SMART
    .db $4E
    .db $C3 ; BOMB
    .db $69
    .db $C4 ; HYPERSPACE
    .db $45
    .db $C5 ; TWO
    .db $B7
    .db $C4 ; PLAYERS
    .db $F5
    .db $C4 ; ONE
    .db $D4
    .db $C4 ; PLAYER
    .db $EE
    .db $C5 ; REVERSE
    .db $1F
    .db $C3 ; DOWN
    .db $D4
    .db $C5 ; UP
    .db $C0
    .db $C4 ; INVALID SWITCH
    .db $75
    .db $C4 ; INVALID SWITCH
    .db $75
    .db $C4 ; INVALID SWITCH
    .db $75
    .db $C4 ; INVALID SWITCH
    .db $75
    .db $C4 ; INVALID SWITCH
    .db $75
    .db $C4 ; INVALID SWITCH
    .db $75
    .db $C4 ; INVALID SWITCH
    .db $75
    .db $C5 ; PRESS
    .db $0B
    .db $C3 ; ADVANCE
    .db $36
    .db $C5 ; WITH
    .db $DA
    .db $C5 ; SWITCH
    .db $7A
    .db $C5 ; SET
    .db $45
    .db $C4 ; FOR
    .db $11
    .db $03
    .db $FE
    .db $C3 ; :
    .db $83
    .db $C3 ; AUTO
    .db $55
    .db $C4 ; FOR
    .db $11
    .db $C3 ; AUDIT
    .db $4F
    .db $03
    .db $FE
    .db $C3 ; ,
    .db $81
    .db $C4 ; GAME
    .db $15
    .db $C3 ; ADJUSTMENT
    .db $2B
    .db $C4 ; MANUAL
    .db $95
    .db $C4 ; FOR
    .db $11
    .db $C5 ; ROM
    .db $2D
    .db $C5 ; TEST
    .db $81
    .db $C3 ; AUTO
    .db $55
    .db $C4 ; FOR
    .db $11
    .db $C5 ; RAM
    .db $1B
    .db $C5 ; TEST
    .db $81
    .db $C3 ; AUTO
    .db $55
    .db $C5 ; TO
    .db $AD
    .db $C3 ; EXIT
    .db $FF
    .db $C5 ; TEST
    .db $81
    .db $C3 ; AUTO
    .db $55
    .db $C4 ; FOR
    .db $11
    .db $C3 ; CMOS
    .db $93
    .db $C5 ; RAM
    .db $1B
    .db $C5 ; TEST
    .db $81
    .db $C3 ; AUTO
    .db $55
    .db $C4 ; FOR
    .db $11
    .db $C3 ; COLOR
    .db $9D
    .db $C5 ; RAM
    .db $1B
    .db $C5 ; TEST
    .db $81
    .db $C3 ; AUTO
    .db $55
    .db $C4 ; FOR
    .db $11
    .db $C3 ; AUDIO
    .db $49
    .db $C5 ; TEST
    .db $81
    .db $C3 ; AUTO
    .db $55
    .db $C4 ; FOR
    .db $11
    .db $C5 ; SWITCH
    .db $7A
    .db $C5 ; TEST
    .db $81
    .db $C4 ; MANUAL
    .db $95
    .db $C5 ; TO
    .db $AD
    .db $C5 ; TEST
    .db $81
    .db $C4 ; INDIVIDUAL
    .db $59
    .db $C5 ; SOUNDS
    .db $5A
    .db $C3 ; AUTO
    .db $55
    .db $C4 ; FOR
    .db $11
    .db $C4 ; MONITOR
    .db $9C
    .db $C5 ; TEST
    .db $81
    .db $C4 ; PATTERNS
    .db $E5
    .db $C4 ; MANUAL
    .db $95
    .db $C5 ; TO
    .db $AD
    .db $C5 ; STEP
    .db $67
    .db $C5 ; THRU
    .db $97
    .db $C4 ; PATTERNS
    .db $E5
    .db $C3 ; AUTO
    .db $55
    .db $C4 ; FOR
    .db $11
    .db $C4 ; GAME
    .db $15
    .db $C4 ; OVER
    .db $E0
    .db $C4 ; MANUAL
    .db $95
    .db $C5 ; TO
    .db $AD
    .db $C5 ; STEP
    .db $67
    .db $C5 ; THRU
    .db $97
    .db $C3 ; ADJUSTMENT
    .db $2B
    .db $C5 ; WILLIAMS
    .db $D1
    .db $C3 ; DEFENDER
    .db $BD
    .db $C5 ; PRESS
    .db $0B
    .db $C3 ; ADVANCE
    .db $36
    .db $C5 ; TO
    .db $AD
    .db $C5 ; STEP
    .db $67
    .db $C5 ; THRU
    .db $97
    .db $C5 ; TEST
    .db $81
    .db $C5 ; PRESS
    .db $0B
    .db $C4 ; HIGHSCORE RESET
    .db $35
    .db $C5 ; TO
    .db $AD
    .db $C4 ; MAKE
    .db $90
    .db $C3 ; CHANGE
    .db $8C
    .db $C4 ; LANDER
    .db $84
    .db $07
    .db $03
    .db $06
    .db $C4 ; 150
    .db $B9
    .db $C4 ; MUTANT
    .db $B2
    .db $07
    .db $03
    .db $06
    .db $C4 ; 150
    .db $B9
    .db $C4 ; " POD"
    .db $FD
    .db $07
    .db $03
    .db $00
    .db $C4 ; 1000
    .db $C5
    .db $C3 ; BOMBER
    .db $6E
    .db $07
    .db $03
    .db $06
    .db $C4 ; 250
    .db $C1
    .db $C5 ; SWARMER
    .db $72
    .db $07
    .db $03
    .db $08
    .db $C4 ; 150
    .db $B9
    .db $C3 ; BAITER
    .db $5A
    .db $07
    .db $03
    .db $06
    .db $C4 ; 200
    .db $BD
    .db $C3 ; CREDITS:
    .db $B4
    .db $C5 ; SCANNER
    .db $36
    .db $C3 ; ELECTRONICS INC.
    .db $D9
    .db $07
    .db $07
    .db $03
    .db $0C
    .db $C5 ; PRESENTS
    .db $02
    .db $C4 ; PLAYER
    .db $EE
    .db $C4 ; ONE
    .db $D4
    .db $C4 ; PLAYER
    .db $EE
    .db $C5 ; TWO
    .db $B7
    .db $C3 ; BONUS X
    .db $75
    .db $C5 ; PRESS
    .db $0B
    .db $C4 ; ONE
    .db $D4
    .db $C4 ; PLAYER
    .db $EE
    .db $C5 ; START
    .db $61
    .db $C5 ; PRESS
    .db $0B
    .db $C4 ; ONE
    .db $D4
    .db $C4 ; OR
    .db $DD
    .db $C5 ; TWO
    .db $B7
    .db $C4 ; PLAYER
    .db $EE
    .db $C5 ; START
    .db $61
    .db $C3 ; ATTACK
    .db $42
    .db $C5 ; WAVE
    .db $CC
    .db $C3 ; COMPLETED
    .db $A3
    .db $C5 ; YOU
    .db $DF
    .db $C4 ; HAVE
    .db $30
    .db $C5 ; QUALIFIED
    .db $11
    .db $C4 ; FOR
    .db $11
    .db $07
    .db $C5 ; THE
    .db $93
    .db $C3 ; DEFENDER
    .db $BD
    .db $C4 ; HALL OF FAME
    .db $23
    .db $07
    .db $07
    .db $C5 ; SELECT
    .db $3E
    .db $C4 ; INITIALS
    .db $6C
    .db $C5 ; WITH
    .db $DA
    .db $C5 ; UP
    .db $C0
    .db $C3 ; DOWN
    .db $D4
    .db $C5 ; STICK
    .db $6C
    .db $07
    .db $07
    .db $C5 ; PRESS
    .db $0B
    .db $C4 ; FIRE
    .db $0C
    .db $C5 ; TO
    .db $AD
    .db $C3 ; ENTER
    .db $EA
    .db $C4 ; INITIAL
    .db $64
    .db $A0 ; PTR to $A000
    .db $00
    .db $02
    .db $08
    .db $A0 ; PTR to $A002
    .db $02
    .db $02
    .db $10
    .db $A0 ; PTR to $A004
    .db $04
    .db $C4 ; HALL OF FAME
    .db $23
    .db $06
    .db $22
    .db $68
    .db $C5 ; TODAYS
    .db $B0
    .db $02
    .db $3E
    .db $C3 ; ALL
    .db $3E
    .db $C5 ; TIME
    .db $A8
    .db $07
    .db $03
    .db $FC
    .db $C4 ; GREATEST
    .db $1A
    .db $02
    .db $3D
    .db $C4 ; GREATEST
    .db $1A
    .db $A0 ; PTR to $A006
    .db $06
    .db $02
    .db $05
    .db $A0 ; PTR to $A008
    .db $08
    .db $02
    .db $13
    .db $A0 ; PTR to $A00C
    .db $0C
    .db $41 ; ADJUSTMENT
    .db $44
    .db $4A
    .db $55
    .db $53
    .db $54
    .db $4D
    .db $45
    .db $4E
    .db $54
    .db $2F
    .db $41 ; ADVANCE
    .db $44
    .db $56
    .db $41
    .db $4E
    .db $43
    .db $45
    .db $2F
    .db $41 ; ALL
    .db $4C
    .db $4C
    .db $2F
    .db $41 ; ATTACK
    .db $54
    .db $54
    .db $41
    .db $43
    .db $4B
    .db $2F
    .db $41 ; AUDIO
    .db $55
    .db $44
    .db $49
    .db $4F
    .db $2F
    .db $41 ; AUDIT
    .db $55
    .db $44
    .db $49
    .db $54
    .db $2F
    .db $41 ; AUTO
    .db $55
    .db $54
    .db $4F
    .db $2F
    .db $42 ; BAITER
    .db $41
    .db $49
    .db $54
    .db $45
    .db $52
    .db $2F
    .db $42 ; BARS
    .db $41
    .db $52
    .db $53
    .db $2F
    .db $42 ; BE
    .db $45
    .db $2F
    .db $42 ; BOMB
    .db $4F
    .db $4D
    .db $42
    .db $2F
    .db $42 ; BOMBER
    .db $4F
    .db $4D
    .db $42
    .db $45
    .db $52
    .db $2F
    .db $42 ; BONUS X
    .db $4F
    .db $4E
    .db $55
    .db $53
    .db $20
    .db $58
    .db $2F
    .db $43 ; CAN
    .db $41
    .db $4E
    .db $2F
    .db $2C ; ,
    .db $2F
    .db $3A ; :
    .db $2F
    .db $43 ; Center
    .db $45
    .db $4E
    .db $54
    .db $45
    .db $52
    .db $2F
    .db $43 ; Change
    .db $48
    .db $41
    .db $4E
    .db $47
    .db $45
    .db $2F
    .db $43 ; CMOS
    .db $4D
    .db $4F
    .db $53
    .db $2F
    .db $43 ; Coin
    .db $4F
    .db $49
    .db $4E
    .db $2F
    .db $43 ; Color
    .db $4F
    .db $4C
    .db $4F
    .db $52
    .db $2F
    .db $43 ; Completed
    .db $4F
    .db $4D
    .db $50
    .db $4C
    .db $45
    .db $54
    .db $45
    .db $44
    .db $2F
    .db $43 ; Credit
    .db $52
    .db $45
    .db $44
    .db $49
    .db $54
    .db $2F
    .db $43 ; Credits:
    .db $52
    .db $45
    .db $44
    .db $49
    .db $54
    .db $53
    .db $3A
    .db $2F
    .db $44 ; Defender
    .db $45
    .db $46
    .db $45
    .db $4E
    .db $44
    .db $45
    .db $52
    .db $2F
    .db $44 ; Detected
    .db $45
    .db $54
    .db $45
    .db $43
    .db $54
    .db $45
    .db $44
    .db $2F
    .db $44 ; Door
    .db $4F
    .db $4F
    .db $52
    .db $2F
    .db $44 ; Down
    .db $4F
    .db $57
    .db $4E
    .db $2F
    .db $45 ; Electronics Inc.
    .db $4C
    .db $45
    .db $43
    .db $54
    .db $52
    .db $4F
    .db $4E
    .db $49
    .db $43
    .db $53
    .db $20
    .db $49
    .db $4E
    .db $43
    .db $2E
    .db $2F
    .db $45 ; Enter
    .db $4E
    .db $54
    .db $45
    .db $52
    .db $2F
    .db $45 ; Entered
    .db $4E
    .db $54
    .db $45
    .db $52
    .db $45
    .db $44
    .db $2F
    .db $45 ; Errors
    .db $52
    .db $52
    .db $4F
    .db $52
    .db $53
    .db $2F
    .db $45 ; Exit
    .db $58
    .db $49
    .db $54
    .db $2F
    .db $46 ; Failure
    .db $41
    .db $49
    .db $4C
    .db $55
    .db $52
    .db $45
    .db $2F
    .db $46 ; Fire
    .db $49
    .db $52
    .db $45
    .db $2F
    .db $46 ; For
    .db $4F
    .db $52
    .db $2F
    .db $47 ; Game
    .db $41
    .db $4D
    .db $45
    .db $2F
    .db $47 ; Greatest
    .db $52
    .db $45
    .db $41
    .db $54
    .db $45
    .db $53
    .db $54
    .db $2F
    .db $48 ; Hall of Fame
    .db $41
    .db $4C
    .db $4C
    .db $20
    .db $4F
    .db $46
    .db $20
    .db $46
    .db $41
    .db $4D
    .db $45
    .db $2F
    .db $48 ; Have
    .db $41
    .db $56
    .db $45
    .db $2F
    .db $48 ; Highscore Reset
    .db $49
    .db $47
    .db $48
    .db $53
    .db $43
    .db $4F
    .db $52
    .db $45
    .db $20
    .db $52
    .db $45
    .db $53
    .db $45
    .db $54
    .db $2F
    .db $48 ; Hyperspace
    .db $59
    .db $50
    .db $45
    .db $52
    .db $53
    .db $50
    .db $41
    .db $43
    .db $45
    .db $2F
    .db $49 ; Indicate
    .db $4E
    .db $44
    .db $49
    .db $43
    .db $41
    .db $54
    .db $45
    .db $2F
    .db $49 ; Individual
    .db $4E
    .db $44
    .db $49
    .db $56
    .db $49
    .db $44
    .db $55
    .db $41
    .db $4C
    .db $2F
    .db $49 ; Initial
    .db $4E
    .db $49
    .db $54
    .db $49
    .db $41
    .db $4C
    .db $2F
    .db $49 ; Initials
    .db $4E
    .db $49
    .db $54
    .db $49
    .db $41
    .db $4C
    .db $53
    .db $2F
    .db $49 ; Invalid Switch
    .db $4E
    .db $56
    .db $41
    .db $4C
    .db $49
    .db $44
    .db $20
    .db $53
    .db $57
    .db $49
    .db $54
    .db $43
    .db $48
    .db $2F
    .db $4C ; Lander
    .db $41
    .db $4E
    .db $44
    .db $45
    .db $52
    .db $2F
    .db $4C ; Left
    .db $45
    .db $46
    .db $54
    .db $2F
    .db $4D ; Make
    .db $41
    .db $4B
    .db $45
    .db $2F
    .db $4D ; Manual
    .db $41
    .db $4E
    .db $55
    .db $41
    .db $4C
    .db $2F
    .db $4D ; Monitor
    .db $4F
    .db $4E
    .db $49
    .db $54
    .db $4F
    .db $52
    .db $2F
    .db $4D ; Multiple
    .db $55
    .db $4C
    .db $54
    .db $49
    .db $50
    .db $4C
    .db $45
    .db $2F
    .db $4D ; Must
    .db $55
    .db $53
    .db $54
    .db $2F
    .db $4D ; Mutant
    .db $55
    .db $54
    .db $41
    .db $4E
    .db $54
    .db $2F
    .db $31 ; 150
    .db $35
    .db $30
    .db $2F
    .db $32 ; 200
    .db $30
    .db $30
    .db $2F
    .db $32 ; 250
    .db $35
    .db $30
    .db $2F
    .db $31 ; 1000
    .db $30
    .db $30
    .db $30
    .db $2F
    .db $4E ; No
    .db $4F
    .db $2F
    .db $4E ; Not
    .db $4F
    .db $54
    .db $2F
    .db $4F ; OK
    .db $4B
    .db $2F
    .db $4F ; One
    .db $4E
    .db $45
    .db $2F
    .db $4F ; Open
    .db $50
    .db $45
    .db $4E
    .db $2F
    .db $4F ; Or
    .db $52
    .db $2F
    .db $4F ; Over
    .db $56
    .db $45
    .db $52
    .db $2F
    .db $50 ; Patterns
    .db $41
    .db $54
    .db $54
    .db $45
    .db $52
    .db $4E
    .db $53
    .db $2F
    .db $50 ; Player
    .db $4C
    .db $41
    .db $59
    .db $45
    .db $52
    .db $2F
    .db $50 ; Players
    .db $4C
    .db $41
    .db $59
    .db $45
    .db $52
    .db $53
    .db $2F
    .db $20 ; " POD"
    .db $50
    .db $4F
    .db $44
    .db $2F
    .db $50 ; Presents
    .db $52
    .db $45
    .db $53
    .db $45
    .db $4E
    .db $54
    .db $53
    .db $2F
    .db $50 ; Press
    .db $52
    .db $45
    .db $53
    .db $53
    .db $2F
    .db $51 ; Qualified
    .db $55
    .db $41
    .db $4C
    .db $49
    .db $46
    .db $49
    .db $45
    .db $44
    .db $2F
    .db $52 ; RAM
    .db $41
    .db $4D
    .db $2F
    .db $52 ; Reverse
    .db $45
    .db $56
    .db $45
    .db $52
    .db $53
    .db $45
    .db $2F
    .db $52 ; Right
    .db $49
    .db $47
    .db $48
    .db $54
    .db $2F
    .db $52 ; ROM
    .db $4F
    .db $4D
    .db $2F
    .db $52 ; ROMS
    .db $4F
    .db $4D
    .db $53
    .db $2F
    .db $53 ; Scanner
    .db $43
    .db $41
    .db $4E
    .db $4E
    .db $45
    .db $52
    .db $2F
    .db $53 ; Select
    .db $45
    .db $4C
    .db $45
    .db $43
    .db $54
    .db $2F
    .db $53 ; Set
    .db $45
    .db $54
    .db $2F
    .db $53 ; Slam
    .db $4C
    .db $41
    .db $4D
    .db $2F
    .db $53 ; Smart
    .db $4D
    .db $41
    .db $52
    .db $54
    .db $2F
    .db $53 ; Sound
    .db $4F
    .db $55
    .db $4E
    .db $44
    .db $2F
    .db $53 ; Sounds
    .db $4F
    .db $55
    .db $4E
    .db $44
    .db $53
    .db $2F
    .db $53 ; Start
    .db $54
    .db $41
    .db $52
    .db $54
    .db $2F
    .db $53 ; Step
    .db $54
    .db $45
    .db $50
    .db $2F
    .db $53 ; Stick
    .db $54
    .db $49
    .db $43
    .db $4B
    .db $2F
    .db $53 ; Swarmer
    .db $57
    .db $41
    .db $52
    .db $4D
    .db $45
    .db $52
    .db $2F
    .db $53 ; Switch
    .db $57
    .db $49
    .db $54
    .db $43
    .db $48
    .db $2F
    .db $54 ; Test
    .db $45
    .db $53
    .db $54
    .db $2F
    .db $54 ; Tested
    .db $45
    .db $53
    .db $54
    .db $45
    .db $44
    .db $2F
    .db $54 ; Tests
    .db $45
    .db $53
    .db $54
    .db $53
    .db $2F
    .db $54 ; The
    .db $48
    .db $45
    .db $2F
    .db $54 ; Thru
    .db $48
    .db $52
    .db $55
    .db $2F
    .db $54 ; Thrust
    .db $48
    .db $52
    .db $55
    .db $53
    .db $54
    .db $2F
    .db $54 ; Tilt
    .db $49
    .db $4C
    .db $54
    .db $2F
    .db $54 ; Time
    .db $49
    .db $4D
    .db $45
    .db $2F
    .db $54 ; To
    .db $4F
    .db $2F
    .db $54 ; Todays
    .db $4F
    .db $44
    .db $41
    .db $59
    .db $53
    .db $2F
    .db $54 ; Two
    .db $57
    .db $4F
    .db $2F
    .db $55 ; Unit
    .db $4E
    .db $49
    .db $54
    .db $2F
    .db $55 ; Up
    .db $50
    .db $2F
    .db $56 ; Vertical
    .db $45
    .db $52
    .db $54
    .db $49
    .db $43
    .db $41
    .db $4C
    .db $2F
    .db $57 ; Wave
    .db $41
    .db $56
    .db $45
    .db $2F
    .db $57 ; Williams
    .db $49
    .db $4C
    .db $4C
    .db $49
    .db $41
    .db $4D
    .db $53
    .db $2F
    .db $57 ; With
    .db $49
    .db $54
    .db $48
    .db $2F
    .db $59 ; You
    .db $4F
    .db $55
    .db $2F
TEXT_GRAPHICS_INFO: ; 0x0045E3, $C5E3
    .db $01 ; FORMAT:[X/2,Y,PTR_TO_BITMAP]?
    .db $08
    .db $C6 ; PTR 0
    .db $97
    .db $01
    .db $08
    .db $C6 ; PTR 1
    .db $AF
    .db $01
    .db $08
    .db $C6 ; PTR 2
    .db $B7
    .db $03
    .db $08
    .db $C7 ; PTR 3
    .db $BF
    .db $01
    .db $08
    .db $C6 ; PTR 4
    .db $BF
    .db $03
    .db $08
    .db $C7 ; PTR 5
    .db $BF
    .db $03
    .db $08
    .db $C6 ; PTR 6
    .db $C7
    .db $03
    .db $08
    .db $C6 ; PTR 7
    .db $DF
    .db $03
    .db $08
    .db $C6 ; PTR 8
    .db $F7
    .db $03
    .db $08
    .db $C7 ; PTR 9
    .db $0F
    .db $03
    .db $08
    .db $C7 ; PTR 10
    .db $27
    .db $03
    .db $08
    .db $C7 ; PTR 11
    .db $3F
    .db $03
    .db $08
    .db $C7 ; PTR 12
    .db $57
    .db $03
    .db $08
    .db $C7 ; PTR 13
    .db $6F
    .db $03
    .db $08
    .db $C7 ; PTR 14
    .db $87
    .db $03
    .db $08
    .db $C7 ; PTR 15
    .db $9F
    .db $01
    .db $08
    .db $C7 ; PTR 16
    .db $B7
    .db $03
    .db $08
    .db $C7 ; PTR 17
    .db $BF
    .db $03
    .db $08
    .db $C6 ; PTR 18
    .db $97
    .db $03
    .db $08
    .db $C7 ; PTR 19
    .db $D7
    .db $03
    .db $08
    .db $C7 ; PTR 20
    .db $EF
    .db $03
    .db $08
    .db $C8 ; PTR 21
    .db $07
    .db $03
    .db $08
    .db $C8 ; PTR 22
    .db $1F
    .db $03
    .db $08
    .db $C8 ; PTR 23
    .db $37
    .db $03
    .db $08
    .db $C8 ; PTR 24
    .db $4F
    .db $03
    .db $08
    .db $C8 ; PTR 25
    .db $67
    .db $03
    .db $08
    .db $C8 ; PTR 26
    .db $7F
    .db $02
    .db $08
    .db $C8 ; PTR 27
    .db $97
    .db $03
    .db $08
    .db $C8 ; PTR 28
    .db $A7
    .db $03
    .db $08
    .db $C8 ; PTR 29
    .db $BF
    .db $03
    .db $08
    .db $C8 ; PTR 30
    .db $D7
    .db $04
    .db $08
    .db $C8 ; PTR 31
    .db $EF
    .db $03
    .db $08
    .db $C9 ; PTR 32
    .db $0F
    .db $03
    .db $08
    .db $C9 ; PTR 33
    .db $27
    .db $03
    .db $08
    .db $C9 ; PTR 34
    .db $3F
    .db $03
    .db $08
    .db $C9 ; PTR 35
    .db $57
    .db $03
    .db $08
    .db $C9 ; PTR 36
    .db $6F
    .db $03
    .db $08
    .db $C9 ; PTR 37
    .db $87
    .db $03
    .db $08
    .db $C9 ; PTR 38
    .db $9F
    .db $03
    .db $08
    .db $C9 ; PTR 39
    .db $B7
    .db $03
    .db $08
    .db $C9 ; PTR 40
    .db $CF
    .db $04
    .db $08
    .db $C9 ; PTR 41
    .db $E7
    .db $03
    .db $08
    .db $CA ; PTR 42
    .db $07
    .db $03
    .db $08
    .db $CA ; PTR 43
    .db $1F
    .db $03
    .db $08
    .db $CA ; PTR 44
    .db $37
    .db $00 ; TEXT_BITMAP_0,18
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $01 ; TEXT_BITMAP_1
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $01
    .db $00
    .db $00 ; TEXT_BITMAP_2
    .db $00
    .db $00
    .db $00
    .db $00
    .db $01
    .db $01
    .db $10
    .db $00 ; TEXT_BITMAP_4
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $01
    .db $00
    .db $01 ; TEXT_BITMAP_6
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $11
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $11
    .db $00
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $00
    .db $00 ; TEXT_BITMAP_7
    .db $00
    .db $01
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $01
    .db $11
    .db $10
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $00
    .db $01 ; TEXT_BITMAP_8
    .db $01
    .db $00
    .db $00
    .db $00
    .db $01
    .db $01
    .db $00
    .db $11
    .db $00
    .db $00
    .db $01
    .db $10
    .db $00
    .db $11
    .db $00
    .db $11
    .db $11
    .db $11
    .db $10
    .db $00
    .db $00
    .db $11
    .db $00
    .db $01 ; TEXT_BITMAP_9
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $01
    .db $00
    .db $11
    .db $00
    .db $00
    .db $11
    .db $00
    .db $00
    .db $11
    .db $00
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $00
    .db $00 ; TEXT_BITMAP_10
    .db $00
    .db $01
    .db $01
    .db $00
    .db $00
    .db $00
    .db $00
    .db $01
    .db $10
    .db $00
    .db $11
    .db $00
    .db $00
    .db $00
    .db $00
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $00
    .db $01 ; TEXT_BITMAP_11
    .db $01
    .db $01
    .db $01
    .db $00
    .db $00
    .db $01
    .db $00
    .db $11
    .db $10
    .db $10
    .db $11
    .db $00
    .db $00
    .db $11
    .db $00
    .db $11
    .db $00
    .db $00
    .db $11
    .db $01
    .db $01
    .db $11
    .db $00
    .db $01 ; TEXT_BITMAP_12
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $11
    .db $10
    .db $10
    .db $11
    .db $10
    .db $10
    .db $11
    .db $00
    .db $11
    .db $00
    .db $00
    .db $11
    .db $01
    .db $01
    .db $11
    .db $00
    .db $01 ; TEXT_BITMAP_13
    .db $00
    .db $00
    .db $00
    .db $00
    .db $01
    .db $01
    .db $00
    .db $11
    .db $00
    .db $00
    .db $01
    .db $11
    .db $10
    .db $10
    .db $00
    .db $11
    .db $11
    .db $11
    .db $10
    .db $00
    .db $00
    .db $00
    .db $00
    .db $01 ; TEXT_BITMAP_14
    .db $01
    .db $01
    .db $00
    .db $01
    .db $01
    .db $01
    .db $00
    .db $11
    .db $10
    .db $10
    .db $11
    .db $10
    .db $10
    .db $11
    .db $00
    .db $11
    .db $01
    .db $01
    .db $10
    .db $01
    .db $01
    .db $11
    .db $00
    .db $01 ; TEXT_BITMAP_15
    .db $01
    .db $01
    .db $01
    .db $00
    .db $00
    .db $01
    .db $00
    .db $11
    .db $10
    .db $10
    .db $11
    .db $00
    .db $00
    .db $11
    .db $00
    .db $11
    .db $01
    .db $01
    .db $11
    .db $01
    .db $01
    .db $11
    .db $00
    .db $00 ; TEXT_BITMAP_16
    .db $00
    .db $01
    .db $00
    .db $00
    .db $01
    .db $00
    .db $00
    .db $01 ; TEXT_BITMAP_3,5,17
    .db $01
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $11
    .db $00
    .db $00
    .db $01
    .db $01
    .db $00
    .db $01
    .db $00
    .db $11
    .db $11
    .db $11
    .db $10
    .db $00
    .db $00
    .db $00
    .db $00
    .db $01 ; TEXT_BITMAP_19
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $11
    .db $00
    .db $00
    .db $11
    .db $00
    .db $00
    .db $00
    .db $00
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $00
    .db $01 ; TEXT_BITMAP_20
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $11
    .db $00
    .db $00
    .db $11
    .db $00
    .db $00
    .db $11
    .db $00
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $00
    .db $01 ; TEXT_BITMAP_21
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $11
    .db $10
    .db $10
    .db $10
    .db $10
    .db $10
    .db $11
    .db $00
    .db $11
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $11
    .db $00
    .db $01 ; TEXT_BITMAP_22
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $11
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $11
    .db $00
    .db $10
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $10
    .db $00
    .db $01 ; TEXT_BITMAP_23
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $11
    .db $10
    .db $10
    .db $11
    .db $10
    .db $10
    .db $11
    .db $00
    .db $11
    .db $00
    .db $00
    .db $10
    .db $00
    .db $00
    .db $11
    .db $00
    .db $01 ; TEXT_BITMAP_24
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $11
    .db $10
    .db $10
    .db $11
    .db $10
    .db $10
    .db $10
    .db $00
    .db $11
    .db $00
    .db $00
    .db $10
    .db $00
    .db $00
    .db $00
    .db $00
    .db $01 ; TEXT_BITMAP_25
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $11
    .db $10
    .db $10
    .db $10
    .db $10
    .db $10
    .db $11
    .db $00
    .db $11
    .db $00
    .db $00
    .db $11
    .db $01
    .db $01
    .db $11
    .db $00
    .db $01 ; TEXT_BITMAP_26
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $10
    .db $10
    .db $10
    .db $11
    .db $10
    .db $10
    .db $10
    .db $00
    .db $01
    .db $01
    .db $01
    .db $11
    .db $01
    .db $01
    .db $01
    .db $00
    .db $01 ; TEXT_BITMAP_27
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $10
    .db $10
    .db $10
    .db $10
    .db $10
    .db $10
    .db $10
    .db $00
    .db $00 ; TEXT_BITMAP_28
    .db $00
    .db $00
    .db $00
    .db $00
    .db $01
    .db $01
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $11
    .db $00
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $00
    .db $01 ; TEXT_BITMAP_29
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $00
    .db $00
    .db $01
    .db $11
    .db $01
    .db $00
    .db $00
    .db $00
    .db $01
    .db $10
    .db $00
    .db $00
    .db $00
    .db $10
    .db $01
    .db $00
    .db $01 ; TEXT_BITMAP_30
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $10
    .db $10
    .db $10
    .db $10
    .db $10
    .db $10
    .db $11
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $11
    .db $00
    .db $01 ; TEXT_BITMAP_31
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $11
    .db $10
    .db $10
    .db $10
    .db $10
    .db $10
    .db $10
    .db $00
    .db $11
    .db $10
    .db $10
    .db $10
    .db $00
    .db $00
    .db $00
    .db $00
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $00
    .db $01 ; TEXT_BITMAP_32
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $11
    .db $10
    .db $10
    .db $10
    .db $10
    .db $10
    .db $10
    .db $00
    .db $11
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $01 ; TEXT_BITMAP_33
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $11
    .db $10
    .db $10
    .db $10
    .db $10
    .db $10
    .db $11
    .db $00
    .db $11
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $11
    .db $00
    .db $01 ; TEXT_BITMAP_34
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $11
    .db $10
    .db $10
    .db $11
    .db $10
    .db $10
    .db $10
    .db $00
    .db $11
    .db $01
    .db $01
    .db $11
    .db $00
    .db $00
    .db $00
    .db $00
    .db $01 ; TEXT_BITMAP_35
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $11
    .db $10
    .db $10
    .db $10
    .db $10
    .db $10
    .db $11
    .db $00
    .db $11
    .db $01
    .db $01
    .db $01
    .db $01
    .db $11
    .db $11
    .db $10
    .db $01 ; TEXT_BITMAP_36
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $11
    .db $10
    .db $10
    .db $11
    .db $10
    .db $10
    .db $10
    .db $00
    .db $11
    .db $01
    .db $01
    .db $11
    .db $10
    .db $01
    .db $01
    .db $00
    .db $01 ; TEXT_BITMAP_37
    .db $01
    .db $01
    .db $01
    .db $00
    .db $00
    .db $01
    .db $00
    .db $11
    .db $10
    .db $10
    .db $11
    .db $00
    .db $00
    .db $11
    .db $00
    .db $11
    .db $00
    .db $00
    .db $11
    .db $11
    .db $11
    .db $11
    .db $00
    .db $11 ; TEXT_BITMAP_38
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $11
    .db $00
    .db $11
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $01 ; TEXT_BITMAP_39
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $10
    .db $10
    .db $10
    .db $10
    .db $10
    .db $10
    .db $11
    .db $00
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $11
    .db $00
    .db $01 ; TEXT_BITMAP_40
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $10
    .db $01
    .db $00
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $10
    .db $00
    .db $00
    .db $01 ; TEXT_BITMAP_41
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $00
    .db $10
    .db $10
    .db $10
    .db $10
    .db $10
    .db $10
    .db $01
    .db $00
    .db $10
    .db $10
    .db $10
    .db $10
    .db $10
    .db $10
    .db $01
    .db $00
    .db $10
    .db $10
    .db $10
    .db $10
    .db $10
    .db $10
    .db $00
    .db $00
    .db $01 ; TEXT_BITMAP_42
    .db $01
    .db $00
    .db $00
    .db $00
    .db $01
    .db $01
    .db $00
    .db $00
    .db $00
    .db $10
    .db $01
    .db $10
    .db $00
    .db $00
    .db $00
    .db $01
    .db $01
    .db $10
    .db $00
    .db $10
    .db $01
    .db $01
    .db $00
    .db $01 ; TEXT_BITMAP_43
    .db $01
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $10
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $01
    .db $01
    .db $10
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $01 ; TEXT_BITMAP_44
    .db $00
    .db $00
    .db $00
    .db $01
    .db $01
    .db $01
    .db $00
    .db $11
    .db $00
    .db $01
    .db $10
    .db $00
    .db $00
    .db $11
    .db $00
    .db $11
    .db $10
    .db $00
    .db $00
    .db $00
    .db $00
    .db $11
    .db $00
    .db $84
    .db $FF
TEXT_SENTENCE_RTN_PTR=$C0D9: ; 0x004A51, $CA51
    PSHS  U,Y,X ; Save...
    LDU   #$C0D9 ; Sentences ptr start.
    BRA   DO_TEXT_SOMETHING
TEXT_SENTENCE_RTN_PTR=$C0BB: ; 0x004A58, $CA58
    PSHS  U,Y,X ; Save...
    LDU   #$C0BB ; More sentences ptr
DO_TEXT_SOMETHING: ; 0x004A5D, $CA5D
    LDX   #$18CE ; Screen position.
    JSR   TEXT_RTN_PTRS=$FFB3/$CAED ; Something to screen.
    LDU   Y++ ; ptr from Y
    BEQ   LOADED_NULL ; If was null, taken.
    LDX   #$10DA ; Screen location.
    JSR   TEXT_RTN_PTRS=$FFB3/$CAED ; Something to screen.
LOADED_NULL: ; 0x004A6D, $CA6D
    LDU   Y++ ; Get U from Y again.
    BEQ   LOADED_NULL_2 ; If was null, taken.
    LDX   #$10E4 ; Position.
    JSR   TEXT_RTN_PTRS=$FFB3/$CAED ; Something to screen.
LOADED_NULL_2: ; 0x004A77, $CA77
    PULS  X,Y,U,PC ; Restore+RTS
TEXT_RTN_SPECIAL_PTR=$FFB6: ; 0x004A79, $CA79
    PSHS  U,Y,X,B,A,CC ; Save state
    LDY   #$FFB6 ; Ptr to unk rtn
    BRA   TEXT_RTN_UNK_MAIN
TEXT_RTN_SPECIAL_PTR=$FFB3: ; 0x004A81, $CA81
    PSHS  U,Y,X,B,A,CC ; Save state
    LDY   #$FFB3 ; PTR to JMP to GFX_TO_SCREEN
TEXT_RTN_UNK_MAIN: ; 0x004A87, $CA87
    LDD   #$CAED ; PTR to SKIP_SENTENCE_INIT
    STY   TEXT_PTR_TO_CODE_JSR ; Store JSR PTR
    STD   TEXT_PTR_TO_CODE_JMP ; Store JMP PTR
    STX   SENTENCE_CURR_SCR_LOC_XXYY ; Store SCR_LOC
    STX   SENTENCE_CURR_SCR_LOC_CR_XXYY? ; Store SCR_LOC_CR
    LDX   #$010A ; Spacing value.
    STX   TEXT_DATA_SPACING_XXYY?
    CLR   SENTENCE_FLAG_58 ; Clear flag.
    LDU   5,S ; Get value up stack.
    STU   SENTENCE_PTR_TO_WORD ; Is ptr to word.
    LEAU  32,U ; Clean up 32 bytes of stack???
    STU   SENTENCE_END_PTR ; Store the stack as the end ptr?
    STU   SENTENCE_PTR_WORD_ON ; And the word on?
    BRA   SKIP_SENTENCE_INIT ; Goto code
TEXT_RTN_PTRS=$FFB3/$CAED: ; 0x004AA7, $CAA7
    PSHS  U,Y,X,B,A,CC ; Save
    LDY   #$FFB3 ; JSR ptr, JMP to TEXT_CHAR_TO_SCREEN
    LDD   #$CAED ; JMP ptr, SKIP_SENTENCE_INIT
    BRA   SENTENCE_TO_SCREEN
TEXT_RTN_PTRS=$FFB6/$CAED: ; 0x004AB2, $CAB2
    PSHS  U,Y,X,B,A,CC
    LDY   #$FFB6 ; PTR to JMP unk
    LDD   #$CAED
    BRA   SENTENCE_TO_SCREEN
TEST_RTN_PTRS=$FFB3/$CB5F: ; 0x004ABD, $CABD
    PSHS  U,Y,X,B,A,CC
    LDY   #$FFB3 ; PTR to JMP unk
    LDD   #$CB5F ; PTR to 4B5F, Pulls state, clears a CC bit, RTS's.
    BRA   SENTENCE_TO_SCREEN
TEXT_RTN_PTRS=$FFB6/$CB5F: ; 0x004AC8, $CAC8
    PSHS  U,Y,X,B,A,CC ; Save stuff
    LDY   #$FFB6
    LDD   #$CB5F
SENTENCE_TO_SCREEN: ; 0x004AD1, $CAD1
    STY   TEXT_PTR_TO_CODE_JSR ; Store ptr JSR'd to.
    STD   TEXT_PTR_TO_CODE_JMP ; Store ptr to JMP.
    TST   SENTENCE_PTR_WORD_ON ; Test if top byte not null
    BNE   SKIP_SENTENCE_INIT ; If is set, don't init.
    STX   SENTENCE_CURR_SCR_LOC_XXYY ; Screen location current
    STX   SENTENCE_CURR_SCR_LOC_CR_XXYY? ; Screen location when carriage returned (CR)
    LDX   #$010A ; Not sure of val. Add per char?
    STX   TEXT_DATA_SPACING_XXYY? ; Store
    CLR   SENTENCE_FLAG_58 ; Clear
    LDX   2,U ; Get end of sentence.
    STX   SENTENCE_END_PTR ; End of sentence.
    LDX   U ; Load X with beginning of sentence.
    BRA   MORE_THINGS_TO_DO ; Do things.
SKIP_SENTENCE_INIT: ; 0x004AED, $CAED
    TST   SENTENCE_FLAG_58 ; Test
    BNE   FLAG_58_SET
    LDX   SENTENCE_PTR_TO_WORD ; Get word ptr
    LDB   X+ ; Load
    CMPB  #$2F ; #$2F='\0' here.
    BNE   NOT_END_OF_STRING ; Not end, put to screen.
    LDB   #$20 ; Space in ascii, probs just flag value tho.
    STB   SENTENCE_FLAG_58 ; Not sure why stored.
    BRA   NOT_END_OF_STRING ; Always space at end.
FLAG_58_SET: ; 0x004AFF, $CAFF
    CLR   SENTENCE_FLAG_58 ; clear
    LDX   SENTENCE_PTR_WORD_ON
DO_MORE_AFTER_CMD: ; 0x004B03, $CB03
    CMPX  SENTENCE_END_PTR ; Compare to end?
    BNE   MORE_THINGS_TO_DO
TOP_GT|E_8: ; 0x004B07, $CB07
    CLR   SENTENCE_PTR_WORD_ON ; Clear setup check loc.
    PULS  CC,A,B,X,Y,U ; Restore
    ORCC  #$01 ; Set CC.c
    RTS ; leave.
MORE_THINGS_TO_DO: ; 0x004B0E, $CB0E
    LDU   X++ ; Loads sentence word ptr.
    BMI   DATA_IS_NOT_CMD ; If top bit set. In ROM test?
    LEAX  -1,X ; Not PTR, command, minus 1 because CMD is byte.
    TFR   U>D ; Save U to D
    CMPA  #$08 ; Top byte
    BHI   TOP_GT|E_8 ; Leaves
    ASLA ; Make index to ptr
    LDY   #$CB64 ; ptr
    JSR   [A,Y] ; Run code.
    BRA   DO_MORE_AFTER_CMD
DATA_IS_NOT_CMD: ; 0x004B23, $CB23
    STX   SENTENCE_PTR_WORD_ON ; Store index into sentence, aka word
    STU   SENTENCE_PTR_TO_WORD ; Store word ptr
    BRA   SKIP_SENTENCE_INIT ; Goto
NOT_END_OF_STRING: ; 0x004B29, $CB29
    STX   SENTENCE_PTR_TO_WORD ; Store index into word.
    SUBB  #$20 ; B-=20
    CMPB  #$01 ; CMP 0x20-0x21
    BLS   TEXT_CASE_USE_B ; If <=21
    CMPB  #$0B
    BLS   TEXT_CASE_USE_3 ; Misc ascii. Control chars?
    SUBB  #$0A ; B-=0x2A
    CMPB  #$10 ; CMP 0x2A to 0x3A
    BLS   TEXT_CASE_USE_B ; if <=
    CMPB  #$14 ; CMP 0x3B to 0x3E
    BLS   TEXT_CASE_USE_3 ; if <=
    SUBB  #$04 ; B-=2E
    CMPB  #$2C ; CMP 0x2E to 5A
    BLS   TEXT_CASE_USE_B
TEXT_CASE_USE_3: ; 0x004B45, $CB45
    LDB   #$03 ; Turns to 0xC
TEXT_CASE_USE_B: ; 0x004B47, $CB47
    ASLB ; Multiply by 4
    ASLB
    LDX   #$C5E3 ; TEXT_POINTER_START
    ABX ; Add to X
    TFR   X>Y ; Put to Y
    LDD   SENTENCE_CURR_SCR_LOC_XXYY ; Load screen location
    LDX   TEXT_PTR_TO_CODE_JSR ; Load ptr to code
    JSR   X ; JSR to ptr
    ADDA  Y ; Add to A@Y
    ADDA  TEXT_DATA_SPACING_XXYY? ; Add to A from mem. Minimum movement?
    STA   SENTENCE_CURR_SCR_LOC_XXYY ; Store high byte. Horizontal pos?
    LDX   TEXT_PTR_TO_CODE_JMP ; Load...
    JMP   X ; JMP to loc.
    PULS  CC,A,B,X,Y,U ; PTR'd code. Pull state.
    ANDCC #$FE ; Clear CC.C
    RTS ; RTS
TEXT_FUNCTION_POINTERS: ; 0x004B64, $CB64
    .db $CB ; FORMAT: [ptr], points to code after table. Text functions.
    .db $76
    .db $CB
    .db $7B
    .db $CB
    .db $80
    .db $CB
    .db $87
    .db $CB
    .db $8E
    .db $CB
    .db $95
    .db $CB
    .db $9C
    .db $CB
    .db $A3
    .db $CB
    .db $AC
TEXT_FUNC_CHANGE_SPACING_X: ; 0x004B76, $CB76
    LDA   X+ ; These functions called by table above front str/text routine
    STA   TEXT_DATA_SPACING_XXYY?
    RTS
TEXT_FUNC_CHANGE_SPACING_Y: ; 0x004B7B, $CB7B
    LDB   X+
    STB   TEXT_DATA_SPACING_XXYY?+1
    RTS
TEXT_FUNC_CR.X+DATA_TO_POSX: ; 0x004B80, $CB80
    LDA   SENTENCE_CURR_SCR_LOC_CR_XXYY?
    ADDA  X+
    STA   SENTENCE_CURR_SCR_LOC_XXYY
    RTS
TEXT_FUNC_POS.X+=DATA: ; 0x004B87, $CB87
    LDA   SENTENCE_CURR_SCR_LOC_XXYY
    ADDA  X+
    STA   SENTENCE_CURR_SCR_LOC_XXYY
    RTS
TEXT_FUNC_CR.Y+DATA_TO_POSY: ; 0x004B8E, $CB8E
    LDB   SENTENCE_CURR_SCR_LOC_CR_XXYY?+1
    ADDB  X+
    STB   SENTENCE_CURR_SCR_LOC_XXYY+1
    RTS
TEXT_FUNC_POS.Y+=DATA: ; 0x004B95, $CB95
    LDB   SENTENCE_CURR_SCR_LOC_XXYY+1
    ADDB  X+
    STB   SENTENCE_CURR_SCR_LOC_XXYY+1
    RTS
TEXT_FUNC_DATA_TO_CR+POS: ; 0x004B9C, $CB9C
    LDD   X++
    STD   SENTENCE_CURR_SCR_LOC_CR_XXYY?
    STD   SENTENCE_CURR_SCR_LOC_XXYY
    RTS
TEXT_FUNC_CR: ; 0x004BA3, $CBA3
    LDA   SENTENCE_CURR_SCR_LOC_CR_XXYY?
    LDB   SENTENCE_CURR_SCR_LOC_XXYY+1
    ADDB  TEXT_DATA_SPACING_XXYY?+1
    STD   SENTENCE_CURR_SCR_LOC_XXYY
    RTS
TEXT_FUNC_JSR_ADD_JMP_IDK: ; 0x004BAC, $CBAC
    LDY   X++ ; Y from X
    STX   SENTENCE_PTR_WORD_ON ; Store stream ptr.
    LDX   TEXT_PTR_TO_CODE_JSR ; X from var.
    JSR   X ; JSR to code...
    ADDA  Y ; A+=@Y
    ADDA  TEXT_DATA_SPACING_XXYY? ; Add spacing, too.
    STA   SENTENCE_CURR_SCR_LOC_XXYY ; Store to POS.X
    LEAS  2,S ; Clean up stack from JSR here.
    LDX   TEXT_PTR_TO_CODE_JMP ; Load from
    JMP   X ; Goto
TEXT_RTN_PTRS=$FFB3/$CC0F: ; 0x004BC1, $CBC1
    PSHS  U,Y,X,B,A,CC ; Save state.
    LDY   #$FFB3 ; JMP to TEXT_CHAR_TO_SCREEN
    LDU   #$CC0F ; PTR to AND #$F0 below
    BRA   TEXT_RTN_UNK_BASE
TEXT_RTN_PTRS=$FFB6/$CC0F: ; 0x004BCC, $CBCC
    PSHS  U,Y,X,B,A,CC ; Save state.
    LDY   #$FFB6 ; PTR to JMP to unknown code.
    LDU   #$CC0F ; PTR to CMPA #$F0 below.
    BRA   TEXT_RTN_UNK_BASE
TEXT_RTN_PTRS=$FFB3/$CC39: ; 0x004BD7, $CBD7
    PSHS  U,Y,X,B,A,CC ; Save state
    LDY   #$FFB3 ; JMP to TEXT_CHAR_TO_SCREEN
    LDU   #$CC39 ; PTR to restore and RTS
    BRA   TEXT_RTN_UNK_BASE
TEXT_RTN_PTRS=$FFB6/$CC39: ; 0x004BE2, $CBE2
    PSHS  U,Y,X,B,A,CC
    LDY   #$FFB6 ; PTR to JMP to unknown code.
    LDU   #$CC39 ; PTR to restore and RTS
TEXT_RTN_UNK_BASE: ; 0x004BEB, $CBEB
    STY   TEXT_PTR_TO_CODE_JSR ; Store to JSR
    STU   TEXT_PTR_TO_CODE_JMP ; Store to JMP.
    LDU   TEXT_PTR_UNK
    CMPU  #$FFFF ; Is..
    BNE   TEXT_PTR_NOT_FFFF ; != to FF, go here.
    STX   SENTENCE_CURR_SCR_LOC_XXYY ; Put stream to location, temp.
    STD   TEXT_PTR_UNK ; Put D to PTR?
    BNE   BIT_STUFF_IDK ; Get jumped in the middle of maybe?
    LDD   #$0FFF ; Just do it once?
    BRA   STD_UNK
BIT_STUFF_IDK: ; 0x004C03, $CC03
    BITA  #$F0 ; Test top bits.
    BNE   STD_UNK ; If any bits set, taken.
    BSR   MANIPULATE_D ; D << 4, D|= 0x000F
    BRA   BIT_STUFF_IDK
STD_UNK: ; 0x004C0B, $CC0B
    STD   TEXT_PTR_UNK ; Store D
TEXT_PTR_NOT_FFFF: ; 0x004C0D, $CC0D
    LDD   TEXT_PTR_UNK ; Load D
    ANDA  #$F0 ; Test top bits.
    CMPA  #$F0
    BNE   NOT_0xF0 ; Not 0xF0
    PULS  CC,A,B,X,Y,U ; Pull state
    LDX   SENTENCE_CURR_SCR_LOC_XXYY ; Get stream from temp.
    ORCC  #$01 ; CC.C = 1
    RTS ; Leave
NOT_0xF0: ; 0x004C1C, $CC1C
    LSRA ; A>>2...
    LSRA
    LDX   #$C5FB ; PTR to...
    LEAY  A,X ; Y from X+A
    LDD   SENTENCE_CURR_SCR_LOC_XXYY ; Load pos
    LDX   TEXT_PTR_TO_CODE_JSR ; Load JSR
    JSR   X ; Do JSR
    ADDA  Y ; Add A@Y
    ADDA  TEXT_DATA_SPACING_XXYY? ; Add to spacing X
    STA   SENTENCE_CURR_SCR_LOC_XXYY ; Store to POS.X
    LDD   TEXT_PTR_UNK ; Get unk
    BSR   MANIPULATE_D ; Manipulate
    STD   TEXT_PTR_UNK ; Store
    LDX   TEXT_PTR_TO_CODE_JMP ; Get code to jump to.
    JMP   X ; Jump to var.
    PULS  CC,A,B,X,Y,U ; Pull saved
    ANDCC #$FE ; Clear CC.C
    RTS ; RTS
MANIPULATE_D: ; 0x004C3E, $CC3E
    ASLB ; D << 4, bringing in 0's.
    ROLA
    ASLB
    ROLA
    ASLB
    ROLA
    ASLB
    ROLA
    ORB   #$0F ; D |= 0x000F, setting all shifted to 0's.
    RTS ; Leave
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $05
    .db $38
    .db $4E
    .db $CE
    .db $96
    .db $09
    .db $AC
    .db $42
    .db $90
    .db $16
    .db $52
    .db $A8
    .db $F2
    .db $12
    .db $96
    .db $6A
    .db $08
    .db $C0
    .db $DE
    .db $CA
    .db $A5
    .db $54
    .db $1B
    .db $88
    .db $2D
    .db $59
    .db $A3
    .db $96
    .db $41
    .db $DC
    .db $EF
    .db $A3
    .db $27
    .db $03
    .db $B6
    .db $1C
    .db $EF
    .db $5E
    .db $FF
    .db $D7
    .db $B0
    .db $56
    .db $A4
    .db $76
    .db $C3
    .db $A0
    .db $90
    .db $9B
    .db $D9
    .db $08
    .db $D3
    .db $04
    .db $CB
    .db $99
    .db $C8
    .db $70
    .db $43
    .db $94
    .db $33
    .db $7B
    .db $6B
    .db $8D
    .db $B2
    .db $F8
    .db $00
    .db $0C
    .db $CC
    .db $CC
    .db $CC
    .db $CC
    .db $0C
    .db $00
    .db $CC
    .db $CC
    .db $CC
    .db $CC
    .db $CC
    .db $CC
    .db $CC
    .db $CC
    .db $CC
    .db $CC
    .db $CC
    .db $CC
    .db $CC
    .db $CC
    .db $CC
    .db $CC
    .db $00
    .db $C0
    .db $CC
    .db $CC
    .db $CC
    .db $CC
    .db $C0
    .db $00
    .db $A0
    .db $0A
    .db $A0
    .db $A0
    .db $00
    .db $A0
    .db $0A
    .db $00
    .db $0A
    .db $0A
    .db $A0
    .db $0A
    .db $0A
    .db $AA
    .db $0A
    .db $00
    .db $A0
    .db $00
    .db $00
    .db $0A
    .db $00
    .db $A0
    .db $AA
    .db $A0
    .db $00
    .db $02
    .db $23
    .db $02
    .db $20
    .db $22
    .db $23
    .db $22
    .db $00
    .db $00
    .db $20
    .db $00
    .db $00
    .db $00
    .db $02
    .db $00
    .db $02
    .db $22
    .db $32
    .db $22
    .db $00
    .db $20
    .db $32
    .db $20
    .db $00
    .db $00
    .db $03
    .db $03
    .db $00
    .db $00
    .db $03
    .db $30
    .db $04
    .db $34
    .db $30
    .db $30
    .db $34
    .db $30
    .db $00
    .db $00
    .db $44
    .db $44
    .db $33
    .db $33
    .db $34
    .db $30
    .db $30
    .db $30
    .db $00
    .db $30
    .db $03
    .db $03
    .db $30
    .db $30
    .db $03
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $30
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $03
    .db $00
    .db $03
    .db $33
    .db $33
    .db $03
    .db $03
    .db $30
    .db $00
    .db $44
    .db $44
    .db $03
    .db $03
    .db $43
    .db $03
    .db $03
    .db $03
    .db $40
    .db $43
    .db $30
    .db $30
    .db $43
    .db $03
    .db $00
    .db $00
    .db $00
    .db $00
    .db $30
    .db $30
    .db $00
    .db $00
    .db $30
    .db $03
    .db $00
    .db $00
    .db $03
    .db $03
    .db $00
    .db $00
    .db $03
    .db $30
    .db $04
    .db $34
    .db $03
    .db $03
    .db $34
    .db $30
    .db $00
    .db $00
    .db $44
    .db $44
    .db $30
    .db $30
    .db $34
    .db $30
    .db $30
    .db $30
    .db $00
    .db $30
    .db $33
    .db $33
    .db $30
    .db $30
    .db $03
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $30
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $03
    .db $00
    .db $03
    .db $30
    .db $30
    .db $03
    .db $03
    .db $30
    .db $00
    .db $44
    .db $44
    .db $33
    .db $33
    .db $43
    .db $03
    .db $03
    .db $03
    .db $40
    .db $43
    .db $03
    .db $03
    .db $43
    .db $03
    .db $00
    .db $00
    .db $00
    .db $00
    .db $30
    .db $30
    .db $00
    .db $00
    .db $30
    .db $03
    .db $00
    .db $00
    .db $03
    .db $03
    .db $00
    .db $00
    .db $03
    .db $30
    .db $00
    .db $33
    .db $33
    .db $33
    .db $33
    .db $30
    .db $00
    .db $00
    .db $00
    .db $33
    .db $03
    .db $03
    .db $33
    .db $30
    .db $30
    .db $30
    .db $00
    .db $30
    .db $33
    .db $33
    .db $30
    .db $30
    .db $03
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $30
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $03
    .db $00
    .db $03
    .db $33
    .db $33
    .db $03
    .db $03
    .db $30
    .db $00
    .db $00
    .db $33
    .db $30
    .db $30
    .db $03
    .db $03
    .db $03
    .db $03
    .db $00
    .db $33
    .db $33
    .db $33
    .db $33
    .db $03
    .db $00
    .db $00
    .db $00
    .db $00
    .db $30
    .db $30
    .db $00
    .db $00
    .db $30
    .db $03
    .db $00
    .db $03
    .db $34
    .db $03
    .db $33
    .db $70
    .db $40
    .db $33
    .db $33
    .db $07
    .db $44
    .db $33
    .db $33
    .db $00
    .db $04
    .db $33
    .db $30
    .db $73
    .db $40
    .db $33
    .db $00
    .db $00
    .db $30
    .db $00
    .db $00
    .db $00
    .db $03
    .db $00
    .db $03
    .db $37
    .db $44
    .db $33
    .db $33
    .db $00
    .db $04
    .db $33
    .db $33
    .db $70
    .db $40
    .db $33
    .db $33
    .db $07
    .db $44
    .db $33
    .db $00
    .db $30
    .db $03
    .db $30
    .db $00
    .db $03
    .db $30
    .db $03
    .db $33
    .db $00
    .db $44
    .db $33
    .db $33
    .db $70
    .db $04
    .db $33
    .db $33
    .db $07
    .db $40
    .db $33
    .db $30
    .db $03
    .db $44
    .db $33
    .db $00
    .db $00
    .db $30
    .db $00
    .db $00
    .db $00
    .db $03
    .db $00
    .db $03
    .db $30
    .db $04
    .db $33
    .db $33
    .db $07
    .db $40
    .db $33
    .db $33
    .db $00
    .db $44
    .db $33
    .db $33
    .db $70
    .db $04
    .db $33
    .db $00
    .db $30
    .db $43
    .db $30
    .db $00
    .db $03
    .db $34
    .db $03
    .db $33
    .db $07
    .db $04
    .db $33
    .db $33
    .db $00
    .db $40
    .db $33
    .db $33
    .db $70
    .db $44
    .db $33
    .db $30
    .db $03
    .db $04
    .db $33
    .db $00
    .db $00
    .db $30
    .db $00
    .db $00
    .db $00
    .db $03
    .db $00
    .db $03
    .db $30
    .db $40
    .db $33
    .db $33
    .db $70
    .db $44
    .db $33
    .db $33
    .db $07
    .db $04
    .db $33
    .db $33
    .db $00
    .db $40
    .db $33
    .db $00
    .db $30
    .db $43
    .db $30
    .db $00
    .db $06
    .db $26
    .db $06
    .db $26
    .db $00
    .db $66
    .db $66
    .db $66
    .db $88
    .db $88
    .db $88
    .db $00
    .db $60
    .db $66
    .db $66
    .db $88
    .db $86
    .db $00
    .db $00
    .db $00
    .db $66
    .db $66
    .db $93
    .db $00
    .db $00
    .db $00
    .db $6D
    .db $66
    .db $00
    .db $00
    .db $00
    .db $00
    .db $EF
    .db $66
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $69
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $30
    .db $00
    .db $00
    .db $00
    .db $02
    .db $00
    .db $02
    .db $00
    .db $06
    .db $66
    .db $66
    .db $28
    .db $68
    .db $08
    .db $60
    .db $66
    .db $66
    .db $86
    .db $88
    .db $88
    .db $00
    .db $00
    .db $60
    .db $66
    .db $86
    .db $69
    .db $00
    .db $00
    .db $00
    .db $66
    .db $66
    .db $30
    .db $00
    .db $00
    .db $00
    .db $DE
    .db $66
    .db $00
    .db $00
    .db $00
    .db $00
    .db $F0
    .db $66
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $93
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $39
    .db $00
    .db $00
    .db $00
    .db $00
    .db $0F
    .db $66
    .db $00
    .db $00
    .db $00
    .db $00
    .db $ED
    .db $66
    .db $00
    .db $00
    .db $00
    .db $00
    .db $66
    .db $66
    .db $03
    .db $00
    .db $00
    .db $06
    .db $66
    .db $68
    .db $96
    .db $06
    .db $66
    .db $66
    .db $68
    .db $88
    .db $88
    .db $60
    .db $66
    .db $66
    .db $83
    .db $86
    .db $80
    .db $00
    .db $00
    .db $30
    .db $00
    .db $30
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $03
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $96
    .db $00
    .db $00
    .db $00
    .db $00
    .db $FE
    .db $66
    .db $00
    .db $00
    .db $00
    .db $00
    .db $D6
    .db $66
    .db $00
    .db $00
    .db $00
    .db $00
    .db $66
    .db $66
    .db $39
    .db $00
    .db $06
    .db $66
    .db $66
    .db $88
    .db $68
    .db $66
    .db $66
    .db $66
    .db $88
    .db $88
    .db $88
    .db $00
    .db $60
    .db $63
    .db $30
    .db $63
    .db $00
    .db $06
    .db $26
    .db $68
    .db $28
    .db $60
    .db $66
    .db $66
    .db $86
    .db $00
    .db $00
    .db $66
    .db $66
    .db $00
    .db $00
    .db $ED
    .db $66
    .db $00
    .db $00
    .db $00
    .db $63
    .db $90
    .db $09
    .db $90
    .db $99
    .db $99
    .db $99
    .db $90
    .db $CC
    .db $90
    .db $11
    .db $00
    .db $11
    .db $10
    .db $11
    .db $00
    .db $10
    .db $10
    .db $10
    .db $00
    .db $10
    .db $00
    .db $11
    .db $10
    .db $11
    .db $00
    .db $11
    .db $00
    .db $10
    .db $00
    .db $10
    .db $10
    .db $10
    .db $00
    .db $11
    .db $10
    .db $10
    .db $10
    .db $11
    .db $00
    .db $10
    .db $10
    .db $10
    .db $10
    .db $10
    .db $00
    .db $01
    .db $00
    .db $01
    .db $01
    .db $01
    .db $00
    .db $11
    .db $01
    .db $11
    .db $00
    .db $11
    .db $00
    .db $01
    .db $01
    .db $01
    .db $00
    .db $01
    .db $00
    .db $11
    .db $00
    .db $11
    .db $01
    .db $11
    .db $00
    .db $01
    .db $01
    .db $01
    .db $01
    .db $01
    .db $00
    .db $11
    .db $01
    .db $01
    .db $01
    .db $11
    .db $00
    .db $FF
    .db $F0
    .db $FF
    .db $00
    .db $FF
    .db $00
    .db $F0
    .db $00
    .db $F0
    .db $F0
    .db $F0
    .db $00
    .db $EE
    .db $E0
    .db $E0
    .db $E0
    .db $EE
    .db $00
    .db $E0
    .db $E0
    .db $E0
    .db $E0
    .db $E0
    .db $00
    .db $DD
    .db $D0
    .db $D0
    .db $D0
    .db $DD
    .db $00
    .db $D0
    .db $D0
    .db $D0
    .db $D0
    .db $D0
    .db $00
    .db $0F
    .db $0F
    .db $0F
    .db $00
    .db $0F
    .db $00
    .db $FF
    .db $00
    .db $FF
    .db $0F
    .db $FF
    .db $00
    .db $0E
    .db $0E
    .db $0E
    .db $0E
    .db $0E
    .db $00
    .db $EE
    .db $0E
    .db $0E
    .db $0E
    .db $EE
    .db $00
    .db $0D
    .db $0D
    .db $0D
    .db $0D
    .db $0D
    .db $00
    .db $DD
    .db $0D
    .db $0D
    .db $0D
    .db $DD
    .db $00
    .db $1C
    .db $0D
    .db $7F
    .db $E7
    .db $70
    .db $00
    .db $0F
    .db $71
    .db $71
    .db $07
    .db $DC
    .db $77
    .db $7C
    .db $0D
    .db $71
    .db $C7
    .db $77
    .db $DE
    .db $07
    .db $71
    .db $17
    .db $17
    .db $DE
    .db $F7
    .db $71
    .db $17
    .db $71
    .db $7C
    .db $DE
    .db $F0
    .db $07
    .db $77
    .db $C7
    .db $71
    .db $17
    .db $70
    .db $70
    .db $7C
    .db $D7
    .db $77
    .db $77
    .db $70
    .db $01
    .db $CD
    .db $FF
    .db $D7
    .db $70
    .db $F0
    .db $00
    .db $00
    .db $00

;Bank 3
	.org $C000

JMP_BOOTUP_UNIT_OK: ; 0x005000, $C000
    JMP   BOOTUP_UNIT_OK
JMP_BOOTUP_RAM_FAILURE: ; 0x005003, $C003
    JMP   BOOTUP_RAM_FAILURE
JMP_BOOTUP_ROM_FAILURE: ; 0x005006, $C006
    JMP   BOOTUP_ROM_FAILURE
JMP_SRAM_CHECK_UNK: ; 0x005009, $C009
    JMP   SRAM_CHECK_UNK
JMP_BOOKKEEP_UPDATE_+A: ; 0x00500C, $C00C
    JMP   BOOKKEEP_UPDATE_+A
JMP_BOOKKEEP_UPDATE_+1: ; 0x00500F, $C00F
    JMP   BOOKKEEP_UPDATE_+1
    JMP   L_005C2C
    JMP   L_005C20
    JMP   L_005C26
JMP_INIT_SRAM_C41D: ; 0x00501B, $C01B
    JMP   INIT_SRAM_$C41D_WITH_$5ECF
JMP MOVE_@X_TO_SRAM@Y: ; 0x00501E, $C01E
    JMP   MOVE_@X_TO_SRAM@Y
JMP_SETTINGS_MENU?: ; 0x005021, $C021
    JMP   SETTINGS_MENU?
JMP_CLEAR_ENTIRE+SETTINGS: ; 0x005024, $C024
    JMP   CLEAR_ENTIRE+SETTINGS
JMP_FAILED_W/_AUTO_NOT_PRESSED: ; 0x005027, $C027
    JMP   FAILED_WITH_AUTO_NOT_PRESSED
JMP_RUG_MISMATCH: ; 0x00502A, $C02A
    JMP   RUG_MISMATCH_JMP
JMP_RUG_LEAVE_ADMIN_MENU?: ; 0x00502D, $C02D
    JMP   RUG_MENU_LEAVE?
JUMP_RUG_MATCH_UNK: ; 0x005030, $C030
    JMP   RUG_MATCH_UNK
JMP_TO_HIGHSCORES_TO_RAM: ; 0x005033, $C033
    JMP   INIT_HIGHSCORES_TO_RAM
JMP_STORE_B@X_BANK0: ; 0x005036, $C036
    JMP   JMP_STORE_B@X_BANK0
JMP_LOAD_B@X_BANK0: ; 0x005039, $C039
    JMP   LOAD_B@X_BANK0
GOTO_C002_B2: ; 0x00503C, $C03C
    JSR   JMP_GOTO_PAST_JSR ; TEXT_RTN
    .db $C0 ; $C002, bank 2
    .db $02
    .db $02
    RTS
GOTO_C005_B5: ; 0x005043, $C043
    JSR   JMP_GOTO_PAST_JSR
    .db $C0
    .db $05
    .db $02
    RTS
GOTO_C00E_B2: ; 0x00504A, $C04A
    JSR   JMP_GOTO_PAST_JSR
    .db $C0
    .db $0E
    .db $02
    RTS
GOTO_C011_B2: ; 0x005051, $C051
    JSR   JMP_GOTO_PAST_JSR
    .db $C0
    .db $11
    .db $02
    RTS
GOTO_C01A_B2: ; 0x005058, $C058
    JSR   JMP_GOTO_PAST_JSR
    .db $C0
    .db $1A
    .db $02
    RTS
GOTO_C01D_B2: ; 0x00505F, $C05F
    JSR   JMP_GOTO_PAST_JSR
    .db $C0
    .db $1D
    .db $02
    RTS
GOTO_C020_B2: ; 0x005066, $C066
    JSR   JMP_GOTO_PAST_JSR
    .db $C0
    .db $20
    .db $02
    RTS
GOTO_C023_B2: ; 0x00506D, $C06D
    JSR   JMP_GOTO_PAST_JSR
    .db $C0
    .db $23
    .db $02
    RTS
    ADCB  $A0FF
BOOTUP_UNIT_OK: ; 0x005076, $C076
    JSR   CLR_SCR+ADV/AUTO+CLEAR_PALETTE+$49_STUFF
    LDB   #$7A ; R3/7,G6/7,B2/3
    JSR   SET_COLOR_$C001
    LDU   #$C069 ; PTR to SENTENCE INITIAL TESTS INDICATE
    LDX   #$2870 ; POS XXYY
    JSR   GOTO_C002_B2 ; Put to screen.
    LDU   #$C06B ; PTR to SENTENCE UNIT OK
    LDX   #$4090 ; POS
    JSR   GOTO_C002_B2 ; Put to screen
    LDB   #$0F ; All LED's lighted?
    JSR   ROM_LED_BLINK_STARTUP?
    LDY   #$0BB8 ; Loops to read switches for admin menu.
    JMP   AUTO+ADV_CHECK ; RTS's back into main bootup code to JMP to game code.
BOOTUP_RAM_FAILURE: ; 0x00509C, $C09C
    JSR   CLR_SCR+ADV/AUTO+CLEAR_PALETTE+$49_STUFF
    LDB   #$57 ; R2/7,G5/7,B3/3
    JSR   SET_COLOR_$C001
    LDU   #$C069 ; PTR to SENTENCE INITIAL TESTS INDICATE
    LDX   #$2870 ; POS
    JSR   GOTO_C002_B2
    LDU   #$C073 ; PTR to SENTENCE RAM FAILURE
    LDX   #$3890 ; POS
    JSR   GOTO_C002_B2
    BRA   BOOTUP_FAILURE_WAIT
BOOTUP_ROM_FAILURE: ; 0x0050B8, $C0B8
    JSR   CLR_SCR+ADV/AUTO+CLEAR_PALETTE+$49_STUFF
    LDB   #$57 ; R2/7,G5/7,B3/3
    JSR   SET_COLOR_$C001
    LDU   #$C069 ; PTR, SENTENCE INITIAL TESTS INDICATE
    LDX   #$2860
    JSR   GOTO_C002_B2
    LDU   #$C071 ; PTR, SENTENCE ROM FAILURE
    LDX   #$3880 ; POS
    JSR   GOTO_C002_B2
    TFR   DP>A
    CMPA  #$9E ; Value if DP was 0.
    BEQ   BOOTUP_FAILURE_WAIT
    LDU   #$C073 ; PTR to SENTENCE RAM FAILURE
    LDX   #$38A0 ; POS
    JSR   GOTO_C002_B2 ; Put to screen
BOOTUP_FAILURE_WAIT: ; 0x0050E1, $C0E1
    LDY   #$0BB8 ; Timer?
LOOP_FAIL_ADV/AUTO_READ: ; 0x0050E5, $C0E5
    JSR   ADV+AUTO_CUMULATIVE ; Get switches.
    LDX   #$CC00 ; Get ROM PIA.
    JSR   JMP_LOAD_B@X_BANK0
    BITB  #$02 ; Test ADV switch.
    BEQ   ADV_NOT_PRESSED ; If ADV isn't pressed, loop to wait.
    LSRB ; AUTO switch to CC.c
    BLO   RTS ; If auto is pressed, leaves...
    BRA   FAILED_WITH_AUTO_NOT_PRESSED ; If not pressed, goes here.
ADV_NOT_PRESSED: ; 0x0050F7, $C0F7
    LEAY  -1,Y
    BNE   LOOP_FAIL_ADV/AUTO_READ
RTS: ; 0x0050FB, $C0FB
    RTS
SRAM_CHECK_UNK: ; 0x0050FC, $C0FC
    ANDCC #$EF ; Clear IRQ mask.
    LDX   #$C47F ; PTR to SRAM
    JSR   JMP_GET_DATA_FROM_SRAM@X_IN_B ; Get data.
    CMPB  #$5A ; See if set.
    BNE   GOTO_SETTINGS_MENU ; Go if mismatch.
    LDX   #$C400
    JSR   JMP_LOAD_B@X_BANK0 ; Saves bank?
    ANDB  #$0F
    BNE   C400_NOT_0 ; Some bits set.
    RTS ; RTS if bits set.
C400_NOT_0: ; 0x005113, $C113
    CLRB
    JSR   JMP_STORE_B@X_BANK0 ; Clear location.
    LDX   #$C47D
    JSR   JMP_GET_DATA_FROM_SRAM@X_IN_B ; Get data here
    CLRA ; Clear
    LEAX  -2,X ; Fix location.
    JSR   JMP_STORE_A_TO_SRAM_@X_BANKED ; Clear location.
    CMPB  #$15 ; Previous value.
    BNE   PREV_NOT_0x15
CLEAR_ENTIRE+SETTINGS: ; 0x005127, $C127
    ANDCC #$7F ; Clear ENTIRE flag.
    BRA   FAILED_WITH_AUTO_NOT_PRESSED
PREV_NOT_0x15: ; 0x00512B, $C12B
    CMPB  #$25
    BNE   PREV_NOT_0x25
    JMP   INIT_SRAM_$C41D_WITH_$5ECF
PREV_NOT_0x25: ; 0x005132, $C132
    CMPB  #$35
    BNE   PREV_NOT_35
    JMP   L_005BBF
PREV_NOT_35: ; 0x005139, $C139
    CMPB  #$45
    BEQ   GOTO_SETTINGS_MENU
    RTS ; Leave otherwise.
GOTO_SETTINGS_MENU: ; 0x00513E, $C13E
    LEAS  2,S ; Clean stack because we will not RTS.
    JSR   INIT_SRAM
    JMP   SETTINGS_MENU? ; Settings menu?
FAILED_WITH_AUTO_NOT_PRESSED: ; 0x005146, $C146
    ORCC  #$10 ; Mask interrupts.
    JSR   CLR_SCR+ADV/AUTO+CLEAR_PALETTE+$49_STUFF ; Do...
    JSR   JMP_ROM_CHECK_START ; Do...
    PSHS  U ; Save U
    LDU   DATA_W_$F86E
    LEAU  24,U ; Off $2886
    STU   $A043 ; Store to..
    PULS  U ; Restore U
    CMPU  $A043 ; Compare them.
    BEQ   STACKS_THE_SAME ; Taken if same.
    STU   $A05B ; Not same, do...
    LDB   #$08
    JSR   ROM_BOARD_LED_DISPLAY_B ; Show
    LDB   #$57 ; R=2/7,G=5/7,B=3/3
    JSR   SET_COLOR_$C001 ; Color
    LDU   #$C071 ; PTR
    LDX   #$3860 ; POS
    JSR   GOTO_C002_B2 ; DISP
    LDY   #$C035 ; PTR
    JSR   GOTO_C023_B2 ; DISP
    LDD   #$4266 ; IDK
    STD   $A04A ; Store
L_005180: ; 0x005180, $C180
    LDX   $A04A ; Load
    LEAX  10,X ; Add 10
    STX   $A04A ; Store
    LDU   #$C06D ; PTR?
    JSR   GOTO_C002_B2 ; Disp?
    LDU   DATA_W_$F86E ; Get
    STU   $A043 ; Put
    LDU   $A05B ; Load
    LDD   $A05B
    SUBD  $A043 ; Get difference.
    LSRB ; Get bottom bit.
    BLO   BOTTOM_BIT_SET ; Don't add if bottom set.
    LEAU  1,U
BOTTOM_BIT_SET: ; 0x00519C, $C19C
    INCB ; INC PTR bottom?
    STB   $A03A ; Store...
    JSR   A+=16_PER_EACH_B_0xF0>>8_VALUE ; Make pos?
    LDX   SENTENCE_CURR_SCR_LOC_XXYY
    JSR   GOTO_C00E_B2 ; Text IDK
    JSR   WATCHDOG/TRIGGER_$49_ON_AUTO+ADV ; Watchdog+switches.
    JSR   JMP_CORRECT_CHECKSUM ; Idk why
    STU   $A05B ; Store U...?
    LDU   DATA_W_$F86E ; Get ptr...
    LEAU  24,U ; Ad 24
    CMPU  $A05B ; Compare to...
    BNE   L_005180 ; Not +24
    JSR   WAIT_ADV_NONPRESS_THEN_PRESS
    TST   UNK_$49_SYS_MENU_FLAG? ; Test flag...
    BNE   $49_NOT_SET ; If not set..
    LDB   $A03A ; If set, load val...
    JSR   ROM_BOARD_LED_DISPLAY_B ; Display on ROM board.
    LDY   #$C039 ; PTR?
    JSR   GOTO_C023_B2 ; Disp?
    BRA   L_0051EE ; Go always
STACKS_THE_SAME: ; 0x0051CF, $C1CF
    TFR   CC>B
    TSTB
    BPL   L_005212
    LDB   #$7A
    JSR   SET_COLOR_$C001
    LDU   #$C077
    LDX   #$3880
    JSR   GOTO_C002_B2
    LDY   #$C039
    JSR   GOTO_C023_B2
    LDB   #$08
    JSR   ROM_LED_BLINK_STARTUP?
L_0051EE: ; 0x0051EE, $C1EE
    JSR   L_005A39
$49_NOT_SET: ; 0x0051F1, $C1F1
    JSR   CLR_SCR+ADV/AUTO+CLEAR_PALETTE+$49_STUFF
    CLRB
    JSR   ROM_BOARD_LED_DISPLAY_B
    JSR   SET_COLOR_RED_PALETTE_0x01
    LDU   #$C079
    LDX   #$4080
    JSR   GOTO_C002_B2
    LDY   #$C03D
    JSR   GOTO_C023_B2
    LDY   #$1388
    JSR   AUTO+ADV_CHECK
L_005212: ; 0x005212, $C212
    JSR   ADV+AUTO_CUMULATIVE
    TST   UNK_$49_SYS_MENU_FLAG?
    LBNE  Y_IS_#$000A
    TST   UNK_$47
    BNE   L_005212
    LDX   #$C000
    LDB   #$C0
L_005224: ; 0x005224, $C224
    JSR   JMP_STORE_B@X_BANK0
    LDA   #$B5
    MUL
    EXG   A-B
    LEAX  1,X
    CMPX  #$C010
    BNE   L_005224
    LDD   #$0000
    LDY   #$000A
    JMP   JMP_RUG_SETUP
RUG_MISMATCH_JMP: ; 0x00523D, $C23D
    TFR   Y>D
    EORB  -X
    EORA  -X
    STD   $A041
    STX   $A043
    JSR   CLEAR_COLOR_PALETTE
    JSR   JMP_CLEAR_ALL_SCREEN
    JSR   SETUP_52+49+48+36+59
    JSR   WATCHDOG/TRIGGER_$49_ON_AUTO+ADV
    LDB   #$04
    JSR   ROM_BOARD_LED_DISPLAY_B
    LDB   #$57
    JSR   SET_COLOR_$C001
    LDU   #$C073
    LDX   #$3870
    JSR   GOTO_C002_B2
    LDY   #$C041
    JSR   GOTO_C023_B2
    LDD   $A041
    TSTA
    BNE   L_005274
    TFR   B>A
L_005274: ; 0x005274, $C274
    CLRB
L_005275: ; 0x005275, $C275
    INCB
    LSRA
    BHS   L_005275
    STB   $A03A
    LDD   $A043
L_00527D: ; 0x00527D, $C27D
    SUBA  #$03
    BHS   L_00527D
    ADDA  #$04
    STA   $A03B
    LDU   #$C06F
    LDX   #$4290
    JSR   GOTO_C002_B2
    LDB   $A03B
    ASLB
    ASLB
    ASLB
    ASLB
    ADDB  $A03A
    CLRA
    LDX   SENTENCE_CURR_SCR_LOC_XXYY
    JSR   GOTO_C00E_B2
    JSR   WAIT_ADV_NONPRESS_THEN_PRESS
    TST   UNK_$49_SYS_MENU_FLAG?
    BNE   Y_IS_#$000A
    LDA   $A03B
    LDB   #$10
L_0052A7: ; 0x0052A7, $C2A7
    LSRB
    DECA
    BNE   L_0052A7
    JSR   ROM_BOARD_LED_DISPLAY_B
    JSR   WAIT_ADV_NONPRESS_THEN_PRESS
    TST   UNK_$49_SYS_MENU_FLAG?
    BNE   Y_IS_#$000A
    LDB   $A03A
    JSR   ROM_BOARD_LED_DISPLAY_B
    LDY   #$C045
    JSR   GOTO_C023_B2
    BRA   L_0052EF
RUG_MENU_LEAVE?: ; 0x0052C3, $C2C3
    JSR   CLEAR_COLOR_PALETTE
    JSR   JMP_CLEAR_ALL_SCREEN
    JSR   SETUP_52+49+48+36+59
    JSR   WATCHDOG/TRIGGER_$49_ON_AUTO+ADV
    CMPY  #$000A
    BEQ   Y_IS_#$000A
    LDB   #$7A ; R3/7,B6/7,G2/3
    JSR   SET_COLOR_$C001
    LDU   #$C07B
    LDX   #$2880
    JSR   GOTO_C002_B2
    LDY   #$C045
    JSR   GOTO_C023_B2
    LDB   #$04
    JSR   ROM_LED_BLINK_STARTUP?
L_0052EF: ; 0x0052EF, $C2EF
    JSR   L_005A39
Y_IS_#$000A: ; 0x0052F2, $C2F2
    JSR   CLR_SCR+ADV/AUTO+CLEAR_PALETTE+$49_STUFF
    TFR   DP>A
    CMPA  #$A2
    BNE   L_005318
    LDB   #$02
    JSR   ROM_BOARD_LED_DISPLAY_B
    LDB   #$57
    JSR   SET_COLOR_$C001
    LDU   #$C081
    LDX   #$2880
    JSR   GOTO_C002_B2
    LDY   #$C049
    JSR   GOTO_C023_B2
    JMP   L_0053BB
L_005318: ; 0x005318, $C318
    ADDA  #$03
    CLRB
    STD   $A041
    LDU   $A041
    LDX   #$C400
L_005322: ; 0x005322, $C322
    JSR   JMP_LOAD_B@X_BANK0
    STB   U+
    LEAX  1,X
    CMPX  #$C500
    BNE   L_005322
    LDD   #$0010
    STB   $A03A
    CLRA
L_005334: ; 0x005334, $C334
    LDX   #$C400
    LDB   $A03A
L_005339: ; 0x005339, $C339
    JSR   JMP_STORE_B@X_BANK0
    LEAX  1,X
    INCB
    CMPB  $A03A
    BNE   L_005339
    LDX   #$C400
    INCA
L_005347: ; 0x005347, $C347
    JSR   JMP_LOAD_B@X_BANK0
    STB   $A03B
    LEAX  1,X
    JSR   JMP_LOAD_B@X_BANK0
    SUBB  $A03B
    DECB
    ANDB  #$0F
    BNE   L_005366
    INCA
    BNE   L_005347
    JSR   WATCHDOG/TRIGGER_$49_ON_AUTO+ADV
    TST   UNK_$49_SYS_MENU_FLAG?
    BNE   L_005366
    DEC   $A03A
    BNE   L_005334
L_005366: ; 0x005366, $C366
    LDU   $A041
    LDX   #$C400
L_00536B: ; 0x00536B, $C36B
    LDB   U+
    JSR   JMP_STORE_B@X_BANK0
    LEAX  1,X
    CMPX  #$C500
    BNE   L_00536B
    TST   UNK_$49_SYS_MENU_FLAG?
    BNE   L_0053BE
    LDA   $A03A
    BEQ   L_0053A1
    LDB   #$02
    JSR   ROM_BOARD_LED_DISPLAY_B
    LDB   #$57
    JSR   SET_COLOR_$C001
    JSR   WATCHDOG/TRIGGER_$49_ON_AUTO+ADV
    LDU   #$C07D
    LDX   #$3080
    JSR   GOTO_C002_B2
    JSR   WATCHDOG/TRIGGER_$49_ON_AUTO+ADV
    LDY   #$C049
    JSR   GOTO_C023_B2
    BRA   L_0053BB
L_0053A1: ; 0x0053A1, $C3A1
    LDB   #$7A
    JSR   SET_COLOR_$C001
    LDU   #$C07F
    LDX   #$3880
    JSR   GOTO_C002_B2
    LDY   #$C049
    JSR   GOTO_C023_B2
    LDB   #$02
    JSR   ROM_LED_BLINK_STARTUP?
L_0053BB: ; 0x0053BB, $C3BB
    JSR   L_005A39
L_0053BE: ; 0x0053BE, $C3BE
    JSR   CLR_SCR+ADV/AUTO+CLEAR_PALETTE+$49_STUFF
    LDB   #$01
    JSR   ROM_BOARD_LED_DISPLAY_B
    JSR   SET_COLOR_RED_PALETTE_0x01
    LDU   #$C083
    LDX   #$3880
    JSR   GOTO_C002_B2
    LDY   #$C04D
    JSR   GOTO_C023_B2
    LDY   #$1388
    JSR   AUTO+ADV_CHECK
    JSR   L_005B67
    LDY   #$07D0
L_0053E7: ; 0x0053E7, $C3E7
    LDU   #$C9D8
L_0053EA: ; 0x0053EA, $C3EA
    LDB   U+
    LDX   #$C000
L_0053EF: ; 0x0053EF, $C3EF
    JSR   JMP_STORE_B@X_BANK0
    LEAX  1,X
    CMPX  #$C010
    BNE   L_0053EF
    JSR   AUTO+ADV_CHECK
    CMPU  #$C9E0
    BNE   L_0053EA
    TST   UNK_$49_SYS_MENU_FLAG?
    BEQ   L_0053E7
RUG_MATCH_UNK: ; 0x005406, $C406
    JSR   CLR_SCR+ADV/AUTO+CLEAR_PALETTE+$49_STUFF
    CLRB
    STB   $A041 ; Clear
    STB   $A042 ; Set
    JSR   ROM_BOARD_LED_DISPLAY_B
    JSR   SET_COLOR_RED_PALETTE_0x01 ; Red?
    LDU   #$C085 ; Str?
    LDX   #$4078 ; Screen loc?
    JSR   GOTO_C002_B2 ; Text?
    LDY   #$C055
    JSR   GOTO_C023_B2 ; Text?
    LDY   #$0001 ; Set
L_005428: ; 0x005428, $C428
    LDU   #$C9F0 ; Load
    CLRA ; Clear
LOOP_ERROR?: ; 0x00542C, $C42C
    LDX   #$CC00
    JSR   JMP_LOAD_B@X_BANK0 ; Get ROM PIA
    BITB  #$01 ; Test auto/manual
    BNE   AUTO/MANUAL PRESSED
    BITB  #$02 ; Test advance switch
    BNE   ADVANCED_PRESSED
    JSR   ADV+AUTO_CUMULATIVE
    BRA   LOOP_ERROR?
AUTO/MANUAL PRESSED: ; 0x00543F, $C43F
    JSR   AUTO+ADV_CHECK
L_005442: ; 0x005442, $C442
    INCA
    CMPA  U
    BNE   L_00544B
    LEAU  1,U
    BRA   L_005442
L_00544B: ; 0x00544B, $C44B
    STA   $A03A
    EORA  #$3F
ADVANCED_PRESSED: ; 0x00544F, $C44F
    LDB   #$13
    JSR   OUTPUT_SOUND?
    TST   UNK_$49_SYS_MENU_FLAG?
    BNE   L_005486
    LDB   $A03A
    JSR   OUTPUT_SOUND?
    LDY   #$03E8
    LDD   $A041
    LDX   #$5A8C
    JSR   GOTO_C011_B2
    LDB   $A03A
    JSR   A+=16_PER_EACH_B_0xF0>>8_VALUE
    CLRA
    STD   $A041
    LDX   #$5A8C
    JSR   GOTO_C00E_B2
    LDA   $A03A
    CMPA  #$1F
    BNE   LOOP_ERROR?
    TFR   CC>B
    TSTB
    LBPL  L_005585
    BRA   L_005428
L_005486: ; 0x005486, $C486
    JSR   CLR_SCR+ADV/AUTO+CLEAR_PALETTE+$49_STUFF
    JSR   SET_COLOR_RED_PALETTE_0x01
    LDU   #$C087
    LDX   #$3820
    JSR   GOTO_C002_B2
    LDY   #$C059
    JSR   GOTO_C023_B2
    TFR   DP>A
    LDB   #$62
    STD   $A041
    ADDB  #$26
    TFR   D>X
    LDA   #$FF
L_0054A8: ; 0x0054A8, $C4A8
    STA   -X
    CMPX  $A041
    BNE   L_0054A8
    CLR   $A05D
    CLR   $A05E
    CLR   $A05F
    CLR   $A060
    CLR   LIST_OBJ[6]=0
L_0054B8: ; 0x0054B8, $C4B8
    LDA   #$01
    STA   $A03C
    LDX   #$CC00
    LDU   $A041
    LEAU  -5,U
    CLRA
L_0054C4: ; 0x0054C4, $C4C4
    JSR   JMP_LOAD_B@X_BANK0
    CMPX  #$CC06
    BNE   L_0054CE
    ANDB  #$7F
L_0054CE: ; 0x0054CE, $C4CE
    CMPA  #$18
    BNE   L_0054D4
    ANDB  #$CF
L_0054D4: ; 0x0054D4, $C4D4
    STB   $A03A
    EORB  U+
    BNE   L_005512
    ADDA  #$08
L_0054DC: ; 0x0054DC, $C4DC
    LEAX  2,X
    CMPX  #$CC02
    BEQ   L_0054DC
    CMPX  #$CC08
    BNE   L_0054C4
    CMPA  #$28
    BEQ   L_005501
    LEAX  -2,X
    JSR   JMP_LOAD_B@X_BANK0
    TSTB
    BPL   L_005501
    LDB   #$34
    LEAX  1,X
    JSR   JMP_STORE_B@X_BANK0
    LEAX  -3,X
    INC   $A03C
    BRA   L_0054C4
L_005501: ; 0x005501, $C501
    LDB   #$3C
    LDX   #$CC07
    JSR   JMP_STORE_B@X_BANK0
    JSR   WATCHDOG/TRIGGER_$49_ON_AUTO+ADV
    TST   UNK_$49_SYS_MENU_FLAG?
    BEQ   L_0054B8
    BRA   L_005585
L_005512: ; 0x005512, $C512
    STB   $A03B
    LDB   #$01
L_005516: ; 0x005516, $C516
    BITB  $A03B
    BNE   L_00551E
    INCA
    ASLB
    BRA   L_005516
L_00551E: ; 0x00551E, $C51E
    LDX   $A041
    BITB  $A03A
    BNE   L_005538
    EORB  -U
    STB   U
L_005528: ; 0x005528, $C528
    CMPA  X+
    BNE   L_005528
    COM   -X
    BSR   L_00556C
    LDD   #$3808
    JSR   L_002FB9
    BRA   L_005501
L_005538: ; 0x005538, $C538
    EORB  -U
    STB   U
    LDB   #$08
    JSR   OUTPUT_SOUND?
L_005541: ; 0x005541, $C541
    TST   X+
    BPL   L_005541
    STA   -X
    PSHS  A
    BSR   L_00556C
    JSR   GOTO_C002_B2
    PULS  A
    CMPA  #$08
    BLO   L_005501
    LSRA
    CMPA  #$06
    BEQ   L_005501
    LDX   #$CC06
    JSR   JMP_LOAD_B@X_BANK0
    TSTB
    BPL   L_005501
    LDX   SENTENCE_CURR_SCR_LOC_XXYY
    CLRA
    LDB   $A03C
    JSR   GOTO_C00E_B2
    BRA   L_005501
L_00556C: ; 0x00556C, $C56C
    LDU   #$C08B
    CMPA  #$18
    BLO   L_005575
    SUBA  #$10
L_005575: ; 0x005575, $C575
    ASLA
    LEAU  A,U
    TFR   X>D
    SUBD  $A041
    LDA   #$0A
    MUL
    ADDD  #$3830
    TFR   D>X
    RTS
L_005585: ; 0x005585, $C585
    JSR   CLR_SCR+ADV/AUTO+CLEAR_PALETTE+$49_STUFF
    JSR   SET_COLOR_RED_PALETTE_0x01
    LDU   #$C089
    LDX   #$2880
    JSR   GOTO_C002_B2
    LDY   #$C05D
    JSR   GOTO_C023_B2
    LDX   #$CC00
L_00559E: ; 0x00559E, $C59E
    LDU   #$C9F4
L_0055A1: ; 0x0055A1, $C5A1
    JSR   JMP_LOAD_B@X_BANK0
    BITB  #$01
    BEQ   L_0055BC
    LDY   #$1388
    JSR   AUTO+ADV_CHECK
    TST   UNK_$49_SYS_MENU_FLAG?
    LBNE  SETTINGS_MENU?
    JSR   JMP_LOAD_B@X_BANK0
    BITB  #$01
    BNE   L_0055C5
L_0055BC: ; 0x0055BC, $C5BC
    JSR   WAIT_ADV_NONPRESS_THEN_PRESS
    TST   UNK_$49_SYS_MENU_FLAG?
    LBNE  SETTINGS_MENU?
L_0055C5: ; 0x0055C5, $C5C5
    PSHS  U,Y,X
    JSR   [U]
    PULS  X,Y,U
    LEAU  2,U
    CMPU  #$C9FE
    BNE   L_0055A1
    LDY   #$1388
    JSR   AUTO+ADV_CHECK
    TFR   CC>B
    TSTB
    LBPL  FAILED_WITH_AUTO_NOT_PRESSED
    BRA   L_00559E
    JSR   WATCHDOG/TRIGGER_$49_ON_AUTO+ADV
    JSR   JMP_CLEAR_ALL_SCREEN
    JSR   CLEAR_COLOR_PALETTE
    LDX   #$C001
    LDB   #$FF
    JSR   JMP_STORE_B@X_BANK0
    LDX   #$C002
    LDB   #$C0
    JSR   JMP_STORE_B@X_BANK0
    LDX   #$C003
    LDB   #$38
    JSR   JMP_STORE_B@X_BANK0
    LDX   #$C004
    LDB   #$07
    JSR   JMP_STORE_B@X_BANK0
    JSR   WATCHDOG/TRIGGER_$49_ON_AUTO+ADV
    LDY   #$C6F7
    LDD   #$0101
L_005616: ; 0x005616, $C616
    LDX   Y
L_005618: ; 0x005618, $C618
    STD   X++
    CMPX  2,Y
    BNE   L_005618
    LEAY  4,Y
    CMPY  #$C71F
    BNE   L_005616
    JSR   WATCHDOG/TRIGGER_$49_ON_AUTO+ADV
    LDA   #$11
    LDY   #$C6D7
L_00562F: ; 0x00562F, $C62F
    LDX   Y
    STX   $A045
L_005633: ; 0x005633, $C633
    STA   X
    INC   $A045
    LDX   $A045
    CMPX  2,Y
    BNE   L_005633
    LEAY  4,Y
    CMPY  #$C6F7
    BNE   L_00562F
    JSR   WATCHDOG/TRIGGER_$49_ON_AUTO+ADV
    LDY   #$C71F
L_00564C: ; 0x00564C, $C64C
    LDX   Y
    STX   $A045
    LDA   4,Y
L_005652: ; 0x005652, $C652
    STA   X
    INC   $A045
    LDX   $A045
    CMPX  2,Y
    BNE   L_005652
    LEAY  5,Y
    CMPY  #$C75B
    BNE   L_00564C
    JSR   WATCHDOG/TRIGGER_$49_ON_AUTO+ADV
    LDY   #$C75B
L_00566B: ; 0x00566B, $C66B
    LDX   Y
    LDA   4,Y
L_00566F: ; 0x00566F, $C66F
    STA   X+
    CMPX  2,Y
    BNE   L_00566F
    LEAY  5,Y
    CMPY  #$C76F
    BNE   L_00566B
    JSR   WATCHDOG/TRIGGER_$49_ON_AUTO+ADV
    LDA   #$21
    STA   R_467E
    LDA   #$20
    STA   R_967E
    LDX   #$4E0A
L_00568D: ; 0x00568D, $C68D
    LDA   X
    ANDA  #$F0
    ORA   #$02
    STA   X+
    CMPX  #$4E6D
    BNE   L_00568D
    LDX   #$4E90
L_00569D: ; 0x00569D, $C69D
    LDA   X
    ANDA  #$F0
    ORA   #$02
    STA   X+
    CMPX  #$4EF3
    BNE   L_00569D
    JSR   WATCHDOG/TRIGGER_$49_ON_AUTO+ADV
    LDX   #$0E18
    STX   $A045
L_0056B2: ; 0x0056B2, $C6B2
    LDX   $A045
    LDA   X
    ANDA  #$F0
    ORA   #$01
    STA   X
    LDB   $A046
    ADDB  #$22
    BLO   L_0056C6
    STB   $A046
    BRA   L_0056B2
L_0056C6: ; 0x0056C6, $C6C6
    LDB   #$18
    STB   $A046
    LDB   $A045
    ADDB  #$10
    STB   $A045
    CMPB  #$9E
    BNE   L_0056B2
    JMP   WATCHDOG/TRIGGER_$49_ON_AUTO+ADV
    .db $07
    .db $07
    .db $97
    .db $07
    .db $07
    .db $29
    .db $97
    .db $29
    .db $07
    .db $4B
    .db $97
    .db $4B
    .db $07
    .db $6D
    .db $97
    .db $6D
    .db $07
    .db $8F
    .db $97
    .db $8F
    .db $07
    .db $B1
    .db $97
    .db $B1
    .db $07
    .db $D3
    .db $97
    .db $D3
    .db $07
    .db $F5
    .db $97
    .db $F5
    .db $06
    .db $07
    .db $06
    .db $F5
    .db $16
    .db $07
    .db $16
    .db $F5
    .db $26
    .db $07
    .db $26
    .db $F5
    .db $36
    .db $07
    .db $36
    .db $F5
    .db $46
    .db $07
    .db $46
    .db $F5
    .db $56
    .db $07
    .db $56
    .db $F5
    .db $66
    .db $07
    .db $66
    .db $F5
    .db $76
    .db $07
    .db $76
    .db $F5
    .db $86
    .db $07
    .db $86
    .db $F5
    .db $96
    .db $07
    .db $96
    .db $F5
    .db $48
    .db $05
    .db $55
    .db $05
    .db $44
    .db $48
    .db $06
    .db $55
    .db $06
    .db $44
    .db $48
    .db $07
    .db $55
    .db $07
    .db $00
    .db $48
    .db $08
    .db $55
    .db $08
    .db $33
    .db $48
    .db $09
    .db $55
    .db $09
    .db $33
    .db $48
    .db $F3
    .db $55
    .db $F3
    .db $33
    .db $48
    .db $F4
    .db $55
    .db $F4
    .db $33
    .db $48
    .db $F5
    .db $55
    .db $F5
    .db $00
    .db $48
    .db $F6
    .db $55
    .db $F6
    .db $44
    .db $48
    .db $F7
    .db $55
    .db $F7
    .db $44
    .db $07
    .db $7E
    .db $46
    .db $7E
    .db $22
    .db $57
    .db $7E
    .db $96
    .db $7E
    .db $22
    .db $05
    .db $6F
    .db $05
    .db $8E
    .db $04
    .db $06
    .db $6F
    .db $06
    .db $8E
    .db $30
    .db $96
    .db $6F
    .db $96
    .db $8E
    .db $00
    .db $97
    .db $6F
    .db $97
    .db $8E
    .db $34
    .db $BD
    .db $FF
    .db $BC
    .db $C6
    .db $05
L_005774: ; 0x005774, $C774
    LDX   #$C000
    BSR   L_00577C
    LDX   #$C00C
L_00577C: ; 0x00577C, $C77C
    JMP   JMP_STORE_B@X_BANK0
    LDB   #$28
    BRA   L_005774
    LDB   #$80
    BRA   L_005774
    LDY   #$C9FE
    JSR   UPLOAD_PALETTE_@Y
    JMP   L_005B3B
SET_COLOR_RED_PALETTE_0x01: ; 0x005791, $C791
    LDB   #$A5 ; R=5/7,G=1/7,B=1/3
SET_COLOR_$C001: ; 0x005793, $C793
    LDX   #$C001
    JMP   JMP_STORE_B@X_BANK0
SETTINGS_MENU?: ; 0x005799, $C799
    JSR   WATCHDOG/TRIGGER_$49_ON_AUTO+ADV
    JSR   CLR_SCR+ADV/AUTO+CLEAR_PALETTE+$49_STUFF
    BSR   SET_COLOR_RED_PALETTE_0x01
    LDU   #$C0D7 ; PTR to SENTENCE WILLIAMS DEFENDER
    LDX   #$2820 ; POS
    JSR   WATCHDOG/TRIGGER_$49_ON_AUTO+ADV
    JSR   GOTO_C002_B2
    LDY   #$C061
    JSR   GOTO_C023_B2
    LDY   #$05DC ; Timer?
    JSR   AUTO+ADV_CHECK
    TST   UNK_$49_SYS_MENU_FLAG?
    BNE   L_00581F
    CLR   $A03C
    LDA   #$01
    STA   $A03B
    LEAS  -32,S
    JSR   JMP_CLEAR_ALL_SCREEN
    LDU   #$C0D7 ; PTR to SENTENCE WILLIAMS DEFENDER
    LDX   #$2820 ; POS
    JSR   WATCHDOG/TRIGGER_$49_ON_AUTO+ADV
    JSR   GOTO_C002_B2
    CLR   $A03A
    LDY   #$C065
    JSR   GOTO_C020_B2
    JSR   WATCHDOG/TRIGGER_$49_ON_AUTO+ADV
    LDA   #$20
    TFR   A>B
    DECB
    LEAX  S
L_0057EA: ; 0x0057EA, $C7EA
    STA   X+
    DECB
    BNE   L_0057EA
    LDA   #$2F
    STA   X+
    LEAX  S
L_0057F5: ; 0x0057F5, $C7F5
    JSR   ADV+AUTO_CUMULATIVE
    LDX   #$CC00
    JSR   JMP_LOAD_B@X_BANK0
    BITB  #$02
    BEQ   L_005825
    BITB  #$01
    BNE   L_005812
    INC   $A03B
    DEC   $A03C
    BPL   L_005825
    LDB   #$1B
    STB   $A03C
    BRA   L_005825
L_005812: ; 0x005812, $C812
    INC   $A03C
    INC   $A03B
    LDA   #$1C
    CMPA  $A03C
    BNE   L_005825
    LEAS  32,S
L_00581F: ; 0x00581F, $C81F
    JSR   WATCHDOG/TRIGGER_$49_ON_AUTO+ADV
    JMP   L_002FC8
L_005825: ; 0x005825, $C825
    JSR   L_00597A
    TST   $A03B
    BEQ   L_0057F5
    LDB   $A03C
    CMPB  #$09
    BNE   L_005857
    LDX   #$C487
    JSR   JMP_GET_DATA_FROM_SRAM@X_IN_B
    TSTB
    BEQ   L_005857
    CMPB  #$08
    BHI   L_005844
    JSR   L_005B99
    BRA   L_005857
L_005844: ; 0x005844, $C844
    LDX   #$C487
    PSHS  X
    LDB   #$01
    JSR   JMP_STORE_B_TO_SRAM[X]
    JSR   L_005B99
    CLRB
    PULS  X
    JSR   JMP_STORE_B_TO_SRAM[X]
L_005857: ; 0x005857, $C857
    BSR   L_005891
    LDA   $A03A
    CMPA  #$06
    BEQ   L_00586D
    TSTA
    BNE   L_005866
    LDA   #$64
    BRA   L_005868
L_005866: ; 0x005866, $C866
    LDA   #$06
L_005868: ; 0x005868, $C868
    STA   $A03A
    INCA
    LDB   #$FF
L_00586D: ; 0x00586D, $C86D
    JSR   ADV+AUTO_CUMULATIVE
    DECA
    BEQ   L_00588C
    LDX   #$CC00
    PSHS  B
    JSR   JMP_LOAD_B@X_BANK0
    BITB  #$0A
    BNE   L_005883
    ANDCC #$FE
    BRA   L_005885
L_005883: ; 0x005883, $C883
    ORCC  #$01
L_005885: ; 0x005885, $C885
    PULS  B
    RORB
    BNE   L_00586D
    CLR   $A03A
L_00588C: ; 0x00588C, $C88C
    CLR   $A03B
    JMP   L_0057F5
L_005891: ; 0x005891, $C891
    LEAY  2,S
    LDX   #$1080
    JSR   GOTO_C01A_B2
    JSR   L_00591F
    LDA   $A03C
    INCA
    JSR   L_005902
    JSR   L_005910
    STD   X
    LDB   $A03C
    ASLB
    ASLB
    LDX   #$CCD6
    ABX
    LDY   X
    LDU   2,X
    LEAX  14,S
L_0058B6: ; 0x0058B6, $C8B6
    LDA   Y+
    CMPA  #$2F
    BEQ   L_0058C0
    STA   X+
    BRA   L_0058B6
L_0058C0: ; 0x0058C0, $C8C0
    TFR   U>D
    LEAU  2,S
    LDX   #$C400
    ABX
    JSR   JMP_GET_DATA_FROM_SRAM@X_IN_B
    PSHS  B,A
    LDB   $A03C
    INCB
    CMPB  #$07
    BHI   L_0058E7
L_0058D4: ; 0x0058D4, $C8D4
    PULS  A,B
    TFR   B>A
    JSR   L_005910
    STD   7,U
    JSR   JMP_GET_DATA_FROM_SRAM[X]
L_0058E0: ; 0x0058E0, $C8E0
    JSR   L_005910
    STD   9,U
    BRA   L_0058FA
L_0058E7: ; 0x0058E7, $C8E7
    CMPB  #$08
    BNE   L_0058F4
    LDD   #$3030
    STD   9,U
    LEAU  -2,U
    BRA   L_0058D4
L_0058F4: ; 0x0058F4, $C8F4
    PULS  A,B
    TFR   B>A
    BRA   L_0058E0
L_0058FA: ; 0x0058FA, $C8FA
    LDX   #$1080
    LEAY  2,S
    JMP   GOTO_C01D_B2
L_005902: ; 0x005902, $C902
    PSHS  B
    TFR   A>B
    LDA   #$99
L_005908: ; 0x005908, $C908
    ADDA  #$01
    DAA
    DECB
    BPL   L_005908
    PULS  B,PC
L_005910: ; 0x005910, $C910
    TFR   A>B
    ANDA  #$F0
    LSRA
    LSRA
    LSRA
    LSRA
    ADDA  #$30
    ANDB  #$0F
    ADDB  #$30
    RTS
L_00591F: ; 0x00591F, $C91F
    LDA   #$20
    TFR   A>B
    DECB
    LEAX  4,S
L_005926: ; 0x005926, $C926
    STA   X+
    DECB
    BNE   L_005926
    LDA   #$2F
    STA   X+
    LEAX  4,S
    RTS
L_005932: ; 0x005932, $C932
    CMPX  #$C481
    BNE   L_005951
    JSR   JMP_GET_DATA_FROM_SRAM@X_IN_AB
    LEAX  -4,X
    EXG   A-B
    ADDA  #$10
    DAA
    BHS   L_00594A
    EXG   A-B
    ADDA  #$01
L_005947: ; 0x005947, $C947
    DAA
    EXG   A-B
L_00594A: ; 0x00594A, $C94A
    EXG   A-B
    INC   $A03B
    JMP   JMP_STORE_D_TO_SRAM[X]
L_005951: ; 0x005951, $C951
    JSR   JMP_GET_DATA_FROM_SRAM[X]
    ADDA  #$01
L_005956: ; 0x005956, $C956
    DAA
    LEAX  -2,X
    INC   $A03B
    JMP   JMP_STORE_A_TO_SRAM_@X_BANKED
L_00595E: ; 0x00595E, $C95E
    CMPX  #$C481
    BNE   L_005973
    JSR   JMP_GET_DATA_FROM_SRAM@X_IN_AB
    LEAX  -4,X
    EXG   A-B
    ADDA  #$90
    DAA
    EXG   A-B
    ADCA  #$99
    BRA   L_005947
L_005973: ; 0x005973, $C973
    JSR   JMP_GET_DATA_FROM_SRAM[X]
    ADDA  #$99
    BRA   L_005956
L_00597A: ; 0x00597A, $C97A
    LDB   $A03C
    INCB
    CMPB  #$07
    BHI   L_005982
L_005981: ; 0x005981, $C981
    RTS
L_005982: ; 0x005982, $C982
    CMPB  #$09
    BLS   L_005997
    CMPB  #$10
    BHI   L_005997
    CMPB  #$0A
    BEQ   L_005997
    LDX   #$C487
    JSR   JMP_GET_DATA_FROM_SRAM[X]
    TSTA
    BNE   L_005981
L_005997: ; 0x005997, $C997
    DECB
    ASLB
    ASLB
    LDX   #$CCD6
    ABX
    LDB   3,X
    LDX   #$C400
    ABX
    PSHS  X
L_0059A6: ; 0x0059A6, $C9A6
    JSR   ADV+AUTO_CUMULATIVE
    LDX   #$CC00
    JSR   JMP_LOAD_B@X_BANK0
    BITB  #$02
    BEQ   L_0059B5
    PULS  X,PC
L_0059B5: ; 0x0059B5, $C9B5
    BITB  #$08
    BNE   L_0059BD
    CLR   $A03A
    BRA   L_0059A6
L_0059BD: ; 0x0059BD, $C9BD
    PULS  X
    CMPX  #$C47D
    BNE   L_0059D0
    PSHS  X,B
    LDX   #$C400
    LDB   #$01
    JSR   JMP_STORE_B@X_BANK0
    PULS  B,X
L_0059D0: ; 0x0059D0, $C9D0
    LSRB
    LBLO  L_005932
    JMP   L_00595E
    .db $02
    .db $03
    .db $04
    .db $10
    .db $18
    .db $20
    .db $40
    .db $80
    .db $00
    .db $FF
    .db $11
    .db $EE
    .db $22
    .db $DD
    .db $33
    .db $CC
    .db $44
    .db $BB
    .db $55
    .db $AA
    .db $66
    .db $99
    .db $77
    .db $88
    .db $13
    .db $1B
    .db $1C
    .db $00
    .db $C5
    .db $E3
    .db $C7
    .db $6F
    .db $C7
    .db $7F
    .db $C7
    .db $83
    .db $C7
    .db $87
    .db $05
    .db $05
    .db $28
    .db $28
    .db $80
    .db $80
    .db $00
    .db $00
    .db $AD
    .db $AD
    .db $2D
    .db $2D
    .db $A8
    .db $A8
    .db $85
    .db $85
WAIT_ADV_NONPRESS_THEN_PRESS: ; 0x005A0E, $CA0E
    LDX   #$CC00 ; PIA_ROM_A
    LDY   #$0064 ; Times...
LOOP_IF_PRESSED: ; 0x005A15, $CA15
    JSR   AUTO+ADV_CHECK ; Adv+auto check rtn.
    JSR   JMP_LOAD_B@X_BANK0 ; Get data too...
    BITB  #$02 ; Test adv pressed.
    BNE   LOOP_IF_PRESSED ; Loop if pressed.
LOOP_IF_NONPRESSED: ; 0x005A1F, $CA1F
    JSR   AUTO+ADV_CHECK ; Adv+auto check rtn.
    JSR   JMP_LOAD_B@X_BANK0 ; Get.
    BITB  #$02 ; Test adv pressed.
    BEQ   LOOP_IF_NONPRESSED
    RTS
CLR_SCR+ADV/AUTO+CLEAR_PALETTE+$49_STUFF: ; 0x005A2A, $CA2A
    JSR   JMP_CLEAR_ALL_SCREEN ; Clear screen.
    BSR   WATCHDOG/TRIGGER_$49_ON_AUTO+ADV ; Watchdog+ADV+AUTO
    JSR   CLEAR_COLOR_PALETTE ; Clear palette
    DEC   UNK_$49_SYS_MENU_FLAG? ; Dec menu flag?
    BPL   RTS ; DEC counter. If it's positive, don't clear?
    CLR   UNK_$49_SYS_MENU_FLAG? ; Clear if neg...idfk.
RTS: ; 0x005A38, $CA38
    RTS ; Leaves.
L_005A39: ; 0x005A39, $CA39
    LDY   #$0001
L_005A3D: ; 0x005A3D, $CA3D
    BSR   AUTO+ADV_CHECK
    TST   UNK_$49_SYS_MENU_FLAG?
    BEQ   L_005A3D
    RTS
AUTO+ADV_CHECK: ; 0x005A44, $CA44
    PSHS  Y,A,CC
READ_SWITCHES: ; 0x005A46, $CA46
    BSR   WATCHDOG/TRIGGER_$49_ON_AUTO+ADV
    TST   UNK_$49_SYS_MENU_FLAG? ; Test flag set in above, set if both ADV+AUTO pressed.
    BNE   LEAVE_RTN ; If triggered, leave.
    LDA   #$B2 ; Load delay.
READ_SWITCHES_DELAY.: ; 0x005A4E, $CA4E
    DECA
    BNE   READ_SWITCHES_DELAY.
    LEAY  -1,Y ; One less time.
    BNE   READ_SWITCHES ; If Y not 0, keep going.
LEAVE_RTN: ; 0x005A55, $CA55
    PULS  CC,A,Y,PC ; Leaves
ADV+AUTO_CUMULATIVE: ; 0x005A57, $CA57
    PSHS  Y,B ; Save loop, idk why B.
    LDB   UNK_$49_SYS_MENU_FLAG? ; Save?
    CLR   UNK_$49_SYS_MENU_FLAG? ; Clear
    LDY   #$000A ; Check for button X times.
    BSR   AUTO+ADV_CHECK ; Wait for switches?
    ADDB  UNK_$49_SYS_MENU_FLAG? ; Add trigger count.
    STB   UNK_$49_SYS_MENU_FLAG? ; Store back.
    PULS  B,Y,PC ; RTS
WATCHDOG/TRIGGER_$49_ON_AUTO+ADV: ; 0x005A69, $CA69
    PSHS  X,B,CC ; Save
    LDB   #$38 ; Setup watchdog.
    LDX   #$C3FC ; Ptr to write.
    JSR   JMP_STORE_B@X_BANK0 ; Set watchdog.
    LDX   #$CC00 ; Ptr to read.
    JSR   JMP_LOAD_B@X_BANK0 ; Get ROM PIA-A
    COMB ; Invert, active 0 now. CC.c=1 HERE.
    ANDB  #$03 ; Test auto/adv
    BEQ   BOTH_PRESSED ; Both pressed.
    ANDCC #$FE ; Clear CC.c
BOTH_PRESSED: ; 0x005A80, $CA80
    LDB   UNK_$47 ; Get val
    RORB ; rotate into B
    STB   UNK_$47 ; Store
    BNE   NOT_ZERO ; If not zero, skip clearing $48.
    STB   UNK_$48 ; Clear if also zero.
NOT_ZERO: ; 0x005A89, $CA89
    COMB ; Invert again
    BNE   RTS ; If was zero, RTS.
    LDB   UNK_$48 ; Get val
    BNE   RTS ; If not 0, RTS.
    COMB ; Invert, now 0xFF.
    STB   UNK_$48 ; Store.
    INC   UNK_$49_SYS_MENU_FLAG? ; INC this.
RTS: ; 0x005A95, $CA95
    PULS  CC,B,X,PC ; RTS
UPLOAD_PALETTE_@Y: ; 0x005A97, $CA97
    PSHS  Y,X,B ; Save
    LDX   #$C000 ; PTR
LOOP_UPLOAD_PALETTE: ; 0x005A9C, $CA9C
    LDB   Y+ ; Get daya from Y
    JSR   JMP_STORE_B@X_BANK0 ; Store.
    LEAX  1,X ; X++
    CMPX  #$C010 ; End?
    BNE   LOOP_UPLOAD_PALETTE
    PULS  B,X,Y,PC ; RTS
ROM_BOARD_LED_DISPLAY_B: ; 0x005AAA, $CAAA
    PSHS  X,B ; Save
    LSRB ; Bring 0 in.
    RORB
    RORB
    RORB ; Shift 4x total here.
    BPL   DONT_INC ; If B bit 2 clear originally, not sure why.
    INCB ; +=1 if origin B:2 was set.
DONT_INC: ; 0x005AB3, $CAB3
    RORB
    RORB ; Shift 6x total, this is to display the original bottom bits?
    LDX   #$CC00 ; Store to ROM_PIA_A_DATA
    JSR   JMP_STORE_B@X_BANK0 ; Store LED's.
    ASLB ; Shift in 3 zeros.
    ASLB
    ASLB
    ORB   #$3F ; Set bits to sound board. Silence?
    LDX   #$CC02 ; Store to ROM_PIA_B_DATA
    JSR   JMP_STORE_B@X_BANK0 ; Store LED's.
    PULS  B,X,PC
ROM_LED_BLINK_STARTUP?: ; 0x005AC8, $CAC8
    PSHS  Y,B,A ; Save
    LDA   #$02 ; Loop count?
    LDY   #$01F4 ; Unk val. Timer?
LOOP_LED_BLINK?: ; 0x005AD0, $CAD0
    JSR   ROM_BOARD_LED_DISPLAY_B ; Write B
    JSR   AUTO+ADV_CHECK
    CLRB ; Clear B
    JSR   ROM_BOARD_LED_DISPLAY_B ; Write cleared.
    JSR   AUTO+ADV_CHECK
    LDB   1,S ; Get original B.
    DECA ; Loop counter?
    BNE   LOOP_LED_BLINK? ; Loop blink.
    PULS  A,B,Y ; RTS
SETUP_52+49+48+36+59: ; 0x005AE4, $CAE4
    PSHS  B,A
    CLR   SENTENCE_PTR_WORD_ON
    CLR   UNK_$49_SYS_MENU_FLAG?
    LDA   #$01
    STA   UNK_$48
    LDA   #$03
    STA   CURRENT_BANK
    LDD   #$FFFF
    STD   TEXT_PTR_UNK
    PULS  A,B,PC
CLEAR_COLOR_PALETTE: ; 0x005AF9, $CAF9
    PSHS  X,B ; Save
    CLRB
    LDX   #$C000
CLEAR_PALETTE_LOOP: ; 0x005AFF, $CAFF
    JSR   JMP_STORE_B@X_BANK0 ; Write 0
    LEAX  1,X ; Next
    CMPX  #$C010 ; Bound
    BNE   CLEAR_PALETTE_LOOP ; Loop
    PULS  B,X,PC ; RTS
OUTPUT_SOUND?: ; 0x005B0B, $CB0B
    PSHS  X,B ; Save
    COMB ; Invert
    ANDB  #$3F ; And bits.
    LDX   #$CC02 ; PTR to PIA_ROM_B
    JSR   JMP_STORE_B@X_BANK0 ; Store to
    JSR   ADV+AUTO_CUMULATIVE ; Switch stuff?
    LDB   #$3F ; Load
    JSR   JMP_STORE_B@X_BANK0 ; Store to.
    JSR   ADV+AUTO_CUMULATIVE ; Switch stuff?
    PULS  B,X,PC ; RTS
A+=16_PER_EACH_B_0xF0>>8_VALUE: ; 0x005B23, $CB23
    PSHS  A ; Save A
    TFR   B>A ; B to A
    ANDA  #$0F ; Bottom bits...
    ADDA  #$00 ; Idk why. Sets flags right?
    DAA ; Adjust decimal.
    ANDB  #$F0 ; Top bits, >>4 for loop count.
LOOP_ADD+SUB: ; 0x005B2E, $CB2E
    BEQ   IS_ZERO ; If =0
    ADDA  #$16 ; Add dec to A.
    DAA ; Adjust
    SUBB  #$10 ; Minus 10 on B.
    BRA   LOOP_ADD+SUB ; Loop...
IS_ZERO: ; 0x005B37, $CB37
    TFR   A>B ; A to B.
    PULS  A,PC ; RTS.
L_005B3B: ; 0x005B3B, $CB3B
    PSHS  X,B,A
    LDD   #$0000
    LDX   #$0000
L_005B43: ; 0x005B43, $CB43
    STX   TEXT_PTR_TO_CODE_JSR
    LEAX  3840,X
L_005B49: ; 0x005B49, $CB49
    STD   --X
    CMPX  TEXT_PTR_TO_CODE_JSR
    BNE   L_005B49
    LEAX  2304,X
    TSTA
    BNE   L_005B59
    LDX   #$0F00
L_005B59: ; 0x005B59, $CB59
    JSR   WATCHDOG/TRIGGER_$49_ON_AUTO+ADV
    TST   UNK_$49_SYS_MENU_FLAG?
    BNE   L_005B65
    ADDD  #$1111
    BHS   L_005B43
L_005B65: ; 0x005B65, $CB65
    PULS  A,B,X,PC
L_005B67: ; 0x005B67, $CB67
    JSR   CLEAR_COLOR_PALETTE
    LDX   #$0000
    LDY   #$C9E0
L_005B71: ; 0x005B71, $CB71
    STX   TEXT_PTR_TO_CODE_JSR
    LEAX  3840,X
    LDA   Y+
    TFR   A>B
L_005B7B: ; 0x005B7B, $CB7B
    STD   --X
    CMPX  TEXT_PTR_TO_CODE_JSR
    BNE   L_005B7B
    LEAX  2304,X
    TSTA
    BNE   L_005B8B
    LDX   #$0F00
L_005B8B: ; 0x005B8B, $CB8B
    JSR   WATCHDOG/TRIGGER_$49_ON_AUTO+ADV
    TST   UNK_$49_SYS_MENU_FLAG?
    BNE   L_005B98
    CMPY  #$C9F0
    BNE   L_005B71
L_005B98: ; 0x005B98, $CB98
    RTS
L_005B99: ; 0x005B99, $CB99
    LDX   #$C487
    JSR   JMP_STORE_B_TO_SRAM[X]
    ASLB
    PSHS  B
    ASLB
    ADDB  S+
    LDX   #$CF10
    ABX
    LDY   #$C489
    LDB   #$06
MOVE_@X_TO_SRAM@Y: ; 0x005BAF, $CBAF
    PSHS  A ; Save
LOOP_INIT_SRAM: ; 0x005BB1, $CBB1
    LDA   X+ ; Get data from ROM pointer.
    EXG   X-Y ; Put SRAM pointer to X
    JSR   JMP_STORE_A_TO_SRAM_@X_BANKED ; Put to SRAM
    EXG   X-Y ; Move back to ROM pointer in X
    DECB ; Loop counter
    BNE   LOOP_INIT_SRAM
    PULS  A,PC
L_005BBF: ; 0x005BBF, $CBBF
    LDB   #$0E
    BRA   CLEAR_SRAM_TO_B
CLEAR_ALL_SRAM: ; 0x005BC3, $CBC3
    CLRB ; Loop counter.
CLEAR_SRAM_TO_B: ; 0x005BC4, $CBC4
    LDX   #$C400 ; Start of SRAM
    CLRA ; Clear
LOOP_WRITE_A_TO_SRAM_B_TIMES: ; 0x005BC8, $CBC8
    JSR   JMP_STORE_A_TO_SRAM_@X_BANKED ; Write location
    DECB ; loop--
    BNE   LOOP_WRITE_A_TO_SRAM_B_TIMES ; Loop
    RTS ; Leave
INIT_SRAM: ; 0x005BCF, $CBCF
    PSHS  Y,X,B,A ; Save
    BSR   CLEAR_ALL_SRAM ; Clear SRAM
    LDX   #$CECF ; CMOS_RAM_INIT_DATA
    LDY   #$C41D ; Pointer into CMOS RAM
    LDB   #$47 ; Times to loop
    BSR   MOVE_@X_TO_SRAM@Y ; Move data
    PULS  A,B,X,Y,PC ; RTS
BOOKKEEP_UPDATE_+1: ; 0x005BE0, $CBE0
    PSHS  X,B,A ; Save
    LDA   #$01 ; Adding
    BRA   L_005BE8
BOOKKEEP_UPDATE_+A: ; 0x005BE6, $CBE6
    PSHS  X,B,A ; Save
L_005BE8: ; 0x005BE8, $CBE8
    ANDB  #$07 ; And B
    BEQ   RTS_BOOKKEEP ; Invalid if 0?
    ASLB ; <<1
    ASLB ; <<1, *4 total
    LDX   #$C3FD ; SRAM index.
    ABX ; Add B to.
    JSR   JMP_GET_DATA_FROM_SRAM@X_IN_B ; Get data in B
    PSHS  B ; Save
    JSR   JMP_GET_DATA_FROM_SRAM@X_IN_B ; Get data in B
    PSHS  B ; Save
    ADDA  S+ ; Add A to second.
    DAA ; Adjust
    EXG   A-B ; Rotate because no DAB instruction.
    PULS  A ; Pull A
    ADCA  #$00 ; Add carry.
    DAA ; Adjust.
    LEAX  -4,X ; Original X ptr.
    JSR   JMP_STORE_D_TO_SRAM[X] ; Store D to.
RTS_BOOKKEEP: ; 0x005C0B, $CC0B
    PULS  A,B,X,PC
L_005C0D: ; 0x005C0D, $CC0D
    PSHS  X,A
    ADDA  VAL_FROM_SRAM_C495-C496
    DAA
    BHS   L_005C16
    LDA   #$99
L_005C16: ; 0x005C16, $CC16
    STA   VAL_FROM_SRAM_C495-C496
    LDX   #$C47D
    JSR   JMP_STORE_A_TO_SRAM_@X_BANKED
    PULS  A,X,PC
L_005C20: ; 0x005C20, $CC20
    PSHS  X,B,A
    LDB   #$03
    BRA   L_005C30
L_005C26: ; 0x005C26, $CC26
    PSHS  X,B,A
    LDB   #$02
    BRA   L_005C30
L_005C2C: ; 0x005C2C, $CC2C
    PSHS  X,B,A
    LDB   #$01
L_005C30: ; 0x005C30, $CC30
    JSR   BOOKKEEP_UPDATE_+1
    ASLB
    LDX   #$C487
    ABX
    JSR   JMP_GET_DATA_FROM_SRAM@X_IN_B
    BSR   L_005C9F
    LDA   $A039
    PSHS  B
    ADDA  S
    STA   $A039
    LDA   $A038
    ADDA  S+
    STA   $A038
    LDX   #$C493
    JSR   JMP_GET_DATA_FROM_SRAM@X_IN_B
    BSR   L_005C9F
    PSHS  B
    CMPA  S+
    BHS   L_005C5B
    PULS  A,B,X,PC
L_005C5B: ; 0x005C5B, $CC5B
    LDX   #$C48F
    JSR   JMP_GET_DATA_FROM_SRAM@X_IN_B
    BSR   L_005C9F
    BSR   L_005C89
    PSHS  A
    STB   $A038
    LDX   #$C491
    JSR   JMP_GET_DATA_FROM_SRAM@X_IN_B
    LDA   $A039
    BSR   L_005C9F
    BSR   L_005C89
    TSTA
    BEQ   L_005C7C
    CLR   $A038
    CLR   $A039
L_005C7C: ; 0x005C7C, $CC7C
    ADDA  S+
    DAA
    LDB   #$04
    JSR   BOOKKEEP_UPDATE_+A
    JSR   L_005C0D
    PULS  A,B,X,PC
L_005C89: ; 0x005C89, $CC89
    PSHS  B
    TSTB
    BNE   L_005C91
    CLRA
    PULS  B,PC
L_005C91: ; 0x005C91, $CC91
    EXG   A-B
    LDA   #$99
L_005C95: ; 0x005C95, $CC95
    ADDA  #$01
    DAA
    SUBB  S
    BHS   L_005C95
    ADDB  S+
    RTS
L_005C9F: ; 0x005C9F, $CC9F
    PSHS  A
    EXG   A-B
    CLRB
L_005CA4: ; 0x005CA4, $CCA4
    TSTA
    BNE   L_005CA9
    PULS  A,PC
L_005CA9: ; 0x005CA9, $CCA9
    ADDA  #$99
    DAA
    INCB
    BRA   L_005CA4
INIT_SRAM_$C41D_WITH_$5ECF: ; 0x005CAF, $CCAF
    PSHS  Y,X,B,A
    LDX   #$CECF ; Ptr to data.
    LDY   #$C41D ; Ptr to SRAM
    LDB   #$30 ; Loop count.
    JSR   MOVE_@X_TO_SRAM@Y ; Move data.
    BSR   INIT_HIGHSCORES_TO_RAM ; Wtf is this shit, lol.
    PULS  A,B,X,Y,PC ; RTS
INIT_HIGHSCORES_TO_RAM: ; 0x005CC1, $CCC1
    PSHS  Y,X,B,A ; Save
    LDY   #$CECF ; Ptr to high score table.
    LDX   #$B260 ; PTR to place data will be put.
    LDB   #$30 ; Length
LOOP_WRITE_TO_SRAM: ; 0x005CCC, $CCCC
    LDA   Y+
    JSR   JMP_STORE_A_TO_SRAM_@X_BANKED ; Used to write to normal RAM in 4-bit pieces.
    DECB ; Loop count.
    BNE   LOOP_WRITE_TO_SRAM ; Loop
    PULS  A,B,X,Y,PC ; RTS
    .db $CD
    .db $46
    .db $00
    .db $01
    .db $CD
    .db $51
    .db $00
    .db $05
    .db $CD
    .db $5E
    .db $00
    .db $09
    .db $CD
    .db $6A
    .db $00
    .db $0D
    .db $CD
    .db $75
    .db $00
    .db $11
    .db $CD
    .db $7F
    .db $00
    .db $15
    .db $CD
    .db $8A
    .db $00
    .db $19
    .db $CD
    .db $96
    .db $00
    .db $81
    .db $CD
    .db $A7
    .db $00
    .db $85
    .db $CD
    .db $B7
    .db $00
    .db $87
    .db $CD
    .db $C6
    .db $00
    .db $89
    .db $CD
    .db $D5
    .db $00
    .db $8B
    .db $CD
    .db $E6
    .db $00
    .db $8D
    .db $CD
    .db $F6
    .db $00
    .db $8F
    .db $CE
    .db $07
    .db $00
    .db $91
    .db $CE
    .db $17
    .db $00
    .db $93
    .db $CE
    .db $25
    .db $00
    .db $95
    .db $CE
    .db $2F
    .db $00
    .db $97
    .db $CE
    .db $3D
    .db $00
    .db $99
    .db $CE
    .db $4B
    .db $00
    .db $9B
    .db $CE
    .db $59
    .db $00
    .db $9D
    .db $CE
    .db $67
    .db $00
    .db $9F
    .db $CE
    .db $75
    .db $00
    .db $A1
    .db $CE
    .db $83
    .db $00
    .db $A3
    .db $CE
    .db $91
    .db $00
    .db $A5
    .db $CE
    .db $9F
    .db $00
    .db $A7
    .db $CE
    .db $AD
    .db $00
    .db $A9
    .db $CE
    .db $BC
    .db $00
    .db $7D
    .db $43 ; Coins Left
    .db $4F
    .db $49
    .db $4E
    .db $53
    .db $20
    .db $4C
    .db $45
    .db $46
    .db $54
    .db $2F
    .db $43 ; Coins center
    .db $4F
    .db $49
    .db $4E
    .db $53
    .db $20
    .db $43
    .db $45
    .db $4E
    .db $54
    .db $45
    .db $52
    .db $2F
    .db $43 ; Coins right
    .db $4F
    .db $49
    .db $4E
    .db $53
    .db $20
    .db $52
    .db $49
    .db $47
    .db $48
    .db $54
    .db $2F
    .db $54 ; Total paid
    .db $4F
    .db $54
    .db $41
    .db $4C
    .db $20
    .db $50
    .db $41
    .db $49
    .db $44
    .db $2F
    .db $53 ; Ships won
    .db $48
    .db $49
    .db $50
    .db $53
    .db $20
    .db $57
    .db $4F
    .db $4E
    .db $2F
    .db $54 ; Total time
    .db $4F
    .db $54
    .db $41
    .db $4C
    .db $20
    .db $54
    .db $49
    .db $4D
    .db $45
    .db $2F
    .db $54 ; Total ships
    .db $4F
    .db $54
    .db $41
    .db $4C
    .db $20
    .db $53
    .db $48
    .db $49
    .db $50
    .db $53
    .db $2F
    .db $42 ; Bonus ship level
    .db $4F
    .db $4E
    .db $55
    .db $53
    .db $20
    .db $53
    .db $48
    .db $49
    .db $50
    .db $20
    .db $4C
    .db $45
    .db $56
    .db $45
    .db $4C
    .db $2F
    .db $4E ; Number of ships
    .db $55
    .db $4D
    .db $42
    .db $45
    .db $52
    .db $20
    .db $4F
    .db $46
    .db $20
    .db $53
    .db $48
    .db $49
    .db $50
    .db $53
    .db $2F
    .db $43 ; Coinage select
    .db $4F
    .db $49
    .db $4E
    .db $41
    .db $47
    .db $45
    .db $20
    .db $53
    .db $45
    .db $4C
    .db $45
    .db $43
    .db $54
    .db $2F
    .db $4C ; Left coin mult
    .db $45
    .db $46
    .db $54
    .db $20
    .db $43
    .db $4F
    .db $49
    .db $4E
    .db $20
    .db $4D
    .db $55
    .db $4C
    .db $54
    .db $2F
    .db $43 ; Center coin mult
    .db $45
    .db $4E
    .db $54
    .db $45
    .db $52
    .db $20
    .db $43
    .db $4F
    .db $49
    .db $4E
    .db $20
    .db $4D
    .db $55
    .db $4C
    .db $54
    .db $2F
    .db $52 ; Right coin mult
    .db $49
    .db $47
    .db $48
    .db $54
    .db $20
    .db $43
    .db $4F
    .db $49
    .db $4E
    .db $20
    .db $4D
    .db $55
    .db $4C
    .db $54
    .db $2F
    .db $43 ; Coins for credit
    .db $4F
    .db $49
    .db $4E
    .db $53
    .db $20
    .db $46
    .db $4F
    .db $52
    .db $20
    .db $43
    .db $52
    .db $45
    .db $44
    .db $49
    .db $54
    .db $2F
    .db $43 ; Coins for bonus
    .db $4F
    .db $49
    .db $4E
    .db $53
    .db $20
    .db $46
    .db $4F
    .db $52
    .db $20
    .db $42
    .db $4F
    .db $4E
    .db $55
    .db $53
    .db $2F
    .db $4D ; Minimum coins
    .db $49
    .db $4E
    .db $49
    .db $4D
    .db $55
    .db $4D
    .db $20
    .db $43
    .db $4F
    .db $49
    .db $4E
    .db $53
    .db $2F
    .db $46 ; Free play
    .db $52
    .db $45
    .db $45
    .db $20
    .db $50
    .db $4C
    .db $41
    .db $59
    .db $2F
    .db $47 ; Game adjust 1
    .db $41
    .db $4D
    .db $45
    .db $20
    .db $41
    .db $44
    .db $4A
    .db $55
    .db $53
    .db $54
    .db $20
    .db $31
    .db $2F
    .db $47 ; Game adjust 2
    .db $41
    .db $4D
    .db $45
    .db $20
    .db $41
    .db $44
    .db $4A
    .db $55
    .db $53
    .db $54
    .db $20
    .db $32
    .db $2F
    .db $47 ; Game adjust 3
    .db $41
    .db $4D
    .db $45
    .db $20
    .db $41
    .db $44
    .db $4A
    .db $55
    .db $53
    .db $54
    .db $20
    .db $33
    .db $2F
    .db $47 ; Game adjust 4
    .db $41
    .db $4D
    .db $45
    .db $20
    .db $41
    .db $44
    .db $4A
    .db $55
    .db $53
    .db $54
    .db $20
    .db $34
    .db $2F
    .db $47 ; Game adjust 5
    .db $41
    .db $4D
    .db $45
    .db $20
    .db $41
    .db $44
    .db $4A
    .db $55
    .db $53
    .db $54
    .db $20
    .db $35
    .db $2F
    .db $47 ; Game adjust 6
    .db $41
    .db $4D
    .db $45
    .db $20
    .db $41
    .db $44
    .db $4A
    .db $55
    .db $53
    .db $54
    .db $20
    .db $36
    .db $2F
    .db $47 ; Game adjust 7
    .db $41
    .db $4D
    .db $45
    .db $20
    .db $41
    .db $44
    .db $4A
    .db $55
    .db $53
    .db $54
    .db $20
    .db $37
    .db $2F
    .db $47 ; Game adjust 8
    .db $41
    .db $4D
    .db $45
    .db $20
    .db $41
    .db $44
    .db $4A
    .db $55
    .db $53
    .db $54
    .db $20
    .db $38
    .db $2F
    .db $47 ; Game adjust 9
    .db $41
    .db $4D
    .db $45
    .db $20
    .db $41
    .db $44
    .db $4A
    .db $55
    .db $53
    .db $54
    .db $20
    .db $39
    .db $2F
    .db $47 ; Game adjust 10
    .db $41
    .db $4D
    .db $45
    .db $20
    .db $41
    .db $44
    .db $4A
    .db $55
    .db $53
    .db $54
    .db $20
    .db $31
    .db $30
    .db $2F
    .db $53 ; Special function
    .db $50
    .db $45
    .db $43
    .db $49
    .db $41
    .db $4C
    .db $20
    .db $46
    .db $55
    .db $4E
    .db $43
    .db $54
    .db $49
    .db $4F
    .db $4E
    .db $2F
    .db $FF
    .db $FF
CMOS_RAM_INIT_DATA: ; 0x005ECF, $CECF
    .db $02 ; High score table initial start. Score, BCD.
    .db $12
    .db $70
    .db $44 ; Initials, DRJ
    .db $52
    .db $4A
    .db $01 ; Score
    .db $83
    .db $15
    .db $53 ; SAM
    .db $41
    .db $4D
    .db $01 ; Score
    .db $59
    .db $20
    .db $4C ; LED
    .db $45
    .db $44
    .db $01 ; Score
    .db $42
    .db $85
    .db $50 ; PGD
    .db $47
    .db $44
    .db $01 ; Score
    .db $25
    .db $20
    .db $43 ; CRB
    .db $52
    .db $42
    .db $01 ; Score
    .db $10
    .db $35
    .db $4D ; MRS
    .db $52
    .db $53
    .db $00 ; Score
    .db $82
    .db $65
    .db $53 ; SSR
    .db $53
    .db $52
    .db $00 ; Score
    .db $60
    .db $10
    .db $54 ; TMH
    .db $4D
    .db $48
    .db $00
    .db $5A
    .db $01
    .db $00
    .db $03
    .db $03
    .db $01
    .db $04
    .db $01
    .db $01
    .db $00
    .db $00
    .db $00
    .db $05
    .db $15
    .db $01
    .db $05
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $01 ; END SRAM INIT DATA
    .db $04
    .db $01
    .db $02
    .db $04
    .db $00
    .db $06
    .db $00
    .db $01
    .db $01
    .db $00
    .db $00
    .db $01
    .db $04
    .db $01
    .db $01
    .db $00
    .db $00
    .db $01
    .db $16
    .db $06
    .db $02
    .db $00
    .db $00
    .db $01
    .db $04
    .db $01
    .db $02
    .db $00
    .db $00
    .db $01
    .db $00
    .db $04
    .db $01
    .db $00
    .db $00
    .db $01
    .db $00
    .db $02
    .db $01
    .db $00
    .db $00
    .db $01
    .db $00
    .db $02
    .db $02
    .db $00
    .db $00
    .db $43 ; Copyright 1980 - Williams Electronics
    .db $4F
    .db $50
    .db $59
    .db $52
    .db $49
    .db $47
    .db $48
    .db $54
    .db $20
    .db $31
    .db $39
    .db $38
    .db $30
    .db $20
    .db $2D
    .db $20
    .db $57
    .db $49
    .db $4C
    .db $4C
    .db $49
    .db $41
    .db $4D
    .db $53
    .db $20
    .db $45
    .db $4C
    .db $45
    .db $43
    .db $54
    .db $52
    .db $4F
    .db $4E
    .db $49
    .db $43
    .db $53
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $4A
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00

;Bank 7
	.org $C000

JMP_TO_DOES_LOTS_IDFK: ; 0x006000, $C000
    JMP   DOES_LOTS_IDFK
JMP_TO_IRQ_TASK_UNK: ; 0x006003, $C003
    JMP   IRQ_TASK_IDK
JMP_TO_C350_FILLS_B300-B7FF: ; 0x006006, $C006
    JMP   C350_FILLS_B300-B7FF
    JMP   L_00629A
    ANDB  #$50
    JMP   L_0065D0
DATA_USED_IN_$D000_CODE: ; 0x006011, $C011
    .db $C6
    .db $BA
DATA_USED_IN_$D000_CODE_END: ; 0x006013, $C013
    .db $C7
    .db $72
DOES_LOTS_IDFK: ; 0x006015, $C015
    LDD   $A020 ; Load
    ANDB  #$E0 ; B=1110.0000
    STD   A017_COMPARED_TO_A017 ; Store to
    ADDD  #$2610 ; Add val
    STD   A015_X_MATCH ; Store to.
    CLR   COUNTDOWN_A00F ; Clear
    LDX   #$C34F ; 1 byte before data area 1
    STX   BANK_7_DATA_PTR? ; Store to
    LDA   #$E0 ; Val
    STA   A011_TIED_WITH_A00D ; To here.
    JSR   AOOF_COUNTDOWN_STUFF ; Countdown.
    LDX   #$0010 ; Load val
LOOP_UNTIL_X=$A015: ; 0x006031, $C031
    CMPX  A015_X_MATCH ; If X _ $A015
    BEQ   X_MATCHES_A015 ; ==, goto.
    LDA   SHITED_DATA_A00D ; Get shifted from here.
    BPL   A00D_POSITIVE
L_006039: ; 0x006039, $C039
    DEC   A011_TIED_WITH_A00D ; Dec byte.
    BRA   SKIP_INC ; Skip inc.
A00D_POSITIVE: ; 0x00603D, $C03D
    INC   A011_TIED_WITH_A00D ; Inc
SKIP_INC: ; 0x00603F, $C03F
    JSR   AOOF_COUNTDOWN_STUFF ; A00F stuff.
    LEAX  32,X ; X+=32
    BRA   LOOP_UNTIL_X=$A015
X_MATCHES_A015: ; 0x006047, $C047
    LDD   BANK_7_DATA_PTR? ; Move
    STD   $A003
    LDA   COUNTDOWN_A00F ; Move
    STA   $A000
    LDA   SHITED_DATA_A00D ; Move
    STA   $A001
    LDA   A011_TIED_WITH_A00D ; Move
    STA   R_A002
    LDX   #$B700 ; Move
    STX   $A005
    LDX   #$BA90 ; Move
    STX   $A007
LOOP_A015/A017: ; 0x006061, $C061
    LDD   A015_X_MATCH ; Get val
    SUBD  #$0020 ; Sub
L_006066: ; 0x006066, $C066
    STD   A015_X_MATCH ; Store to
    CMPD  A017_COMPARED_TO_A017 ; Compare to.
    BMI   EXIT_LOOP ; If D - A017 negative, taken.
L_00606D: ; 0x00606D, $C06D
    JSR   $A012_THING+MORE ; Run sub.
    BRA   LOOP_A015/A017
EXIT_LOOP: ; 0x006072, $C072
    LDD   $A003 ; Move
    STD   A00B_PTR_UNK
    LDA   $A000 ; Move
    STA   A010_UNK
    LDA   $A001 ; Move
    STA   A00B_DATA_SHIFTED
    LDA   R_A002 ; Move
    STA   A012_UNK
    LDY   #$BE20 ; Idk why
    LDX   #$0000 ; Clear/NULL
LOOP_CLEAR_BE20-BF4F: ; 0x006089, $C089
    STX   Y++ ; Clear
    CMPY  #$BF50 ; Until
    BNE   LOOP_CLEAR_BE20-BF4F
    RTS ; Leave
IRQ_TASK_IDK: ; 0x006092, $C092
    LDD   $A020 ; Load
    ANDB  #$E0 ; AND...
    SUBD  A015_X_MATCH ; Sub with...
    ASLB ; B<<4 into A
    ROLA
    ASLB
    ROLA
    ASLB
    ROLA
    STA   $A000 ; Store A to.
    BEQ   UNK_RTN_MOD_ALOT ; If == 0, goto.
    BMI   LOOP_INC_A000 ; If A:7 set, goto.
LOOP_A000_TIMES: ; 0x0060A4, $C0A4
    LDD   A015_X_MATCH ; Load
    ADDD  #$0020 ; D+=32
    STD   A015_X_MATCH ; Store back
    JSR   L_0061CD ; Does IDK
    DEC   $A000 ; Dec A000 
    BNE   LOOP_A000_TIMES
    BRA   UNK_RTN_MOD_ALOT
LOOP_INC_A000: ; 0x0060B4, $C0B4
    LDD   A015_X_MATCH ; Load
    SUBD  #$0020 ; Sub
    STD   A015_X_MATCH ; Store back
    JSR   $A012_THING+MORE
    INC   $A000 ; ++
    BNE   LOOP_INC_A000
UNK_RTN_MOD_ALOT: ; 0x0060C2, $C0C2
    LDD   $A020 ; Load
    ANDB  #$E0 ; B bits..
    STD   A015_X_MATCH ; Store to
    LDX   #$0000 ; Val?
    LDY   #$BE20 ; Ptr
    STS   STACK_SAVE_LOC ; Save S
    LDS   $A005 ; S from here.
    BITB  #$20 ; Test bit
    BNE   SKIP_REPLACE_S ; If set, goto
    LDS   $A007 ; S from here otherwise.
SKIP_REPLACE_S: ; 0x0060DC, $C0DC
    LDA   #$98 ; Val
LOOP_WRITE_DATA: ; 0x0060DE, $C0DE
    STX   [Y] ; Clear where Y says.
    PULS  B,U ; Get data from stack
    STD   Y ; $98XX to Y
    STU   [Y++] ; Val to D pointer we just stored.
    DECA ; Dec high byte.
    STX   [Y] ; 2x
    PULS  B,U
    STD   Y
    STU   [Y++]
    DECA
    STX   [Y] ; 3x
    PULS  B,U
    STD   Y
    STU   [Y++]
    DECA
    STX   [Y] ; 4x
    PULS  B,U
    STD   Y
    STU   [Y++]
    DECA
    STX   [Y] ; 5x
    PULS  B,U
    STD   Y
    STU   [Y++]
    DECA
    STX   [Y] ; 6x
    PULS  B,U
    STD   Y
    STU   [Y++]
    DECA
    STX   [Y] ; 7x
    PULS  B,U
    STD   Y
    STU   [Y++]
    DECA
    STX   [Y] ; 8x
    PULS  B,U
    STD   Y
    STU   [Y++]
    DECA
    BNE   LOOP_WRITE_DATA ; If A != 0, goto.
    LDS   STACK_SAVE_LOC
    RTS ; RTS
$A012_THING+MORE: ; 0x00612C, $C12C
    JSR   A00E_STUFF_UNK
    BMI   INC_$12 ; If A is negative, taken.
    DEC   A012_UNK ; --
    BRA   POST_$12_CHANGE ; Always goto.
INC_$12: ; 0x006135, $C135
    INC   A012_UNK ; ++
POST_$12_CHANGE: ; 0x006137, $C137
    LDA   #$20 ; Load with val
    BITA  $A016 ; Test bit here.
    BNE   L_006185 ; Bit not set.
    LDX   $A007 ; Get X from
    JSR   A00F_STUFF
    BMI   L_006164 ; If A returned negative, goto.
    DEC   A011_TIED_WITH_A00D ; --
    LDA   A011_TIED_WITH_A00D ; Get val.
    STA   X ; Store to X
    STA   456,X ; Store to X+456?
    LDD   #$7007 ; Load D
    STD   1,X ; Store to X+1
    STD   457,X ; Store to X+457?
    LEAX  3,X ; X+=3
    CMPX  #$BC58 ; Compare to
    BNE   COMMIT_X_A007,RTS ; If !=, save as it
    LDX   #$BA90 ; Reset
COMMIT_X_A007,RTS: ; 0x006161, $C161
    STX   $A007 ; Store to.
    RTS
L_006164: ; 0x006164, $C164
    LDA   A011_TIED_WITH_A00D
    STA   X
    STA   456,X
    INCA
    STA   A011_TIED_WITH_A00D
    LDD   #$0770
    STD   1,X
    STD   457,X
    LEAX  3,X
    CMPX  #$BC58
    BNE   COMMIT_X_$A007,RTS
    LDX   #$BA90
COMMIT_X_$A007,RTS: ; 0x006182, $C182
    STX   $A007
    RTS
L_006185: ; 0x006185, $C185
    LDX   $A005
    JSR   A00F_STUFF
    BMI   L_0061AC
    DEC   A011_TIED_WITH_A00D
    LDA   A011_TIED_WITH_A00D
    STA   X
    STA   456,X
    LDD   #$7007
    STD   1,X
    STD   457,X
    LEAX  3,X
    CMPX  #$B8C8
    BNE   COMMIT_X_A005,RTS
    LDX   #$B700
COMMIT_X_A005,RTS: ; 0x0061A9, $C1A9
    STX   $A005
    RTS
L_0061AC: ; 0x0061AC, $C1AC
    LDA   A011_TIED_WITH_A00D
    STA   X
    STA   456,X
    INCA
    STA   A011_TIED_WITH_A00D
    LDD   #$0770
    STD   1,X
    STD   457,X
    LEAX  3,X
    CMPX  #$B8C8
    BNE   COMMIT_X_A005,RTS
    LDX   #$B700
COMMIT_X_A005,RTS: ; 0x0061CA, $C1CA
    STX   $A005
    RTS
L_0061CD: ; 0x0061CD, $C1CD
    LDA   SHITED_DATA_A00D
    BPL   L_0061D5
    DEC   A011_TIED_WITH_A00D
    BRA   L_0061D7
L_0061D5: ; 0x0061D5, $C1D5
    INC   A011_TIED_WITH_A00D
L_0061D7: ; 0x0061D7, $C1D7
    JSR   AOOF_COUNTDOWN_STUFF
    LDA   #$20
    BITA  $A016
    BEQ   L_006221
    LDX   $A007
    LEAX  -3,X
    CMPX  #$BA8D
    BNE   L_0061EC
    LDX   #$BC55
L_0061EC: ; 0x0061EC, $C1EC
    STX   $A007
    LDA   A00B_DATA_SHIFTED
    BPL   L_006209
    DEC   A012_UNK
    LDA   A012_UNK
    STA   X
    STA   456,X
    LDD   #$0770
    STD   1,X
    STD   457,X
    JSR   A010_COUNTDOWN_STUFF
    RTS
L_006209: ; 0x006209, $C209
    LDA   A012_UNK
    STA   X
    STA   456,X
    INCA
    STA   A012_UNK
    LDD   #$7007
    STD   1,X
    STD   457,X
    JSR   A010_COUNTDOWN_STUFF
    RTS
L_006221: ; 0x006221, $C221
    LDX   $A005
    LEAX  -3,X
    CMPX  #$B6FD
    BNE   L_00622D
L_00622A: ; 0x00622A, $C22A
    LDX   #$B8C5
L_00622D: ; 0x00622D, $C22D
    STX   $A005
    LDA   A00B_DATA_SHIFTED
    BPL   L_00624A
    DEC   A012_UNK
    LDA   A012_UNK
    STA   X
    STA   456,X
    LDD   #$0770
    STD   1,X
    STD   457,X
    JSR   A010_COUNTDOWN_STUFF
    RTS
L_00624A: ; 0x00624A, $C24A
    LDA   A012_UNK
    STA   X
    STA   456,X
    INCA
    STA   A012_UNK
    LDD   #$7007
    STD   1,X
    STD   457,X
    JSR   A010_COUNTDOWN_STUFF
    RTS
C350_FILLS_B300-B7FF: ; 0x006262, $C262
    LDX   #$C350 ; Load X
    STX   A00B_PTR_UNK ; Store to
    LDA   X ; Load from
L_006269: ; 0x006269, $C269
    STA   A00B_DATA_SHIFTED ; Store to
    LDA   #$07 ; Load
    STA   A010_UNK ; Store
    LDA   #$E0 ; Load
    STA   A012_UNK ; Store
    LDX   #$B300 ; Ptr to unk.
LOOP_FILL_B300-B6FF: ; 0x006276, $C276
    LDA   A012_UNK ; Val from
    STA   X+ ; To PTR
    LDA   A00B_DATA_SHIFTED ; Load val
    BPL   INC_INSTEAD ; If positive, inc.
    DEC   A012_UNK ; Dec if negative.
    BRA   SUBRTN ; Forward.
INC_INSTEAD: ; 0x006282, $C282
    INC   A012_UNK
SUBRTN: ; 0x006284, $C284
    JSR   A010_COUNTDOWN_STUFF
    LDA   A00B_DATA_SHIFTED
    BPL   SHITED_IS_POSITIVE
    DEC   A012_UNK
    BRA   SUBRTN_2
SHITED_IS_POSITIVE: ; 0x00628F, $C28F
    INC   A012_UNK
SUBRTN_2: ; 0x006291, $C291
    JSR   A010_COUNTDOWN_STUFF
    CMPX  #$B700 ; End X
BNE_LOOP_FILL: ; 0x006297, $C297
    BNE   LOOP_FILL_B300-B6FF
    RTS
L_00629A: ; 0x00629A, $C29A
    LDX   #$0000
    LDY   #$BE20
L_0062A1: ; 0x0062A1, $C2A1
    STX   [Y++]
    CMPY  #$BF50
    BNE   L_0062A1
    RTS
AOOF_COUNTDOWN_STUFF: ; 0x0062AA, $C2AA
    LDA   COUNTDOWN_A00F ; Load
    BEQ   A00F_IS_ZERO ; If 0, goto.
    DEC   COUNTDOWN_A00F ; Sub 1.
    LDA   SHITED_DATA_A00D ; Load D
    ASLA ; Shift
    ADCA  #$00 ; Put bit back too.
    STA   SHITED_DATA_A00D ; Store to.
    RTS
A00F_IS_ZERO: ; 0x0062B8, $C2B8
    LDU   BANK_7_DATA_PTR?
    LEAU  1,U
    CMPU  #$C450
    BNE   L_0062C5
    LDU   #$C350
L_0062C5: ; 0x0062C5, $C2C5
    STU   BANK_7_DATA_PTR?
    LDA   #$07
    STA   COUNTDOWN_A00F
    LDA   U
    STA   SHITED_DATA_A00D
    RTS
A010_COUNTDOWN_STUFF: ; 0x0062D0, $C2D0
    LDA   A010_UNK ; Load val from
    BEQ   A00B++,RESET_IF_NEEDED ; If 0, do this.
    DEC   A010_UNK ; Dec if not.
    LDA   A00B_DATA_SHIFTED ; Load
    ASLA ; Shift
    ADCA  #$00 ; If shifted off one, put back.
    STA   A00B_DATA_SHIFTED ; Store back.
    RTS
A00B++,RESET_IF_NEEDED: ; 0x0062DE, $C2DE
    LDU   A00B_PTR_UNK ; Load ptr
    LEAU  1,U ; Ptr+=1
    CMPU  #$C450 ; See if at end.
    BNE   COMMIT_U_BACK,RESET_A010,A00E ; If not, goto.
    LDU   #$C350 ; Reset
COMMIT_U_BACK,RESET_A010,A00E: ; 0x0062EB, $C2EB
    STU   A00B_PTR_UNK ; Store back.
    LDA   #$07 ; Load
    STA   A010_UNK ; Store
    LDA   U ; Load from ptr
    STA   A00B_DATA_SHIFTED ; Store to.
    RTS
A00F_STUFF: ; 0x0062F6, $C2F6
    LDA   COUNTDOWN_A00F ; Load val
    CMPA  #$07 ; If _ 7
    BEQ   TIMER_A00F_REACHED ; ==, goto
    INC   COUNTDOWN_A00F ; ++
    LDA   SHITED_DATA_A00D ; Load val
    LSRA ; Shift off bit.
    BHS   SKIP_ADD_80 ; If shifted off 1, don't add 80.
    ADDA  #$80 ; +=80
SKIP_ADD_80: ; 0x006305, $C305
    STA   SHITED_DATA_A00D ; Store to.
    RTS
TIMER_A00F_REACHED: ; 0x006308, $C308
    LDU   BANK_7_DATA_PTR? ; Load U from
    CMPU  #$C350 ; If U _ val
    BNE   USE_U_ASIS ; !=, goto.
    LDU   #$C450 ; Reset
USE_U_ASIS: ; 0x006313, $C313
    LEAU  -1,U ; U--
    STU   BANK_7_DATA_PTR? ; Store to.
    CLR   COUNTDOWN_A00F ; Clear
    LDA   U ; Load from U
    LSRA ; Shift
    BHS   STORE_A00D ; If shifted off 0, skip add.
    ADDA  #$80 ; +=80
STORE_A00D: ; 0x006320, $C320
    STA   SHITED_DATA_A00D ; Store to.
    RTS ; RTS
A00E_STUFF_UNK: ; 0x006323, $C323
    LDA   A010_UNK ; Get val
    CMPA  #$07 ; If A _ 7
    BEQ   U_FROM_A00B,LOW_BOUND_C450 ; ==, goto
    INC   A010_UNK ; Inc count
    LDA   A00B_DATA_SHIFTED ; Load val
    LSRA ; Shift off bit
    BHS   DONT_ADD_80 ; If shifted 0, goto.
    ADDA  #$80 ; Add #$80
DONT_ADD_80: ; 0x006332, $C332
    STA   A00B_DATA_SHIFTED ; Store back
    RTS ; RTS
U_FROM_A00B,LOW_BOUND_C450: ; 0x006335, $C335
    LDU   A00B_PTR_UNK ; Get U from
    CMPU  #$C350 ; If U _ C350
L_00633B: ; 0x00633B, $C33B
    BNE   SKIP_LOADING_U ; !=, goto
    LDU   #$C450 ; Load U
SKIP_LOADING_U: ; 0x006340, $C340
    LEAU  -1,U ; U-=1
    STU   A00B_PTR_UNK ; Store new U
    CLR   A010_UNK ; Clear
    LDA   U ; Get data at U
    LSRA ; get bit off.
    BHS   COMMIT_A_RTS ; If shifted 0, don't add 80
    ADDA  #$80 ; +=#$80
COMMIT_A_RTS: ; 0x00634D, $C34D
    STA   A00B_DATA_SHIFTED ; Store here.
    RTS ; RTS
C006_DATA: ; 0x006350, $C350
    .db $2A
    .db $AA
    .db $AA
    .db $AA
    .db $AA
    .db $AA
    .db $AB
    .db $A1
    .db $D5
    .db $55
    .db $55
    .db $55
    .db $55
    .db $55
    .db $AA
    .db $BF
    .db $FF
    .db $FF
    .db $FF
    .db $C0
    .db $00
    .db $00
    .db $00
    .db $55
    .db $55
    .db $57
    .db $FF
    .db $C0
    .db $01
    .db $55
    .db $55
    .db $55
    .db $55
    .db $55
    .db $55
    .db $5F
    .db $E0
    .db $15
    .db $55
    .db $55
    .db $57
    .db $FF
    .db $F0
    .db $00
    .db $15
    .db $55
    .db $5F
    .db $FF
    .db $FF
    .db $FF
    .db $FF
    .db $00
    .db $00
    .db $00
    .db $00
    .db $05
    .db $55
    .db $7F
    .db $FF
    .db $E0
    .db $00
    .db $05
    .db $55
    .db $55
    .db $55
    .db $55
    .db $FC
    .db $05
    .db $55
    .db $55
    .db $50
    .db $01
    .db $FF
    .db $FF
    .db $FF
    .db $C0
    .db $00
    .db $0A
    .db $AA
    .db $AA
    .db $AA
    .db $FF
    .db $00
    .db $00
    .db $FF
    .db $FF
    .db $FF
    .db $FF
    .db $F0
    .db $00
    .db $00
    .db $1F
    .db $E0
    .db $00
    .db $55
    .db $55
    .db $55
    .db $40
    .db $AA
    .db $AA
    .db $AA
    .db $AA
    .db $AA
    .db $AA
    .db $B5
    .db $57
    .db $AA
    .db $AA
    .db $AA
    .db $F5
    .db $7F
    .db $D5
    .db $55
    .db $55
    .db $57
    .db $FF
    .db $80
    .db $07
    .db $E0
    .db $7F
    .db $F1
    .db $55
    .db $7F
    .db $FF
    .db $FF
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $0F
    .db $EF
    .db $76
    .db $91
    .db $11
    .db $11
    .db $5E
    .db $DB
    .db $E9
    .db $84
    .db $77
    .db $EC
    .db $C4
    .db $87
    .db $47
    .db $98
    .db $08
    .db $98
    .db $3F
    .db $C3
    .db $CB
    .db $DB
    .db $9F
    .db $C7
    .db $5F
    .db $2F
    .db $C7
    .db $7D
    .db $EF
    .db $BF
    .db $FA
    .db $4C
    .db $57
    .db $2B
    .db $61
    .db $EF
    .db $EF
    .db $FB
    .db $F7
    .db $E8
    .db $00
    .db $20
    .db $40
    .db $00
    .db $14
    .db $04
    .db $04
    .db $3C
    .db $06
    .db $00
    .db $1D
    .db $07
    .db $3C
    .db $E1
    .db $A5
    .db $55
    .db $55
    .db $45
    .db $2A
    .db $AA
    .db $AA
    .db $AA
    .db $A8
    .db $55
    .db $55
    .db $55
    .db $55
    .db $55
    .db $55
    .db $55
    .db $55
    .db $55
    .db $55
    .db $56
    .db $AA
    .db $AA
    .db $FE
    .db $AA
    .db $AA
    .db $AA
    .db $AA
    .db $AA
    .db $AA
    .db $AA
    .db $AA
    .db $EA
    .db $AA
    .db $AA
    .db $A8
    .db $02
    .db $AA
    .db $AA
    .db $AA
    .db $AA
    .db $BF
    .db $BE
    .db $3E
    .db $63
    .db $FF
    .db $E0
    .db $D8
    .db $1C
    .db $18
    .db $2A
    .db $AB
    .db $1E
    .db $77
    .db $7A
    .db $AF
    .db $A8
    .db $40
    .db $70
    .db $7D
    .db $40
    .db $0B
    .db $FB
    .db $FA
    .db $FF
    .db $C1
    .db $53
    .db $54
    .db $75
    .db $70
    .db $03
    .db $00
    .db $00
    .db $25
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $26
    .db $07
    .db $70
    .db $24
    .db $07
    .db $70
    .db $23
    .db $07
    .db $70
    .db $23
    .db $70
    .db $07
    .db $24
    .db $07
    .db $70
    .db $25
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $25
    .db $07
    .db $70
    .db $24
    .db $07
    .db $70
    .db $23
    .db $07
    .db $70
    .db $21
    .db $07
    .db $70
    .db $22
    .db $70
    .db $07
    .db $24
    .db $77
    .db $00
    .db $24
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $26
    .db $77
    .db $00
    .db $25
    .db $77
    .db $00
    .db $25
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $24
    .db $07
    .db $70
    .db $23
    .db $70
    .db $07
    .db $25
    .db $77
    .db $00
    .db $26
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $26
    .db $77
    .db $00
    .db $25
    .db $07
    .db $70
    .db $23
    .db $07
    .db $70
    .db $22
    .db $07
    .db $70
    .db $21
    .db $77
    .db $00
    .db $21
    .db $70
    .db $07
    .db $23
    .db $70
    .db $07
    .db $25
    .db $70
    .db $07
    .db $25
    .db $07
    .db $70
    .db $25
    .db $77
    .db $00
    .db $25
    .db $77
    .db $00
    .db $24
    .db $77
    .db $00
    .db $22
    .db $07
    .db $70
    .db $20
    .db $07
    .db $70
    .db $1E
    .db $07
    .db $70
    .db $1C
    .db $07
    .db $70
    .db $1D
    .db $70
    .db $07
    .db $1F
    .db $70
    .db $07
    .db $21
    .db $70
    .db $07
    .db $22
    .db $70
    .db $07
    .db $24
    .db $70
    .db $07
    .db $26
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $26
    .db $77
    .db $00
    .db $26
    .db $77
    .db $00
    .db $26
    .db $77
    .db $00
    .db $26
    .db $77
    .db $00
    .db $25
    .db $77
    .db $00
    .db $25
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $24
    .db $07
    .db $70
    .db $23
    .db $77
    .db $00
    .db $24
    .db $77
    .db $00
    .db $22
    .db $07
    .db $70
    .db $23
    .db $70
    .db $07
    .db $22
    .db $07
    .db $70
    .db $21
    .db $70
    .db $07
    .db $23
    .db $70
    .db $07
    .db $25
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $26
    .db $07
    .db $70
    .db $24
    .db $07
    .db $70
    .db $23
    .db $07
    .db $70
    .db $23
    .db $70
    .db $07
    .db $24
    .db $07
    .db $70
    .db $25
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $25
    .db $07
    .db $70
    .db $24
    .db $07
    .db $70
    .db $23
    .db $07
    .db $70
    .db $21
    .db $07
    .db $70
    .db $22
    .db $70
    .db $07
    .db $24
    .db $77
    .db $00
    .db $24
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $26
    .db $77
    .db $00
    .db $25
    .db $77
    .db $00
    .db $25
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $24
    .db $07
    .db $70
    .db $23
    .db $70
    .db $07
    .db $25
    .db $77
    .db $00
    .db $26
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $26
    .db $77
    .db $00
    .db $25
    .db $07
    .db $70
    .db $23
    .db $07
    .db $70
    .db $22
    .db $07
    .db $70
    .db $21
    .db $77
    .db $00
    .db $21
    .db $70
    .db $07
    .db $23
    .db $70
    .db $07
    .db $25
    .db $70
    .db $07
    .db $25
    .db $07
    .db $70
    .db $25
    .db $77
    .db $00
    .db $25
    .db $77
    .db $00
    .db $24
    .db $77
    .db $00
    .db $22
    .db $07
    .db $70
    .db $20
    .db $07
    .db $70
    .db $1E
    .db $07
    .db $70
    .db $1C
    .db $07
    .db $70
    .db $1D
    .db $70
    .db $07
    .db $1F
    .db $70
    .db $07
    .db $21
    .db $70
    .db $07
    .db $22
    .db $70
    .db $07
    .db $24
    .db $70
    .db $07
    .db $26
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $26
    .db $77
    .db $00
    .db $26
    .db $77
    .db $00
    .db $26
    .db $77
    .db $00
    .db $26
    .db $77
    .db $00
    .db $25
    .db $77
    .db $00
    .db $25
    .db $70
    .db $07
    .db $26
    .db $77
    .db $00
    .db $24
    .db $07
    .db $70
    .db $23
    .db $77
    .db $00
    .db $24
    .db $77
    .db $00
    .db $22
    .db $07
    .db $70
    .db $23
    .db $70
    .db $07
    .db $22
    .db $07
    .db $70
    .db $21
    .db $70
    .db $07
    .db $23
    .db $70
    .db $07
L_0065D0: ; 0x0065D0, $C5D0
    PULS  A,B
    STD   9,U
    STX   $A000
    LDD   #$0808
    STD   $A004
    LDD   #$1732
    STD   $A006
    LDY   #$B300
L_0065E4: ; 0x0065E4, $C5E4
    LDA   $A000
    CLRB
    STD   2,Y
    LDA   $A001
    STD   4,Y
    LDA   $A005
    LSRA
    EORA  $A005
    LSRA
    LSRA
    ROR   $A004
    ROR   $A005
    LDA   $A004
    ANDA  #$01
    SUBA  #$01
    LDB   $A005
    STD   6,Y
    BPL   L_006606
    COMA
    COMB
L_006606: ; 0x006606, $C606
    PSHS  B,A
    LDA   $A007
    LSRA
    EORA  $A007
    LSRA
    LSRA
    ROR   $A006
    ROR   $A007
    LDA   $A006
    ANDA  #$03
    SUBA  #$02
    LDB   $A007
    STD   8,Y
    BPL   L_006621
    COMA
    COMB
L_006621: ; 0x006621, $C621
    LSRA
    RORB
    ADDD  S++
    CMPD  #$016A
    BHS   L_0065E4
    LDX   #$0000
    STX   Y
    LEAY  10,Y
    CMPY  #$B800
    BNE   L_0065E4
    LDX   #$C6AB
    STX   R_A002
    LDA   #$38
    STA   $A001
L_006641: ; 0x006641, $C641
    LDA   #$01
    LDX   #$C649
    JMP   L_002FD1
    LDX   #$0000
    LDY   #$B300
    LDA   [R_A002]
    STA   $A031
    BEQ   L_0066A8
L_006658: ; 0x006658, $C658
    LDU   Y
    STX   U
    STX   256,U
    LDD   8,Y
    ADDD  4,Y
    CMPA  #$2A
    BLO   L_006690
    STD   4,Y
    STA   1,Y
    LDD   6,Y
    ADDD  2,Y
    CMPA  #$98
    BHI   L_006690
    STD   2,Y
    STA   Y
    TSTB
    BMI   L_006682
    LDD   #$BBBB
    STD   [Y]
    BRA   L_006690
L_006682: ; 0x006682, $C682
    LDU   Y
    LDD   #$0B0B
    STD   U
    LDD   #$B0B0
    STD   256,U
L_006690: ; 0x006690, $C690
    LEAY  10,Y
    CMPY  #$B800
    BNE   L_006658
    DEC   $A001
    BNE   L_006641
    LDU   R_A002
    LEAU  1,U
    STU   R_A002
    LDA   #$04
    STA   $A001
    BRA   L_006641
L_0066A8: ; 0x0066A8, $C6A8
    JMP   [9,U]
    .db $FF
    .db $7F
    .db $3F
    .db $37
    .db $2F
    .db $27
    .db $1F
    .db $17
    .db $07
    .db $06
    .db $05
    .db $04
    .db $03
    .db $02
    .db $00
    .db $14
    .db $00
    .db $00
    .db $00
    .db $0F
    .db $14
    .db $14
    .db $14
    .db $03
    .db $00
    .db $00
    .db $00
    .db $00
    .db $03
    .db $04
    .db $05
    .db $06
    .db $00
    .db $00
    .db $00
    .db $00
    .db $01
    .db $03
    .db $04
    .db $0A
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $0A
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $1E
    .db $00
    .db $00
    .db $00
    .db $1E
    .db $19
    .db $14
    .db $10
    .db $05
    .db $00
    .db $00
    .db $00
    .db $05
    .db $05
    .db $05
    .db $05
    .db $60
    .db $00
    .db $03
    .db $02
    .db $16
    .db $1E
    .db $26
    .db $2E
    .db $01
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $01
    .db $01
    .db $FF
    .db $00
    .db $10
    .db $00
    .db $70
    .db $B0
    .db $00
    .db $00
    .db $80
    .db $10
    .db $FC
    .db $FE
    .db $4A
    .db $3A
    .db $2A
    .db $2A
    .db $30
    .db $00
    .db $00
    .db $00
    .db $20
    .db $28
    .db $2C
    .db $30
    .db $02
    .db $00
    .db $00
    .db $00
    .db $01
    .db $01
    .db $02
    .db $02
    .db $01
    .db $00
    .db $00
    .db $00
    .db $00
    .db $00
    .db $01
    .db $01
    .db $FF
    .db $00
    .db $08
    .db $06
    .db $62
    .db $E0
    .db $02
    .db $12
    .db $60
    .db $00
    .db $08
    .db $04
    .db $0C
    .db $1C
    .db $24
    .db $28
    .db $FF
    .db $08
    .db $FE
    .db $FE
    .db $2A
    .db $22
    .db $1E
    .db $1C
    .db $60
    .db $00
    .db $08
    .db $02
    .db $16
    .db $1E
    .db $20
    .db $22
    .db $28
    .db $0A
    .db $FE
    .db $FF
    .db $19
    .db $19
    .db $19
    .db $19
    .db $3F
    .db $00
    .db $00
    .db $00
    .db $1F
    .db $1F
    .db $1F
    .db $3F
    .db $C0
    .db $18
    .db $F4
    .db $FC
    .db $D4
    .db $C4
    .db $A4
    .db $94
    .db $0A
    .db $03
    .db $FF
    .db $FF
    .db $0F
    .db $0D
    .db $0C
    .db $0A
    .db $C8
    .db $28
    .db $F4
    .db $F8
    .db $F0
    .db $DC
    .db $C8
    .db $C8
    .db $00
    .db $00
L_006774: ; 0x006774, $C774
    .db $00
    .db $00
    .db $00
    .db $00
    .db $03
    .db $8E
    .db $C0
    .db $0C
    JMP   L_006036
    LDB   #$28
    BRA   L_006774
    LDB   #$80
    BRA   L_006774
    LDY   #$C9FE
    JSR   BNE_LOOP_FILL
    JMP   L_00633B
L_006791: ; 0x006791, $C791
    LDB   #$A5
    LDX   #$C001
    JMP   L_006036
    JSR   L_006269
    JSR   L_00622A
    BSR   L_006791
    LDU   #$C0D7
    LDX   #$2820
    JSR   L_006269
    JSR   L_00603C
    LDY   #$C061
    JSR   L_00606D
    LDY   #$05DC
    JSR   L_006244
    TST   UNK_$49_SYS_MENU_FLAG?
    BNE   L_00601F
    CLR   $A03C
    LDA   #$01
    STA   $A03B
    LEAS  -32,S
    JSR   JMP_CLEAR_ALL_SCREEN
    LDU   #$C0D7
    LDX   #$2820
    JSR   L_006269
    JSR   L_00603C
    CLR   $A03A
    LDY   #$C065
    JSR   L_006066
    JSR   L_006269
    LDA   #$20
    TFR   A>B
    DECB
    LEAX  S
L_0067EA: ; 0x0067EA, $C7EA
    STA   X+
    DECB
    BNE   L_0067EA
    LDA   #$17
    STA   X+
    LEAX  S
    JSR   L_006257
    LDX   #$CC00
    JSR   L_006039
    .db $C5
    .db $02
